
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ae4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  08006cdc  08006cdc  00016cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d0  080072d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072d8  080072d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d8  080072d8  000172d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072dc  080072dc  000172dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080072e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000000c  080072ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  080072ec  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019090  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f7  00000000  00000000  000390ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0003cac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  0003dca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7a7  00000000  00000000  0003ecc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a33a  00000000  00000000  0006b467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108a32  00000000  00000000  000857a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018e1d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004760  00000000  00000000  0018e224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006cc4 	.word	0x08006cc4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006cc4 	.word	0x08006cc4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data, uint8_t dlc)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
	uint8_t Reg = data[0];
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	733b      	strb	r3, [r7, #12]
	uint16_t speed = 0, strom;
 800055e:	2300      	movs	r3, #0
 8000560:	817b      	strh	r3, [r7, #10]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000562:	7b3b      	ldrb	r3, [r7, #12]
 8000564:	2bd8      	cmp	r3, #216	; 0xd8
 8000566:	f000 80be 	beq.w	80006e6 <BAMOCAN_ID+0x19a>
 800056a:	2bd8      	cmp	r3, #216	; 0xd8
 800056c:	f300 8100 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000570:	2ba8      	cmp	r3, #168	; 0xa8
 8000572:	d012      	beq.n	800059a <BAMOCAN_ID+0x4e>
 8000574:	2ba8      	cmp	r3, #168	; 0xa8
 8000576:	f300 80fb 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800057a:	2b8f      	cmp	r3, #143	; 0x8f
 800057c:	d077      	beq.n	800066e <BAMOCAN_ID+0x122>
 800057e:	2b8f      	cmp	r3, #143	; 0x8f
 8000580:	f300 80f6 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000584:	2b5f      	cmp	r3, #95	; 0x5f
 8000586:	d025      	beq.n	80005d4 <BAMOCAN_ID+0x88>
 8000588:	2b5f      	cmp	r3, #95	; 0x5f
 800058a:	f300 80f1 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800058e:	2b1b      	cmp	r3, #27
 8000590:	f000 80d4 	beq.w	800073c <BAMOCAN_ID+0x1f0>
 8000594:	2b40      	cmp	r3, #64	; 0x40
 8000596:	d037      	beq.n	8000608 <BAMOCAN_ID+0xbc>
 8000598:	e0ea      	b.n	8000770 <BAMOCAN_ID+0x224>
	{
		// Drehzahl vom Bamocar bekommen
		case BAMOCAR_REG_N_ACT_FILTER:
			speed = ((data[2]<<8) + data[1]);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3302      	adds	r3, #2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4413      	add	r3, r2
 80005b0:	817b      	strh	r3, [r7, #10]
			motor1.Drehzahl = speed;
 80005b2:	4a74      	ldr	r2, [pc, #464]	; (8000784 <BAMOCAN_ID+0x238>)
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motordrehzahl\n", 14);
 80005b8:	210e      	movs	r1, #14
 80005ba:	4873      	ldr	r0, [pc, #460]	; (8000788 <BAMOCAN_ID+0x23c>)
 80005bc:	f000 f900 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(speed, 10);
 80005c0:	897b      	ldrh	r3, [r7, #10]
 80005c2:	210a      	movs	r1, #10
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f90f 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005ca:	2101      	movs	r1, #1
 80005cc:	486f      	ldr	r0, [pc, #444]	; (800078c <BAMOCAN_ID+0x240>)
 80005ce:	f000 f8f7 	bl	80007c0 <uartTransmit>
#endif

			break;
 80005d2:	e0d2      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Stromwert von Bamocar bekommen
		case BAMOCAR_REG_I_ACT_FILTER:
			strom = ((data[2]<<8) + data[1]);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3302      	adds	r3, #2
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	021b      	lsls	r3, r3, #8
 80005de:	b29a      	uxth	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4413      	add	r3, r2
 80005ea:	813b      	strh	r3, [r7, #8]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motorstrom\n", 11);
 80005ec:	210b      	movs	r1, #11
 80005ee:	4868      	ldr	r0, [pc, #416]	; (8000790 <BAMOCAN_ID+0x244>)
 80005f0:	f000 f8e6 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(strom, 10);
 80005f4:	893b      	ldrh	r3, [r7, #8]
 80005f6:	210a      	movs	r1, #10
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f8f5 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	4862      	ldr	r0, [pc, #392]	; (800078c <BAMOCAN_ID+0x240>)
 8000602:	f000 f8dd 	bl	80007c0 <uartTransmit>
#endif

			break;
 8000606:	e0b8      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Statusregister von Bamocar bekommen
		case BAMOCAR_REG_STATUS:
			bamocar_stat.status1 = ((data[4] << 24) + (data[3] << 16) + (data[2] << 8) + data[1]);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3304      	adds	r3, #4
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	061a      	lsls	r2, r3, #24
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3303      	adds	r3, #3
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	041b      	lsls	r3, r3, #16
 8000618:	441a      	add	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3302      	adds	r3, #2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	4413      	add	r3, r2
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	3201      	adds	r2, #1
 8000628:	7812      	ldrb	r2, [r2, #0]
 800062a:	4413      	add	r3, r2
 800062c:	461a      	mov	r2, r3
 800062e:	4b59      	ldr	r3, [pc, #356]	; (8000794 <BAMOCAN_ID+0x248>)
 8000630:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Status\n", 15);
 8000632:	210f      	movs	r1, #15
 8000634:	4858      	ldr	r0, [pc, #352]	; (8000798 <BAMOCAN_ID+0x24c>)
 8000636:	f000 f8c3 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800063a:	2304      	movs	r3, #4
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e00e      	b.n	800065e <BAMOCAN_ID+0x112>
			{
				uartTransmitNumber(bamocar_stat.status[i-1], 16);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a53      	ldr	r2, [pc, #332]	; (8000794 <BAMOCAN_ID+0x248>)
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	2110      	movs	r1, #16
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f8cc 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000650:	2101      	movs	r1, #1
 8000652:	4852      	ldr	r0, [pc, #328]	; (800079c <BAMOCAN_ID+0x250>)
 8000654:	f000 f8b4 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	3b01      	subs	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1ed      	bne.n	8000640 <BAMOCAN_ID+0xf4>
			}
			uartTransmit("\n", 1);
 8000664:	2101      	movs	r1, #1
 8000666:	4849      	ldr	r0, [pc, #292]	; (800078c <BAMOCAN_ID+0x240>)
 8000668:	f000 f8aa 	bl	80007c0 <uartTransmit>
#endif

			break;
 800066c:	e085      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Errorregister von Bamocar bekommen
		case BAMOCAR_REG_ERROR:
			bamocar_error.error1 = ((data[2] << 8) + data[1]);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3302      	adds	r3, #2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b29a      	uxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3301      	adds	r3, #1
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	4413      	add	r3, r2
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <BAMOCAN_ID+0x254>)
 8000688:	801a      	strh	r2, [r3, #0]
			bamocar_warnung.warnung1 = ((data[4] << 8) + data[3]);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3304      	adds	r3, #4
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b29a      	uxth	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3303      	adds	r3, #3
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b29b      	uxth	r3, r3
 800069e:	4413      	add	r3, r2
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <BAMOCAN_ID+0x258>)
 80006a4:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Error\n", 14);
 80006a6:	210e      	movs	r1, #14
 80006a8:	483f      	ldr	r0, [pc, #252]	; (80007a8 <BAMOCAN_ID+0x25c>)
 80006aa:	f000 f889 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	73bb      	strb	r3, [r7, #14]
 80006b2:	e010      	b.n	80006d6 <BAMOCAN_ID+0x18a>
			{
				uartTransmitNumber(data[1+i], 16);
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	3301      	adds	r3, #1
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2110      	movs	r1, #16
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f890 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 80006c8:	2101      	movs	r1, #1
 80006ca:	4834      	ldr	r0, [pc, #208]	; (800079c <BAMOCAN_ID+0x250>)
 80006cc:	f000 f878 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	3301      	adds	r3, #1
 80006d4:	73bb      	strb	r3, [r7, #14]
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d9eb      	bls.n	80006b4 <BAMOCAN_ID+0x168>
			}
			uartTransmit("\n", 1);
 80006dc:	2101      	movs	r1, #1
 80006de:	482b      	ldr	r0, [pc, #172]	; (800078c <BAMOCAN_ID+0x240>)
 80006e0:	f000 f86e 	bl	80007c0 <uartTransmit>
#endif

			break;
 80006e4:	e049      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Status IO Register von Bamocar bekommen
		case BAMOCAR_REG_STATUS_IO:
			bamocar_IOstatus.status1 = ((data[2] << 8) + data[1]);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <BAMOCAN_ID+0x260>)
 8000700:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar IO Status\n", 18);
 8000702:	2112      	movs	r1, #18
 8000704:	482a      	ldr	r0, [pc, #168]	; (80007b0 <BAMOCAN_ID+0x264>)
 8000706:	f000 f85b 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	737b      	strb	r3, [r7, #13]
 800070e:	e00d      	b.n	800072c <BAMOCAN_ID+0x1e0>
			{
				uartTransmitNumber(bamocar_IOstatus.status[i], 16);
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <BAMOCAN_ID+0x260>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	2110      	movs	r1, #16
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f865 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 800071e:	2101      	movs	r1, #1
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <BAMOCAN_ID+0x250>)
 8000722:	f000 f84d 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 8000726:	7b7b      	ldrb	r3, [r7, #13]
 8000728:	3301      	adds	r3, #1
 800072a:	737b      	strb	r3, [r7, #13]
 800072c:	7b7b      	ldrb	r3, [r7, #13]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d9ee      	bls.n	8000710 <BAMOCAN_ID+0x1c4>
			}
			uartTransmit("\n", 1);
 8000732:	2101      	movs	r1, #1
 8000734:	4815      	ldr	r0, [pc, #84]	; (800078c <BAMOCAN_ID+0x240>)
 8000736:	f000 f843 	bl	80007c0 <uartTransmit>
#endif

			break;
 800073a:	e01e      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Firmware von Bamocar ausgelesen
		case BAMOCAR_REG_FIRMWARE:
			bamocar_data.data = ((data[2]<<8) + data[1]);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3302      	adds	r3, #2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	3201      	adds	r2, #1
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	4413      	add	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <BAMOCAN_ID+0x268>)
 8000750:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Firmware\n", 9);
 8000752:	2109      	movs	r1, #9
 8000754:	4818      	ldr	r0, [pc, #96]	; (80007b8 <BAMOCAN_ID+0x26c>)
 8000756:	f000 f833 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(bamocar_data.data, 16);
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <BAMOCAN_ID+0x268>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2110      	movs	r1, #16
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f841 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8000766:	2101      	movs	r1, #1
 8000768:	4808      	ldr	r0, [pc, #32]	; (800078c <BAMOCAN_ID+0x240>)
 800076a:	f000 f829 	bl	80007c0 <uartTransmit>
#endif

			break;
 800076e:	e004      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Register fuer Bamocar nicht definiert, Fehler
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000770:	2121      	movs	r1, #33	; 0x21
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <BAMOCAN_ID+0x270>)
 8000774:	f000 f824 	bl	80007c0 <uartTransmit>
			break;
 8000778:	bf00      	nop
	}
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000118 	.word	0x20000118
 8000788:	08006cdc 	.word	0x08006cdc
 800078c:	08006cec 	.word	0x08006cec
 8000790:	08006cf0 	.word	0x08006cf0
 8000794:	2000002c 	.word	0x2000002c
 8000798:	08006cfc 	.word	0x08006cfc
 800079c:	08006d0c 	.word	0x08006d0c
 80007a0:	20000030 	.word	0x20000030
 80007a4:	20000034 	.word	0x20000034
 80007a8:	08006d10 	.word	0x08006d10
 80007ac:	20000028 	.word	0x20000028
 80007b0:	08006d20 	.word	0x08006d20
 80007b4:	20000038 	.word	0x20000038
 80007b8:	08006d34 	.word	0x08006d34
 80007bc:	08006d40 	.word	0x08006d40

080007c0 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <uartTransmit+0x24>)
 80007d6:	f005 f9b1 	bl	8005b3c <HAL_UART_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000016c 	.word	0x2000016c

080007e8 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f006 fa60 	bl	8006cc0 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fd17 	bl	8000238 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	f107 010c 	add.w	r1, r7, #12
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <uartTransmitNumber+0x3c>)
 8000818:	f005 f990 	bl	8005b3c <HAL_UART_Transmit>
}
 800081c:	bf00      	nop
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2000016c 	.word	0x2000016c

08000828 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800082e:	2113      	movs	r1, #19
 8000830:	483b      	ldr	r0, [pc, #236]	; (8000920 <collectHardwareInfo+0xf8>)
 8000832:	f7ff ffc5 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000836:	f001 fe87 	bl	8002548 <HAL_GetDEVID>
 800083a:	4603      	mov	r3, r0
 800083c:	210a      	movs	r1, #10
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffd2 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000844:	2115      	movs	r1, #21
 8000846:	4837      	ldr	r0, [pc, #220]	; (8000924 <collectHardwareInfo+0xfc>)
 8000848:	f7ff ffba 	bl	80007c0 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 800084c:	f001 fe70 	bl	8002530 <HAL_GetREVID>
 8000850:	4603      	mov	r3, r0
 8000852:	f242 0201 	movw	r2, #8193	; 0x2001
 8000856:	4293      	cmp	r3, r2
 8000858:	d016      	beq.n	8000888 <collectHardwareInfo+0x60>
 800085a:	f242 0201 	movw	r2, #8193	; 0x2001
 800085e:	4293      	cmp	r3, r2
 8000860:	d817      	bhi.n	8000892 <collectHardwareInfo+0x6a>
 8000862:	f241 0201 	movw	r2, #4097	; 0x1001
 8000866:	4293      	cmp	r3, r2
 8000868:	d004      	beq.n	8000874 <collectHardwareInfo+0x4c>
 800086a:	f241 0203 	movw	r2, #4099	; 0x1003
 800086e:	4293      	cmp	r3, r2
 8000870:	d005      	beq.n	800087e <collectHardwareInfo+0x56>
 8000872:	e00e      	b.n	8000892 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000874:	2101      	movs	r1, #1
 8000876:	482c      	ldr	r0, [pc, #176]	; (8000928 <collectHardwareInfo+0x100>)
 8000878:	f7ff ffa2 	bl	80007c0 <uartTransmit>
			break;
 800087c:	e011      	b.n	80008a2 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 800087e:	2101      	movs	r1, #1
 8000880:	482a      	ldr	r0, [pc, #168]	; (800092c <collectHardwareInfo+0x104>)
 8000882:	f7ff ff9d 	bl	80007c0 <uartTransmit>
			break;
 8000886:	e00c      	b.n	80008a2 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000888:	2101      	movs	r1, #1
 800088a:	4829      	ldr	r0, [pc, #164]	; (8000930 <collectHardwareInfo+0x108>)
 800088c:	f7ff ff98 	bl	80007c0 <uartTransmit>
			break;
 8000890:	e007      	b.n	80008a2 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000892:	f001 fe4d 	bl	8002530 <HAL_GetREVID>
 8000896:	4603      	mov	r3, r0
 8000898:	210a      	movs	r1, #10
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffa4 	bl	80007e8 <uartTransmitNumber>
			break;
 80008a0:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80008a2:	2113      	movs	r1, #19
 80008a4:	4823      	ldr	r0, [pc, #140]	; (8000934 <collectHardwareInfo+0x10c>)
 80008a6:	f7ff ff8b 	bl	80007c0 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80008aa:	f004 f873 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 80008ae:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a21      	ldr	r2, [pc, #132]	; (8000938 <collectHardwareInfo+0x110>)
 80008b4:	fba2 2303 	umull	r2, r3, r2, r3
 80008b8:	0c9b      	lsrs	r3, r3, #18
 80008ba:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80008bc:	210a      	movs	r1, #10
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff92 	bl	80007e8 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80008c4:	2104      	movs	r1, #4
 80008c6:	481d      	ldr	r0, [pc, #116]	; (800093c <collectHardwareInfo+0x114>)
 80008c8:	f7ff ff7a 	bl	80007c0 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80008cc:	210f      	movs	r1, #15
 80008ce:	481c      	ldr	r0, [pc, #112]	; (8000940 <collectHardwareInfo+0x118>)
 80008d0:	f7ff ff76 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80008d4:	f001 fe46 	bl	8002564 <HAL_GetUIDw0>
 80008d8:	4603      	mov	r3, r0
 80008da:	2110      	movs	r1, #16
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff83 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80008e2:	2101      	movs	r1, #1
 80008e4:	4817      	ldr	r0, [pc, #92]	; (8000944 <collectHardwareInfo+0x11c>)
 80008e6:	f7ff ff6b 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80008ea:	f001 fe47 	bl	800257c <HAL_GetUIDw1>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2110      	movs	r1, #16
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff78 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80008f8:	2101      	movs	r1, #1
 80008fa:	4812      	ldr	r0, [pc, #72]	; (8000944 <collectHardwareInfo+0x11c>)
 80008fc:	f7ff ff60 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000900:	f001 fe48 	bl	8002594 <HAL_GetUIDw2>
 8000904:	4603      	mov	r3, r0
 8000906:	2110      	movs	r1, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff6d 	bl	80007e8 <uartTransmitNumber>

	uartTransmit("\n", 1);
 800090e:	2101      	movs	r1, #1
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <collectHardwareInfo+0x120>)
 8000912:	f7ff ff55 	bl	80007c0 <uartTransmit>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	08006dbc 	.word	0x08006dbc
 8000924:	08006dd0 	.word	0x08006dd0
 8000928:	08006de8 	.word	0x08006de8
 800092c:	08006dec 	.word	0x08006dec
 8000930:	08006df0 	.word	0x08006df0
 8000934:	08006df4 	.word	0x08006df4
 8000938:	431bde83 	.word	0x431bde83
 800093c:	08006e08 	.word	0x08006e08
 8000940:	08006e10 	.word	0x08006e10
 8000944:	08006e20 	.word	0x08006e20
 8000948:	08006e24 	.word	0x08006e24

0800094c <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000950:	210f      	movs	r1, #15
 8000952:	4826      	ldr	r0, [pc, #152]	; (80009ec <collectSoftwareInfo+0xa0>)
 8000954:	f7ff ff34 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000958:	2108      	movs	r1, #8
 800095a:	4825      	ldr	r0, [pc, #148]	; (80009f0 <collectSoftwareInfo+0xa4>)
 800095c:	f7ff ff30 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000960:	210f      	movs	r1, #15
 8000962:	4824      	ldr	r0, [pc, #144]	; (80009f4 <collectSoftwareInfo+0xa8>)
 8000964:	f7ff ff2c 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000968:	2108      	movs	r1, #8
 800096a:	4823      	ldr	r0, [pc, #140]	; (80009f8 <collectSoftwareInfo+0xac>)
 800096c:	f7ff ff28 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000970:	210d      	movs	r1, #13
 8000972:	4822      	ldr	r0, [pc, #136]	; (80009fc <collectSoftwareInfo+0xb0>)
 8000974:	f7ff ff24 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000978:	2129      	movs	r1, #41	; 0x29
 800097a:	4821      	ldr	r0, [pc, #132]	; (8000a00 <collectSoftwareInfo+0xb4>)
 800097c:	f7ff ff20 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000980:	2101      	movs	r1, #1
 8000982:	4820      	ldr	r0, [pc, #128]	; (8000a04 <collectSoftwareInfo+0xb8>)
 8000984:	f7ff ff1c 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000988:	2115      	movs	r1, #21
 800098a:	481f      	ldr	r0, [pc, #124]	; (8000a08 <collectSoftwareInfo+0xbc>)
 800098c:	f7ff ff18 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000990:	2105      	movs	r1, #5
 8000992:	481e      	ldr	r0, [pc, #120]	; (8000a0c <collectSoftwareInfo+0xc0>)
 8000994:	f7ff ff14 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000998:	2114      	movs	r1, #20
 800099a:	481d      	ldr	r0, [pc, #116]	; (8000a10 <collectSoftwareInfo+0xc4>)
 800099c:	f7ff ff10 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80009a0:	2108      	movs	r1, #8
 80009a2:	481c      	ldr	r0, [pc, #112]	; (8000a14 <collectSoftwareInfo+0xc8>)
 80009a4:	f7ff ff0c 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80009a8:	2115      	movs	r1, #21
 80009aa:	481b      	ldr	r0, [pc, #108]	; (8000a18 <collectSoftwareInfo+0xcc>)
 80009ac:	f7ff ff08 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80009b0:	2111      	movs	r1, #17
 80009b2:	481a      	ldr	r0, [pc, #104]	; (8000a1c <collectSoftwareInfo+0xd0>)
 80009b4:	f7ff ff04 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009b8:	2101      	movs	r1, #1
 80009ba:	4812      	ldr	r0, [pc, #72]	; (8000a04 <collectSoftwareInfo+0xb8>)
 80009bc:	f7ff ff00 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80009c0:	210f      	movs	r1, #15
 80009c2:	4817      	ldr	r0, [pc, #92]	; (8000a20 <collectSoftwareInfo+0xd4>)
 80009c4:	f7ff fefc 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80009c8:	210b      	movs	r1, #11
 80009ca:	4816      	ldr	r0, [pc, #88]	; (8000a24 <collectSoftwareInfo+0xd8>)
 80009cc:	f7ff fef8 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80009d0:	210f      	movs	r1, #15
 80009d2:	4815      	ldr	r0, [pc, #84]	; (8000a28 <collectSoftwareInfo+0xdc>)
 80009d4:	f7ff fef4 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80009d8:	2109      	movs	r1, #9
 80009da:	4814      	ldr	r0, [pc, #80]	; (8000a2c <collectSoftwareInfo+0xe0>)
 80009dc:	f7ff fef0 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009e0:	2101      	movs	r1, #1
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <collectSoftwareInfo+0xb8>)
 80009e4:	f7ff feec 	bl	80007c0 <uartTransmit>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	08006e28 	.word	0x08006e28
 80009f0:	08006e38 	.word	0x08006e38
 80009f4:	08006e40 	.word	0x08006e40
 80009f8:	08006e50 	.word	0x08006e50
 80009fc:	08006e58 	.word	0x08006e58
 8000a00:	08006e68 	.word	0x08006e68
 8000a04:	08006e24 	.word	0x08006e24
 8000a08:	08006e94 	.word	0x08006e94
 8000a0c:	08006eac 	.word	0x08006eac
 8000a10:	08006eb4 	.word	0x08006eb4
 8000a14:	08006ec8 	.word	0x08006ec8
 8000a18:	08006ed0 	.word	0x08006ed0
 8000a1c:	08006ee8 	.word	0x08006ee8
 8000a20:	08006efc 	.word	0x08006efc
 8000a24:	08006f0c 	.word	0x08006f0c
 8000a28:	08006f18 	.word	0x08006f18
 8000a2c:	08006f28 	.word	0x08006f28

08000a30 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000a34:	2112      	movs	r1, #18
 8000a36:	4824      	ldr	r0, [pc, #144]	; (8000ac8 <collectMiddlewareInfo+0x98>)
 8000a38:	f7ff fec2 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000a3c:	210a      	movs	r1, #10
 8000a3e:	2005      	movs	r0, #5
 8000a40:	f7ff fed2 	bl	80007e8 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000a44:	2101      	movs	r1, #1
 8000a46:	4821      	ldr	r0, [pc, #132]	; (8000acc <collectMiddlewareInfo+0x9c>)
 8000a48:	f7ff feba 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000a4c:	210a      	movs	r1, #10
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff feca 	bl	80007e8 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000a54:	2110      	movs	r1, #16
 8000a56:	481e      	ldr	r0, [pc, #120]	; (8000ad0 <collectMiddlewareInfo+0xa0>)
 8000a58:	f7ff feb2 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000a5c:	f001 fd5e 	bl	800251c <HAL_GetHalVersion>
 8000a60:	4603      	mov	r3, r0
 8000a62:	0e1b      	lsrs	r3, r3, #24
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	210a      	movs	r1, #10
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff febd 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4816      	ldr	r0, [pc, #88]	; (8000acc <collectMiddlewareInfo+0x9c>)
 8000a72:	f7ff fea5 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000a76:	f001 fd51 	bl	800251c <HAL_GetHalVersion>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	0c1b      	lsrs	r3, r3, #16
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	210a      	movs	r1, #10
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff feb0 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4810      	ldr	r0, [pc, #64]	; (8000acc <collectMiddlewareInfo+0x9c>)
 8000a8c:	f7ff fe98 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000a90:	f001 fd44 	bl	800251c <HAL_GetHalVersion>
 8000a94:	4603      	mov	r3, r0
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	210a      	movs	r1, #10
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fea3 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <collectMiddlewareInfo+0x9c>)
 8000aa6:	f7ff fe8b 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000aaa:	f001 fd37 	bl	800251c <HAL_GetHalVersion>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	210a      	movs	r1, #10
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fe97 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000aba:	2101      	movs	r1, #1
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <collectMiddlewareInfo+0xa4>)
 8000abe:	f7ff fe7f 	bl	80007c0 <uartTransmit>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	08006f34 	.word	0x08006f34
 8000acc:	08006f48 	.word	0x08006f48
 8000ad0:	08006f4c 	.word	0x08006f4c
 8000ad4:	08006e24 	.word	0x08006e24

08000ad8 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000adc:	2114      	movs	r1, #20
 8000ade:	4814      	ldr	r0, [pc, #80]	; (8000b30 <collectGitcounts+0x58>)
 8000ae0:	f7ff fe6e 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	4813      	ldr	r0, [pc, #76]	; (8000b34 <collectGitcounts+0x5c>)
 8000ae8:	f7ff fe6a 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000aec:	2116      	movs	r1, #22
 8000aee:	4812      	ldr	r0, [pc, #72]	; (8000b38 <collectGitcounts+0x60>)
 8000af0:	f7ff fe66 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000af4:	2103      	movs	r1, #3
 8000af6:	4811      	ldr	r0, [pc, #68]	; (8000b3c <collectGitcounts+0x64>)
 8000af8:	f7ff fe62 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000afc:	211c      	movs	r1, #28
 8000afe:	4810      	ldr	r0, [pc, #64]	; (8000b40 <collectGitcounts+0x68>)
 8000b00:	f7ff fe5e 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000b04:	2103      	movs	r1, #3
 8000b06:	480f      	ldr	r0, [pc, #60]	; (8000b44 <collectGitcounts+0x6c>)
 8000b08:	f7ff fe5a 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000b0c:	2115      	movs	r1, #21
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <collectGitcounts+0x70>)
 8000b10:	f7ff fe56 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000b14:	2102      	movs	r1, #2
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <collectGitcounts+0x74>)
 8000b18:	f7ff fe52 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000b1c:	2114      	movs	r1, #20
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <collectGitcounts+0x78>)
 8000b20:	f7ff fe4e 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000b24:	2102      	movs	r1, #2
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <collectGitcounts+0x7c>)
 8000b28:	f7ff fe4a 	bl	80007c0 <uartTransmit>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	08006f5c 	.word	0x08006f5c
 8000b34:	08006f70 	.word	0x08006f70
 8000b38:	08006f74 	.word	0x08006f74
 8000b3c:	08006f8c 	.word	0x08006f8c
 8000b40:	08006f90 	.word	0x08006f90
 8000b44:	08006fac 	.word	0x08006fac
 8000b48:	08006e94 	.word	0x08006e94
 8000b4c:	08006fb0 	.word	0x08006fb0
 8000b50:	08006eb4 	.word	0x08006eb4
 8000b54:	08006fb4 	.word	0x08006fb4

08000b58 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000b5c:	2111      	movs	r1, #17
 8000b5e:	480e      	ldr	r0, [pc, #56]	; (8000b98 <collectSystemInfo+0x40>)
 8000b60:	f7ff fe2e 	bl	80007c0 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000b64:	f7ff fe60 	bl	8000828 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000b68:	2111      	movs	r1, #17
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <collectSystemInfo+0x44>)
 8000b6c:	f7ff fe28 	bl	80007c0 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000b70:	f7ff feec 	bl	800094c <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000b74:	2113      	movs	r1, #19
 8000b76:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <collectSystemInfo+0x48>)
 8000b78:	f7ff fe22 	bl	80007c0 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000b7c:	f7ff ff58 	bl	8000a30 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000b80:	2113      	movs	r1, #19
 8000b82:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <collectSystemInfo+0x4c>)
 8000b84:	f7ff fe1c 	bl	80007c0 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000b88:	f7ff ffa6 	bl	8000ad8 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000b8c:	2103      	movs	r1, #3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <collectSystemInfo+0x50>)
 8000b90:	f7ff fe16 	bl	80007c0 <uartTransmit>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	08006fb8 	.word	0x08006fb8
 8000b9c:	08006fcc 	.word	0x08006fcc
 8000ba0:	08006fe0 	.word	0x08006fe0
 8000ba4:	08006ff4 	.word	0x08006ff4
 8000ba8:	08007008 	.word	0x08007008

08000bac <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <readResetSource+0xa0>)
 8000bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d002      	beq.n	8000bc8 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000bc8:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <readResetSource+0xa0>)
 8000bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <readResetSource+0xa0>)
 8000bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	da02      	bge.n	8000be8 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	3304      	adds	r3, #4
 8000be6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <readResetSource+0xa0>)
 8000bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <readResetSource+0xa0>)
 8000bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	3310      	adds	r3, #16
 8000c0a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <readResetSource+0xa0>)
 8000c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	3320      	adds	r3, #32
 8000c1c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <readResetSource+0xa0>)
 8000c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	3340      	adds	r3, #64	; 0x40
 8000c2e:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <readResetSource+0xa0>)
 8000c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <readResetSource+0xa0>)
 8000c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c3a:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000c5a:	2106      	movs	r1, #6
 8000c5c:	482a      	ldr	r0, [pc, #168]	; (8000d08 <printResetSource+0xb8>)
 8000c5e:	f7ff fdaf 	bl	80007c0 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d104      	bne.n	8000c72 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000c68:	210f      	movs	r1, #15
 8000c6a:	4828      	ldr	r0, [pc, #160]	; (8000d0c <printResetSource+0xbc>)
 8000c6c:	f7ff fda8 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000c70:	e046      	b.n	8000d00 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000c7c:	2118      	movs	r1, #24
 8000c7e:	4824      	ldr	r0, [pc, #144]	; (8000d10 <printResetSource+0xc0>)
 8000c80:	f7ff fd9e 	bl	80007c0 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000c8e:	2116      	movs	r1, #22
 8000c90:	4820      	ldr	r0, [pc, #128]	; (8000d14 <printResetSource+0xc4>)
 8000c92:	f7ff fd95 	bl	80007c0 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000ca0:	210a      	movs	r1, #10
 8000ca2:	481d      	ldr	r0, [pc, #116]	; (8000d18 <printResetSource+0xc8>)
 8000ca4:	f7ff fd8c 	bl	80007c0 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	4819      	ldr	r0, [pc, #100]	; (8000d1c <printResetSource+0xcc>)
 8000cb6:	f7ff fd83 	bl	80007c0 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000cc4:	210f      	movs	r1, #15
 8000cc6:	4816      	ldr	r0, [pc, #88]	; (8000d20 <printResetSource+0xd0>)
 8000cc8:	f7ff fd7a 	bl	80007c0 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	4812      	ldr	r0, [pc, #72]	; (8000d24 <printResetSource+0xd4>)
 8000cda:	f7ff fd71 	bl	80007c0 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000ce8:	210a      	movs	r1, #10
 8000cea:	480f      	ldr	r0, [pc, #60]	; (8000d28 <printResetSource+0xd8>)
 8000cec:	f7ff fd68 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	da03      	bge.n	8000d00 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000cf8:	2105      	movs	r1, #5
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <printResetSource+0xdc>)
 8000cfc:	f7ff fd60 	bl	80007c0 <uartTransmit>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	0800700c 	.word	0x0800700c
 8000d0c:	08007014 	.word	0x08007014
 8000d10:	08007024 	.word	0x08007024
 8000d14:	08007040 	.word	0x08007040
 8000d18:	08007058 	.word	0x08007058
 8000d1c:	08007064 	.word	0x08007064
 8000d20:	08007078 	.word	0x08007078
 8000d24:	08007088 	.word	0x08007088
 8000d28:	08007098 	.word	0x08007098
 8000d2c:	080070a4 	.word	0x080070a4

08000d30 <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000d46:	2306      	movs	r3, #6
 8000d48:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	480e      	ldr	r0, [pc, #56]	; (8000d90 <ADC_Gaspedal+0x60>)
 8000d58:	f001 fe06 	bl	8002968 <HAL_ADC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <ADC_Gaspedal+0x36>
	{
		Error_Handler();
 8000d62:	f001 f98f 	bl	8002084 <Error_Handler>
	}

	// ADC Starten und Wert einlesen
	HAL_ADC_Start(&hadc1);
 8000d66:	480a      	ldr	r0, [pc, #40]	; (8000d90 <ADC_Gaspedal+0x60>)
 8000d68:	f001 fc64 	bl	8002634 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000d6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d70:	4807      	ldr	r0, [pc, #28]	; (8000d90 <ADC_Gaspedal+0x60>)
 8000d72:	f001 fd61 	bl	8002838 <HAL_ADC_PollForConversion>
	ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <ADC_Gaspedal+0x60>)
 8000d78:	f001 fde9 	bl	800294e <HAL_ADC_GetValue>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <ADC_Gaspedal+0x60>)
 8000d82:	f001 fd25 	bl	80027d0 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000d86:	8afb      	ldrh	r3, [r7, #22]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000058 	.word	0x20000058

08000d94 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d104      	bne.n	8000dae <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000da4:	2107      	movs	r1, #7
 8000da6:	480f      	ldr	r0, [pc, #60]	; (8000de4 <hal_error+0x50>)
 8000da8:	f7ff fd0a 	bl	80007c0 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000dac:	e016      	b.n	8000ddc <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d104      	bne.n	8000dbe <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000db4:	210a      	movs	r1, #10
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <hal_error+0x54>)
 8000db8:	f7ff fd02 	bl	80007c0 <uartTransmit>
}
 8000dbc:	e00e      	b.n	8000ddc <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d104      	bne.n	8000dce <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000dc4:	2109      	movs	r1, #9
 8000dc6:	4809      	ldr	r0, [pc, #36]	; (8000dec <hal_error+0x58>)
 8000dc8:	f7ff fcfa 	bl	80007c0 <uartTransmit>
}
 8000dcc:	e006      	b.n	8000ddc <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d103      	bne.n	8000ddc <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000dd4:	210c      	movs	r1, #12
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <hal_error+0x5c>)
 8000dd8:	f7ff fcf2 	bl	80007c0 <uartTransmit>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	080070ac 	.word	0x080070ac
 8000de8:	080070b4 	.word	0x080070b4
 8000dec:	080070c0 	.word	0x080070c0
 8000df0:	080070cc 	.word	0x080070cc

08000df4 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8000df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfc:	48ce      	ldr	r0, [pc, #824]	; (8001138 <readall_inputs+0x344>)
 8000dfe:	f003 f9ad 	bl	800415c <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	b2d9      	uxtb	r1, r3
 8000e0a:	4acc      	ldr	r2, [pc, #816]	; (800113c <readall_inputs+0x348>)
 8000e0c:	7813      	ldrb	r3, [r2, #0]
 8000e0e:	f361 0300 	bfi	r3, r1, #0, #1
 8000e12:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 8000e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e18:	48c7      	ldr	r0, [pc, #796]	; (8001138 <readall_inputs+0x344>)
 8000e1a:	f003 f99f 	bl	800415c <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	b2d9      	uxtb	r1, r3
 8000e26:	4ac5      	ldr	r2, [pc, #788]	; (800113c <readall_inputs+0x348>)
 8000e28:	7813      	ldrb	r3, [r2, #0]
 8000e2a:	f361 0341 	bfi	r3, r1, #1, #1
 8000e2e:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 8000e30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e34:	48c0      	ldr	r0, [pc, #768]	; (8001138 <readall_inputs+0x344>)
 8000e36:	f003 f991 	bl	800415c <HAL_GPIO_ReadPin>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	b2d9      	uxtb	r1, r3
 8000e42:	4abe      	ldr	r2, [pc, #760]	; (800113c <readall_inputs+0x348>)
 8000e44:	7813      	ldrb	r3, [r2, #0]
 8000e46:	f361 0382 	bfi	r3, r1, #2, #1
 8000e4a:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 8000e4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e50:	48b9      	ldr	r0, [pc, #740]	; (8001138 <readall_inputs+0x344>)
 8000e52:	f003 f983 	bl	800415c <HAL_GPIO_ReadPin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	b2d9      	uxtb	r1, r3
 8000e5e:	4ab7      	ldr	r2, [pc, #732]	; (800113c <readall_inputs+0x348>)
 8000e60:	7813      	ldrb	r3, [r2, #0]
 8000e62:	f361 03c3 	bfi	r3, r1, #3, #1
 8000e66:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 8000e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6c:	48b2      	ldr	r0, [pc, #712]	; (8001138 <readall_inputs+0x344>)
 8000e6e:	f003 f975 	bl	800415c <HAL_GPIO_ReadPin>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	b2d9      	uxtb	r1, r3
 8000e7a:	4ab0      	ldr	r2, [pc, #704]	; (800113c <readall_inputs+0x348>)
 8000e7c:	7813      	ldrb	r3, [r2, #0]
 8000e7e:	f361 1304 	bfi	r3, r1, #4, #1
 8000e82:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 8000e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e88:	48ad      	ldr	r0, [pc, #692]	; (8001140 <readall_inputs+0x34c>)
 8000e8a:	f003 f967 	bl	800415c <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	b2d9      	uxtb	r1, r3
 8000e96:	4aa9      	ldr	r2, [pc, #676]	; (800113c <readall_inputs+0x348>)
 8000e98:	7813      	ldrb	r3, [r2, #0]
 8000e9a:	f361 1345 	bfi	r3, r1, #5, #1
 8000e9e:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	48a7      	ldr	r0, [pc, #668]	; (8001140 <readall_inputs+0x34c>)
 8000ea4:	f003 f95a 	bl	800415c <HAL_GPIO_ReadPin>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	b2d9      	uxtb	r1, r3
 8000eb0:	4aa2      	ldr	r2, [pc, #648]	; (800113c <readall_inputs+0x348>)
 8000eb2:	7813      	ldrb	r3, [r2, #0]
 8000eb4:	f361 1386 	bfi	r3, r1, #6, #1
 8000eb8:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 8000eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ebe:	48a1      	ldr	r0, [pc, #644]	; (8001144 <readall_inputs+0x350>)
 8000ec0:	f003 f94c 	bl	800415c <HAL_GPIO_ReadPin>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	b2d9      	uxtb	r1, r3
 8000ecc:	4a9b      	ldr	r2, [pc, #620]	; (800113c <readall_inputs+0x348>)
 8000ece:	7813      	ldrb	r3, [r2, #0]
 8000ed0:	f361 13c7 	bfi	r3, r1, #7, #1
 8000ed4:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eda:	489b      	ldr	r0, [pc, #620]	; (8001148 <readall_inputs+0x354>)
 8000edc:	f003 f93e 	bl	800415c <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	b2d9      	uxtb	r1, r3
 8000ee8:	4a94      	ldr	r2, [pc, #592]	; (800113c <readall_inputs+0x348>)
 8000eea:	7853      	ldrb	r3, [r2, #1]
 8000eec:	f361 0300 	bfi	r3, r1, #0, #1
 8000ef0:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	4895      	ldr	r0, [pc, #596]	; (800114c <readall_inputs+0x358>)
 8000ef6:	f003 f931 	bl	800415c <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	b2d9      	uxtb	r1, r3
 8000f02:	4a8e      	ldr	r2, [pc, #568]	; (800113c <readall_inputs+0x348>)
 8000f04:	7853      	ldrb	r3, [r2, #1]
 8000f06:	f361 0341 	bfi	r3, r1, #1, #1
 8000f0a:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	488c      	ldr	r0, [pc, #560]	; (8001140 <readall_inputs+0x34c>)
 8000f10:	f003 f924 	bl	800415c <HAL_GPIO_ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	b2d9      	uxtb	r1, r3
 8000f1c:	4a87      	ldr	r2, [pc, #540]	; (800113c <readall_inputs+0x348>)
 8000f1e:	7853      	ldrb	r3, [r2, #1]
 8000f20:	f361 0382 	bfi	r3, r1, #2, #1
 8000f24:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000f26:	2140      	movs	r1, #64	; 0x40
 8000f28:	4883      	ldr	r0, [pc, #524]	; (8001138 <readall_inputs+0x344>)
 8000f2a:	f003 f917 	bl	800415c <HAL_GPIO_ReadPin>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	b2d9      	uxtb	r1, r3
 8000f36:	4a81      	ldr	r2, [pc, #516]	; (800113c <readall_inputs+0x348>)
 8000f38:	7853      	ldrb	r3, [r2, #1]
 8000f3a:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f3e:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000f40:	2101      	movs	r1, #1
 8000f42:	4883      	ldr	r0, [pc, #524]	; (8001150 <readall_inputs+0x35c>)
 8000f44:	f003 f90a 	bl	800415c <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	b2d9      	uxtb	r1, r3
 8000f50:	4a7a      	ldr	r2, [pc, #488]	; (800113c <readall_inputs+0x348>)
 8000f52:	7853      	ldrb	r3, [r2, #1]
 8000f54:	f361 1304 	bfi	r3, r1, #4, #1
 8000f58:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	487c      	ldr	r0, [pc, #496]	; (8001150 <readall_inputs+0x35c>)
 8000f5e:	f003 f8fd 	bl	800415c <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	b2d9      	uxtb	r1, r3
 8000f6a:	4a74      	ldr	r2, [pc, #464]	; (800113c <readall_inputs+0x348>)
 8000f6c:	7853      	ldrb	r3, [r2, #1]
 8000f6e:	f361 1345 	bfi	r3, r1, #5, #1
 8000f72:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 8000f74:	2102      	movs	r1, #2
 8000f76:	4876      	ldr	r0, [pc, #472]	; (8001150 <readall_inputs+0x35c>)
 8000f78:	f003 f8f0 	bl	800415c <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	b2d9      	uxtb	r1, r3
 8000f84:	4a73      	ldr	r2, [pc, #460]	; (8001154 <readall_inputs+0x360>)
 8000f86:	7813      	ldrb	r3, [r2, #0]
 8000f88:	f361 0300 	bfi	r3, r1, #0, #1
 8000f8c:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 8000f8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f92:	4869      	ldr	r0, [pc, #420]	; (8001138 <readall_inputs+0x344>)
 8000f94:	f003 f8e2 	bl	800415c <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	b2d9      	uxtb	r1, r3
 8000fa0:	4a6c      	ldr	r2, [pc, #432]	; (8001154 <readall_inputs+0x360>)
 8000fa2:	7813      	ldrb	r3, [r2, #0]
 8000fa4:	f361 0341 	bfi	r3, r1, #1, #1
 8000fa8:	7013      	strb	r3, [r2, #0]
	sdc_in.AkkuSDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 8000faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fae:	4862      	ldr	r0, [pc, #392]	; (8001138 <readall_inputs+0x344>)
 8000fb0:	f003 f8d4 	bl	800415c <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	b2d9      	uxtb	r1, r3
 8000fbc:	4a65      	ldr	r2, [pc, #404]	; (8001154 <readall_inputs+0x360>)
 8000fbe:	7813      	ldrb	r3, [r2, #0]
 8000fc0:	f361 0382 	bfi	r3, r1, #2, #1
 8000fc4:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000fc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fca:	485e      	ldr	r0, [pc, #376]	; (8001144 <readall_inputs+0x350>)
 8000fcc:	f003 f8c6 	bl	800415c <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	b2d9      	uxtb	r1, r3
 8000fd8:	4a5e      	ldr	r2, [pc, #376]	; (8001154 <readall_inputs+0x360>)
 8000fda:	7813      	ldrb	r3, [r2, #0]
 8000fdc:	f361 03c3 	bfi	r3, r1, #3, #1
 8000fe0:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4859      	ldr	r0, [pc, #356]	; (800114c <readall_inputs+0x358>)
 8000fe6:	f003 f8b9 	bl	800415c <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	b2d9      	uxtb	r1, r3
 8000ff2:	4a58      	ldr	r2, [pc, #352]	; (8001154 <readall_inputs+0x360>)
 8000ff4:	7813      	ldrb	r3, [r2, #0]
 8000ff6:	f361 1304 	bfi	r3, r1, #4, #1
 8000ffa:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	4853      	ldr	r0, [pc, #332]	; (800114c <readall_inputs+0x358>)
 8001000:	f003 f8ac 	bl	800415c <HAL_GPIO_ReadPin>
 8001004:	4603      	mov	r3, r0
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	b2d9      	uxtb	r1, r3
 800100c:	4a52      	ldr	r2, [pc, #328]	; (8001158 <readall_inputs+0x364>)
 800100e:	7813      	ldrb	r3, [r2, #0]
 8001010:	f361 0300 	bfi	r3, r1, #0, #1
 8001014:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8001016:	2110      	movs	r1, #16
 8001018:	484b      	ldr	r0, [pc, #300]	; (8001148 <readall_inputs+0x354>)
 800101a:	f003 f89f 	bl	800415c <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	b2d9      	uxtb	r1, r3
 8001026:	4a4c      	ldr	r2, [pc, #304]	; (8001158 <readall_inputs+0x364>)
 8001028:	7813      	ldrb	r3, [r2, #0]
 800102a:	f361 0341 	bfi	r3, r1, #1, #1
 800102e:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 8001030:	2108      	movs	r1, #8
 8001032:	4841      	ldr	r0, [pc, #260]	; (8001138 <readall_inputs+0x344>)
 8001034:	f003 f892 	bl	800415c <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	b2d9      	uxtb	r1, r3
 8001040:	4a45      	ldr	r2, [pc, #276]	; (8001158 <readall_inputs+0x364>)
 8001042:	7813      	ldrb	r3, [r2, #0]
 8001044:	f361 0382 	bfi	r3, r1, #2, #1
 8001048:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 800104a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104e:	483f      	ldr	r0, [pc, #252]	; (800114c <readall_inputs+0x358>)
 8001050:	f003 f884 	bl	800415c <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	b2d9      	uxtb	r1, r3
 800105c:	4a3e      	ldr	r2, [pc, #248]	; (8001158 <readall_inputs+0x364>)
 800105e:	7813      	ldrb	r3, [r2, #0]
 8001060:	f361 03c3 	bfi	r3, r1, #3, #1
 8001064:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001066:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800106a:	4839      	ldr	r0, [pc, #228]	; (8001150 <readall_inputs+0x35c>)
 800106c:	f003 f876 	bl	800415c <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	b2d9      	uxtb	r1, r3
 8001078:	4a37      	ldr	r2, [pc, #220]	; (8001158 <readall_inputs+0x364>)
 800107a:	7813      	ldrb	r3, [r2, #0]
 800107c:	f361 1304 	bfi	r3, r1, #4, #1
 8001080:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001082:	2110      	movs	r1, #16
 8001084:	482c      	ldr	r0, [pc, #176]	; (8001138 <readall_inputs+0x344>)
 8001086:	f003 f869 	bl	800415c <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	b2d9      	uxtb	r1, r3
 8001092:	4a31      	ldr	r2, [pc, #196]	; (8001158 <readall_inputs+0x364>)
 8001094:	7813      	ldrb	r3, [r2, #0]
 8001096:	f361 1345 	bfi	r3, r1, #5, #1
 800109a:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 800109c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a0:	4829      	ldr	r0, [pc, #164]	; (8001148 <readall_inputs+0x354>)
 80010a2:	f003 f85b 	bl	800415c <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	b2d9      	uxtb	r1, r3
 80010ae:	4a2a      	ldr	r2, [pc, #168]	; (8001158 <readall_inputs+0x364>)
 80010b0:	7813      	ldrb	r3, [r2, #0]
 80010b2:	f361 1386 	bfi	r3, r1, #6, #1
 80010b6:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 80010b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010bc:	4822      	ldr	r0, [pc, #136]	; (8001148 <readall_inputs+0x354>)
 80010be:	f003 f84d 	bl	800415c <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	b2d9      	uxtb	r1, r3
 80010ca:	4a23      	ldr	r2, [pc, #140]	; (8001158 <readall_inputs+0x364>)
 80010cc:	7813      	ldrb	r3, [r2, #0]
 80010ce:	f361 13c7 	bfi	r3, r1, #7, #1
 80010d2:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	4821      	ldr	r0, [pc, #132]	; (800115c <readall_inputs+0x368>)
 80010d8:	f003 f840 	bl	800415c <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	b2d9      	uxtb	r1, r3
 80010e4:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <readall_inputs+0x364>)
 80010e6:	7853      	ldrb	r3, [r2, #1]
 80010e8:	f361 0300 	bfi	r3, r1, #0, #1
 80010ec:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 80010ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f2:	4817      	ldr	r0, [pc, #92]	; (8001150 <readall_inputs+0x35c>)
 80010f4:	f003 f832 	bl	800415c <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	b2d9      	uxtb	r1, r3
 8001100:	4a15      	ldr	r2, [pc, #84]	; (8001158 <readall_inputs+0x364>)
 8001102:	7853      	ldrb	r3, [r2, #1]
 8001104:	f361 0341 	bfi	r3, r1, #1, #1
 8001108:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 800110a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110e:	4810      	ldr	r0, [pc, #64]	; (8001150 <readall_inputs+0x35c>)
 8001110:	f003 f824 	bl	800415c <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	b2d9      	uxtb	r1, r3
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <readall_inputs+0x364>)
 800111e:	7853      	ldrb	r3, [r2, #1]
 8001120:	f361 0382 	bfi	r3, r1, #2, #1
 8001124:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 8001126:	2120      	movs	r1, #32
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <readall_inputs+0x358>)
 800112a:	f003 f817 	bl	800415c <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	b2d9      	uxtb	r1, r3
 8001136:	e013      	b.n	8001160 <readall_inputs+0x36c>
 8001138:	40021000 	.word	0x40021000
 800113c:	2000003c 	.word	0x2000003c
 8001140:	40021400 	.word	0x40021400
 8001144:	40020400 	.word	0x40020400
 8001148:	40020c00 	.word	0x40020c00
 800114c:	40021800 	.word	0x40021800
 8001150:	40020000 	.word	0x40020000
 8001154:	20000040 	.word	0x20000040
 8001158:	20000044 	.word	0x20000044
 800115c:	40020800 	.word	0x40020800
 8001160:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <readall_inputs+0x3e4>)
 8001162:	7853      	ldrb	r3, [r2, #1]
 8001164:	f361 03c3 	bfi	r3, r1, #3, #1
 8001168:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 800116a:	2140      	movs	r1, #64	; 0x40
 800116c:	481b      	ldr	r0, [pc, #108]	; (80011dc <readall_inputs+0x3e8>)
 800116e:	f002 fff5 	bl	800415c <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	b2d9      	uxtb	r1, r3
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <readall_inputs+0x3e4>)
 800117c:	7853      	ldrb	r3, [r2, #1]
 800117e:	f361 1304 	bfi	r3, r1, #4, #1
 8001182:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	4815      	ldr	r0, [pc, #84]	; (80011dc <readall_inputs+0x3e8>)
 8001188:	f002 ffe8 	bl	800415c <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	b2d9      	uxtb	r1, r3
 8001194:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <readall_inputs+0x3e4>)
 8001196:	7853      	ldrb	r3, [r2, #1]
 8001198:	f361 1345 	bfi	r3, r1, #5, #1
 800119c:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 800119e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a2:	480e      	ldr	r0, [pc, #56]	; (80011dc <readall_inputs+0x3e8>)
 80011a4:	f002 ffda 	bl	800415c <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	b2d9      	uxtb	r1, r3
 80011b0:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <readall_inputs+0x3e4>)
 80011b2:	7853      	ldrb	r3, [r2, #1]
 80011b4:	f361 1386 	bfi	r3, r1, #6, #1
 80011b8:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 80011ba:	2120      	movs	r1, #32
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <readall_inputs+0x3ec>)
 80011be:	f002 ffcd 	bl	800415c <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	b2d9      	uxtb	r1, r3
 80011ca:	4a03      	ldr	r2, [pc, #12]	; (80011d8 <readall_inputs+0x3e4>)
 80011cc:	7853      	ldrb	r3, [r2, #1]
 80011ce:	f361 13c7 	bfi	r3, r1, #7, #1
 80011d2:	7053      	strb	r3, [r2, #1]
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000044 	.word	0x20000044
 80011dc:	40021800 	.word	0x40021800
 80011e0:	40021000 	.word	0x40021000

080011e4 <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80011e8:	f001 f968 	bl	80024bc <HAL_GetTick>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	481b      	ldr	r0, [pc, #108]	; (800126c <testPCB_Leds+0x78>)
 80011fe:	f002 ffc5 	bl	800418c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001202:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001206:	f001 f965 	bl	80024d4 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	4817      	ldr	r0, [pc, #92]	; (800126c <testPCB_Leds+0x78>)
 8001210:	f002 ffbc 	bl	800418c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001214:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001218:	f001 f95c 	bl	80024d4 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001222:	4812      	ldr	r0, [pc, #72]	; (800126c <testPCB_Leds+0x78>)
 8001224:	f002 ffb2 	bl	800418c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122c:	f001 f952 	bl	80024d4 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <testPCB_Leds+0x78>)
 8001238:	f002 ffa8 	bl	800418c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800123c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001240:	f001 f948 	bl	80024d4 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2104      	movs	r1, #4
 8001248:	4808      	ldr	r0, [pc, #32]	; (800126c <testPCB_Leds+0x78>)
 800124a:	f002 ff9f 	bl	800418c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800124e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001252:	f001 f93f 	bl	80024d4 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2104      	movs	r1, #4
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <testPCB_Leds+0x78>)
 800125c:	f002 ff96 	bl	800418c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001260:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001264:	f001 f936 	bl	80024d4 <HAL_Delay>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40020400 	.word	0x40020400

08001270 <readTrottle>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readTrottle(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	80fb      	strh	r3, [r7, #6]
//
//	}
//	else if ((system_in.Kickdown == 1))										// Gaspedal nicht oder teilweise getreten
//	{
//		// Gaspedal einlesen
		ADC_Gas = ADC_Gaspedal();
 800127a:	f7ff fd59 	bl	8000d30 <ADC_Gaspedal>
 800127e:	4603      	mov	r3, r0
 8001280:	80fb      	strh	r3, [r7, #6]
//	{
//		// Gaspedal invalide
//		software_error(ERROR_GASPEDAL);
//	}

	if (ADC_Gas < 300)
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001288:	d201      	bcs.n	800128e <readTrottle+0x1e>
	{
		ADC_Gas = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	80fb      	strh	r3, [r7, #6]
	}

	if (ADC_Gas >= 300)
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001294:	d303      	bcc.n	800129e <readTrottle+0x2e>
	{
		ADC_Gas -= 300;
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800129c:	80fb      	strh	r3, [r7, #6]
	}

	if (ADC_Gas >= 1000)
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012a4:	d302      	bcc.n	80012ac <readTrottle+0x3c>
	{
		ADC_Gas = 1000;
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	80fb      	strh	r3, [r7, #6]
	}

	return ADC_Gas;
 80012ac:	88fb      	ldrh	r3, [r7, #6]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012ca:	4b64      	ldr	r3, [pc, #400]	; (800145c <MX_ADC1_Init+0x1a4>)
 80012cc:	4a64      	ldr	r2, [pc, #400]	; (8001460 <MX_ADC1_Init+0x1a8>)
 80012ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012d0:	4b62      	ldr	r3, [pc, #392]	; (800145c <MX_ADC1_Init+0x1a4>)
 80012d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d8:	4b60      	ldr	r3, [pc, #384]	; (800145c <MX_ADC1_Init+0x1a4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012de:	4b5f      	ldr	r3, [pc, #380]	; (800145c <MX_ADC1_Init+0x1a4>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012e4:	4b5d      	ldr	r3, [pc, #372]	; (800145c <MX_ADC1_Init+0x1a4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ea:	4b5c      	ldr	r3, [pc, #368]	; (800145c <MX_ADC1_Init+0x1a4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012f2:	4b5a      	ldr	r3, [pc, #360]	; (800145c <MX_ADC1_Init+0x1a4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f8:	4b58      	ldr	r3, [pc, #352]	; (800145c <MX_ADC1_Init+0x1a4>)
 80012fa:	4a5a      	ldr	r2, [pc, #360]	; (8001464 <MX_ADC1_Init+0x1ac>)
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012fe:	4b57      	ldr	r3, [pc, #348]	; (800145c <MX_ADC1_Init+0x1a4>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8001304:	4b55      	ldr	r3, [pc, #340]	; (800145c <MX_ADC1_Init+0x1a4>)
 8001306:	220a      	movs	r2, #10
 8001308:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800130a:	4b54      	ldr	r3, [pc, #336]	; (800145c <MX_ADC1_Init+0x1a4>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001312:	4b52      	ldr	r3, [pc, #328]	; (800145c <MX_ADC1_Init+0x1a4>)
 8001314:	2201      	movs	r2, #1
 8001316:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001318:	4850      	ldr	r0, [pc, #320]	; (800145c <MX_ADC1_Init+0x1a4>)
 800131a:	f001 f947 	bl	80025ac <HAL_ADC_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001324:	f000 feae 	bl	8002084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001328:	230e      	movs	r3, #14
 800132a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800132c:	2301      	movs	r3, #1
 800132e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001330:	2301      	movs	r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4848      	ldr	r0, [pc, #288]	; (800145c <MX_ADC1_Init+0x1a4>)
 800133a:	f001 fb15 	bl	8002968 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001344:	f000 fe9e 	bl	8002084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001348:	2306      	movs	r3, #6
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800134c:	2302      	movs	r3, #2
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4841      	ldr	r0, [pc, #260]	; (800145c <MX_ADC1_Init+0x1a4>)
 8001356:	f001 fb07 	bl	8002968 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001360:	f000 fe90 	bl	8002084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001364:	2304      	movs	r3, #4
 8001366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001368:	2303      	movs	r3, #3
 800136a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800136c:	2302      	movs	r3, #2
 800136e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	4839      	ldr	r0, [pc, #228]	; (800145c <MX_ADC1_Init+0x1a4>)
 8001376:	f001 faf7 	bl	8002968 <HAL_ADC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001380:	f000 fe80 	bl	8002084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001384:	2305      	movs	r3, #5
 8001386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001388:	2304      	movs	r3, #4
 800138a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	4832      	ldr	r0, [pc, #200]	; (800145c <MX_ADC1_Init+0x1a4>)
 8001392:	f001 fae9 	bl	8002968 <HAL_ADC_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800139c:	f000 fe72 	bl	8002084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013a0:	230f      	movs	r3, #15
 80013a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013a4:	2305      	movs	r3, #5
 80013a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80013a8:	2301      	movs	r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	482a      	ldr	r0, [pc, #168]	; (800145c <MX_ADC1_Init+0x1a4>)
 80013b2:	f001 fad9 	bl	8002968 <HAL_ADC_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80013bc:	f000 fe62 	bl	8002084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013c0:	2303      	movs	r3, #3
 80013c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013c4:	2306      	movs	r3, #6
 80013c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80013c8:	2303      	movs	r3, #3
 80013ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	4619      	mov	r1, r3
 80013d0:	4822      	ldr	r0, [pc, #136]	; (800145c <MX_ADC1_Init+0x1a4>)
 80013d2:	f001 fac9 	bl	8002968 <HAL_ADC_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80013dc:	f000 fe52 	bl	8002084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013e0:	2307      	movs	r3, #7
 80013e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013e4:	2307      	movs	r3, #7
 80013e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	481b      	ldr	r0, [pc, #108]	; (800145c <MX_ADC1_Init+0x1a4>)
 80013ee:	f001 fabb 	bl	8002968 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80013f8:	f000 fe44 	bl	8002084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_ADC1_Init+0x1b0>)
 80013fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001400:	2308      	movs	r3, #8
 8001402:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4619      	mov	r1, r3
 8001408:	4814      	ldr	r0, [pc, #80]	; (800145c <MX_ADC1_Init+0x1a4>)
 800140a:	f001 faad 	bl	8002968 <HAL_ADC_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8001414:	f000 fe36 	bl	8002084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001418:	2308      	movs	r3, #8
 800141a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800141c:	2309      	movs	r3, #9
 800141e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001420:	2301      	movs	r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <MX_ADC1_Init+0x1a4>)
 800142a:	f001 fa9d 	bl	8002968 <HAL_ADC_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8001434:	f000 fe26 	bl	8002084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001438:	2309      	movs	r3, #9
 800143a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800143c:	230a      	movs	r3, #10
 800143e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_ADC1_Init+0x1a4>)
 8001446:	f001 fa8f 	bl	8002968 <HAL_ADC_ConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 8001450:	f000 fe18 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000058 	.word	0x20000058
 8001460:	40012000 	.word	0x40012000
 8001464:	0f000001 	.word	0x0f000001
 8001468:	10000012 	.word	0x10000012

0800146c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	; 0x30
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <HAL_ADC_MspInit+0xd4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d153      	bne.n	8001536 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_ADC_MspInit+0xd8>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a2c      	ldr	r2, [pc, #176]	; (8001544 <HAL_ADC_MspInit+0xd8>)
 8001494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_ADC_MspInit+0xd8>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_ADC_MspInit+0xd8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a26      	ldr	r2, [pc, #152]	; (8001544 <HAL_ADC_MspInit+0xd8>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b24      	ldr	r3, [pc, #144]	; (8001544 <HAL_ADC_MspInit+0xd8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_ADC_MspInit+0xd8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a20      	ldr	r2, [pc, #128]	; (8001544 <HAL_ADC_MspInit+0xd8>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_ADC_MspInit+0xd8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_ADC_MspInit+0xd8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <HAL_ADC_MspInit+0xd8>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_ADC_MspInit+0xd8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 80014ee:	23f8      	movs	r3, #248	; 0xf8
 80014f0:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f2:	2303      	movs	r3, #3
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	4811      	ldr	r0, [pc, #68]	; (8001548 <HAL_ADC_MspInit+0xdc>)
 8001502:	f002 fc7f 	bl	8003e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8001506:	2330      	movs	r3, #48	; 0x30
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150a:	2303      	movs	r3, #3
 800150c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <HAL_ADC_MspInit+0xe0>)
 800151a:	f002 fc73 	bl	8003e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 800151e:	2303      	movs	r3, #3
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001522:	2303      	movs	r3, #3
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4619      	mov	r1, r3
 8001530:	4807      	ldr	r0, [pc, #28]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 8001532:	f002 fc67 	bl	8003e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001536:	bf00      	nop
 8001538:	3730      	adds	r7, #48	; 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40012000 	.word	0x40012000
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	40020800 	.word	0x40020800
 8001550:	40020400 	.word	0x40020400

08001554 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001558:	4b33      	ldr	r3, [pc, #204]	; (8001628 <MX_CAN3_Init+0xd4>)
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <MX_CAN3_Init+0xd8>)
 800155c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800155e:	4b32      	ldr	r3, [pc, #200]	; (8001628 <MX_CAN3_Init+0xd4>)
 8001560:	2206      	movs	r2, #6
 8001562:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001564:	4b30      	ldr	r3, [pc, #192]	; (8001628 <MX_CAN3_Init+0xd4>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800156a:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <MX_CAN3_Init+0xd4>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <MX_CAN3_Init+0xd4>)
 8001572:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001576:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001578:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <MX_CAN3_Init+0xd4>)
 800157a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800157e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001580:	4b29      	ldr	r3, [pc, #164]	; (8001628 <MX_CAN3_Init+0xd4>)
 8001582:	2200      	movs	r2, #0
 8001584:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <MX_CAN3_Init+0xd4>)
 8001588:	2200      	movs	r2, #0
 800158a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 800158c:	4b26      	ldr	r3, [pc, #152]	; (8001628 <MX_CAN3_Init+0xd4>)
 800158e:	2200      	movs	r2, #0
 8001590:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <MX_CAN3_Init+0xd4>)
 8001594:	2200      	movs	r2, #0
 8001596:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <MX_CAN3_Init+0xd4>)
 800159a:	2200      	movs	r2, #0
 800159c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <MX_CAN3_Init+0xd4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80015a4:	4820      	ldr	r0, [pc, #128]	; (8001628 <MX_CAN3_Init+0xd4>)
 80015a6:	f001 fc2f 	bl	8002e08 <HAL_CAN_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80015b0:	f000 fd68 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan3)) != HAL_OK)
 80015b4:	481c      	ldr	r0, [pc, #112]	; (8001628 <MX_CAN3_Init+0xd4>)
 80015b6:	f001 fe0f 	bl	80031d8 <HAL_CAN_Start>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 80015c0:	f000 fd60 	bl	8002084 <Error_Handler>
	}

	// Aktiviere Interrupts fuer CAN Bus
	if((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_FULL)) != HAL_OK)
 80015c4:	2104      	movs	r1, #4
 80015c6:	4818      	ldr	r0, [pc, #96]	; (8001628 <MX_CAN3_Init+0xd4>)
 80015c8:	f002 f82c 	bl	8003624 <HAL_CAN_ActivateNotification>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN Interrupts
		Error_Handler();
 80015d2:	f000 fd57 	bl	8002084 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_CAN3_Init+0xdc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_CAN3_Init+0xdc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_CAN3_Init+0xdc>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0420 << 5;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_CAN3_Init+0xdc>)
 80015ea:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 80015ee:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_CAN3_Init+0xdc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0420 << 5;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_CAN3_Init+0xdc>)
 80015f8:	f44f 4204 	mov.w	r2, #33792	; 0x8400
 80015fc:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_CAN3_Init+0xdc>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <MX_CAN3_Init+0xdc>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_CAN3_Init+0xdc>)
 800160c:	2201      	movs	r2, #1
 800160e:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001610:	4907      	ldr	r1, [pc, #28]	; (8001630 <MX_CAN3_Init+0xdc>)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_CAN3_Init+0xd4>)
 8001614:	f001 fcf4 	bl	8003000 <HAL_CAN_ConfigFilter>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_CAN3_Init+0xce>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 800161e:	f000 fd31 	bl	8002084 <Error_Handler>
	}

  /* USER CODE END CAN3_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200000c8 	.word	0x200000c8
 800162c:	40003400 	.word	0x40003400
 8001630:	200000a0 	.word	0x200000a0

08001634 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <HAL_CAN_MspInit+0x8c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d130      	bne.n	80016b8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_CAN_MspInit+0x90>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a1a      	ldr	r2, [pc, #104]	; (80016c4 <HAL_CAN_MspInit+0x90>)
 800165c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_CAN_MspInit+0x90>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_CAN_MspInit+0x90>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <HAL_CAN_MspInit+0x90>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_CAN_MspInit+0x90>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8001686:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001698:	230b      	movs	r3, #11
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <HAL_CAN_MspInit+0x94>)
 80016a4:	f002 fbae 	bl	8003e04 <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	2069      	movs	r0, #105	; 0x69
 80016ae:	f002 fae0 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80016b2:	2069      	movs	r0, #105	; 0x69
 80016b4:	f002 faf9 	bl	8003caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	; 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40003400 	.word	0x40003400
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020000 	.word	0x40020000

080016cc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08e      	sub	sp, #56	; 0x38
 80016d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016e2:	4bb6      	ldr	r3, [pc, #728]	; (80019bc <MX_GPIO_Init+0x2f0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4ab5      	ldr	r2, [pc, #724]	; (80019bc <MX_GPIO_Init+0x2f0>)
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4bb3      	ldr	r3, [pc, #716]	; (80019bc <MX_GPIO_Init+0x2f0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fa:	4bb0      	ldr	r3, [pc, #704]	; (80019bc <MX_GPIO_Init+0x2f0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4aaf      	ldr	r2, [pc, #700]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4bad      	ldr	r3, [pc, #692]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001712:	4baa      	ldr	r3, [pc, #680]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4aa9      	ldr	r2, [pc, #676]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001718:	f043 0320 	orr.w	r3, r3, #32
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4ba7      	ldr	r3, [pc, #668]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800172a:	4ba4      	ldr	r3, [pc, #656]	; (80019bc <MX_GPIO_Init+0x2f0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4aa3      	ldr	r2, [pc, #652]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4ba1      	ldr	r3, [pc, #644]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b9e      	ldr	r3, [pc, #632]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a9d      	ldr	r2, [pc, #628]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b9b      	ldr	r3, [pc, #620]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	4b98      	ldr	r3, [pc, #608]	; (80019bc <MX_GPIO_Init+0x2f0>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a97      	ldr	r2, [pc, #604]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b95      	ldr	r3, [pc, #596]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001772:	4b92      	ldr	r3, [pc, #584]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a91      	ldr	r2, [pc, #580]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b8f      	ldr	r3, [pc, #572]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800178a:	4b8c      	ldr	r3, [pc, #560]	; (80019bc <MX_GPIO_Init+0x2f0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a8b      	ldr	r2, [pc, #556]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b89      	ldr	r3, [pc, #548]	; (80019bc <MX_GPIO_Init+0x2f0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80017a2:	2200      	movs	r2, #0
 80017a4:	f248 0187 	movw	r1, #32903	; 0x8087
 80017a8:	4885      	ldr	r0, [pc, #532]	; (80019c0 <MX_GPIO_Init+0x2f4>)
 80017aa:	f002 fcef 	bl	800418c <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f242 0108 	movw	r1, #8200	; 0x2008
 80017b4:	4883      	ldr	r0, [pc, #524]	; (80019c4 <MX_GPIO_Init+0x2f8>)
 80017b6:	f002 fce9 	bl	800418c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80017ba:	2200      	movs	r2, #0
 80017bc:	f24f 013c 	movw	r1, #61500	; 0xf03c
 80017c0:	4881      	ldr	r0, [pc, #516]	; (80019c8 <MX_GPIO_Init+0x2fc>)
 80017c2:	f002 fce3 	bl	800418c <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80017c6:	2200      	movs	r2, #0
 80017c8:	f647 0194 	movw	r1, #30868	; 0x7894
 80017cc:	487f      	ldr	r0, [pc, #508]	; (80019cc <MX_GPIO_Init+0x300>)
 80017ce:	f002 fcdd 	bl	800418c <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80017d2:	2200      	movs	r2, #0
 80017d4:	f64e 2188 	movw	r1, #60040	; 0xea88
 80017d8:	487d      	ldr	r0, [pc, #500]	; (80019d0 <MX_GPIO_Init+0x304>)
 80017da:	f002 fcd7 	bl	800418c <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80017de:	2200      	movs	r2, #0
 80017e0:	f64e 610c 	movw	r1, #60940	; 0xee0c
 80017e4:	487b      	ldr	r0, [pc, #492]	; (80019d4 <MX_GPIO_Init+0x308>)
 80017e6:	f002 fcd1 	bl	800418c <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f0:	4879      	ldr	r0, [pc, #484]	; (80019d8 <MX_GPIO_Init+0x30c>)
 80017f2:	f002 fccb 	bl	800418c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80017f6:	f248 0387 	movw	r3, #32903	; 0x8087
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180c:	4619      	mov	r1, r3
 800180e:	486c      	ldr	r0, [pc, #432]	; (80019c0 <MX_GPIO_Init+0x2f4>)
 8001810:	f002 faf8 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8001814:	f647 7378 	movw	r3, #32632	; 0x7f78
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181a:	2300      	movs	r3, #0
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	4619      	mov	r1, r3
 8001828:	4865      	ldr	r0, [pc, #404]	; (80019c0 <MX_GPIO_Init+0x2f4>)
 800182a:	f002 faeb 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800182e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	4619      	mov	r1, r3
 8001846:	485f      	ldr	r0, [pc, #380]	; (80019c4 <MX_GPIO_Init+0x2f8>)
 8001848:	f002 fadc 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800184c:	f64d 7347 	movw	r3, #57159	; 0xdf47
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001852:	2303      	movs	r3, #3
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	4619      	mov	r1, r3
 8001860:	4858      	ldr	r0, [pc, #352]	; (80019c4 <MX_GPIO_Init+0x2f8>)
 8001862:	f002 facf 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8001866:	f640 0303 	movw	r3, #2051	; 0x803
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186c:	2300      	movs	r3, #0
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	4853      	ldr	r0, [pc, #332]	; (80019c8 <MX_GPIO_Init+0x2fc>)
 800187c:	f002 fac2 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8001880:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	484b      	ldr	r0, [pc, #300]	; (80019c8 <MX_GPIO_Init+0x2fc>)
 800189a:	f002 fab3 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 800189e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a4:	2303      	movs	r3, #3
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	4845      	ldr	r0, [pc, #276]	; (80019c8 <MX_GPIO_Init+0x2fc>)
 80018b4:	f002 faa6 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 80018b8:	2308      	movs	r3, #8
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c4:	2302      	movs	r3, #2
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	483d      	ldr	r0, [pc, #244]	; (80019c4 <MX_GPIO_Init+0x2f8>)
 80018d0:	f002 fa98 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 80018d4:	f640 6307 	movw	r3, #3591	; 0xe07
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	4619      	mov	r1, r3
 80018e8:	483b      	ldr	r0, [pc, #236]	; (80019d8 <MX_GPIO_Init+0x30c>)
 80018ea:	f002 fa8b 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80018ee:	f647 0394 	movw	r3, #30868	; 0x7894
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001904:	4619      	mov	r1, r3
 8001906:	4831      	ldr	r0, [pc, #196]	; (80019cc <MX_GPIO_Init+0x300>)
 8001908:	f002 fa7c 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 800190c:	f241 13f3 	movw	r3, #4595	; 0x11f3
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191e:	4619      	mov	r1, r3
 8001920:	482c      	ldr	r0, [pc, #176]	; (80019d4 <MX_GPIO_Init+0x308>)
 8001922:	f002 fa6f 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 8001926:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001938:	4619      	mov	r1, r3
 800193a:	4824      	ldr	r0, [pc, #144]	; (80019cc <MX_GPIO_Init+0x300>)
 800193c:	f002 fa62 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 8001940:	f241 5310 	movw	r3, #5392	; 0x1510
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001946:	2300      	movs	r3, #0
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800194e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001952:	4619      	mov	r1, r3
 8001954:	481e      	ldr	r0, [pc, #120]	; (80019d0 <MX_GPIO_Init+0x304>)
 8001956:	f002 fa55 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 800195a:	f64e 2388 	movw	r3, #60040	; 0xea88
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001970:	4619      	mov	r1, r3
 8001972:	4817      	ldr	r0, [pc, #92]	; (80019d0 <MX_GPIO_Init+0x304>)
 8001974:	f002 fa46 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001978:	f64e 630c 	movw	r3, #60940	; 0xee0c
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800198a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198e:	4619      	mov	r1, r3
 8001990:	4810      	ldr	r0, [pc, #64]	; (80019d4 <MX_GPIO_Init+0x308>)
 8001992:	f002 fa37 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a6:	4619      	mov	r1, r3
 80019a8:	4806      	ldr	r0, [pc, #24]	; (80019c4 <MX_GPIO_Init+0x2f8>)
 80019aa:	f002 fa2b 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 80019ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e00f      	b.n	80019dc <MX_GPIO_Init+0x310>
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40021400 	.word	0x40021400
 80019cc:	40020400 	.word	0x40020400
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	40021800 	.word	0x40021800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	480f      	ldr	r0, [pc, #60]	; (8001a28 <MX_GPIO_Init+0x35c>)
 80019ea:	f002 fa0b 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 80019ee:	2307      	movs	r3, #7
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f2:	2303      	movs	r3, #3
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	480a      	ldr	r0, [pc, #40]	; (8001a2c <MX_GPIO_Init+0x360>)
 8001a02:	f002 f9ff 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001a06:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_GPIO_Init+0x364>)
 8001a1c:	f002 f9f2 	bl	8003e04 <HAL_GPIO_Init>

}
 8001a20:	bf00      	nop
 8001a22:	3738      	adds	r7, #56	; 0x38
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020c00 	.word	0x40020c00
 8001a30:	40020400 	.word	0x40020400

08001a34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00b      	beq.n	8001a74 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a5c:	e000      	b.n	8001a60 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a5e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f9      	beq.n	8001a5e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a6a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b0ac      	sub	sp, #176	; 0xb0
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a8a:	f000 fcc6 	bl	800241a <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[5] = {0}, InData[5] = {0}, status, tmp[4], task = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	uint16_t count = 0, gas_adc = 0, gas_mean = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  	uint32_t lastcan = 0, lastsendcan = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8001aca:	4bc9      	ldr	r3, [pc, #804]	; (8001df0 <main+0x36c>)
 8001acc:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001ad0:	461d      	mov	r5, r3
 8001ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ada:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8001ade:	4bc5      	ldr	r3, [pc, #788]	; (8001df4 <main+0x370>)
 8001ae0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001ae4:	461d      	mov	r5, r3
 8001ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aee:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8001af2:	4bc1      	ldr	r3, [pc, #772]	; (8001df8 <main+0x374>)
 8001af4:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001af8:	461d      	mov	r5, r3
 8001afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001afe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b02:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8001b06:	4bbd      	ldr	r3, [pc, #756]	; (8001dfc <main+0x378>)
 8001b08:	f107 041c 	add.w	r4, r7, #28
 8001b0c:	461d      	mov	r5, r3
 8001b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b16:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxBamocar = {BAMOCAR_TX_ID, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 8001b1a:	4bb9      	ldr	r3, [pc, #740]	; (8001e00 <main+0x37c>)
 8001b1c:	1d3c      	adds	r4, r7, #4
 8001b1e:	461d      	mov	r5, r3
 8001b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b28:	e884 0003 	stmia.w	r4, {r0, r1}


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2c:	f000 f9fc 	bl	8001f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b30:	f7ff fdcc 	bl	80016cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b34:	f000 fbb2 	bl	800229c <MX_USART2_UART_Init>
  MX_CAN3_Init();
 8001b38:	f7ff fd0c 	bl	8001554 <MX_CAN3_Init>
  MX_ADC1_Init();
 8001b3c:	f7ff fbbc 	bl	80012b8 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001b40:	f000 fb50 	bl	80021e4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // ITM HCLK
  ITM_SendChar('H');
 8001b44:	2048      	movs	r0, #72	; 0x48
 8001b46:	f7ff ff75 	bl	8001a34 <ITM_SendChar>
  ITM_SendChar('a');
 8001b4a:	2061      	movs	r0, #97	; 0x61
 8001b4c:	f7ff ff72 	bl	8001a34 <ITM_SendChar>
  ITM_SendChar('l');
 8001b50:	206c      	movs	r0, #108	; 0x6c
 8001b52:	f7ff ff6f 	bl	8001a34 <ITM_SendChar>
  ITM_SendChar('l');
 8001b56:	206c      	movs	r0, #108	; 0x6c
 8001b58:	f7ff ff6c 	bl	8001a34 <ITM_SendChar>
  ITM_SendChar('o');
 8001b5c:	206f      	movs	r0, #111	; 0x6f
 8001b5e:	f7ff ff69 	bl	8001a34 <ITM_SendChar>
  ITM_SendChar(' ');
 8001b62:	2020      	movs	r0, #32
 8001b64:	f7ff ff66 	bl	8001a34 <ITM_SendChar>
  	// Start Timer 6 Interrupt
  	HAL_TIM_Base_Start_IT(&htim6);
 8001b68:	48a6      	ldr	r0, [pc, #664]	; (8001e04 <main+0x380>)
 8001b6a:	f003 fc8d 	bl	8005488 <HAL_TIM_Base_Start_IT>

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 8001b6e:	f7ff f81d 	bl	8000bac <readResetSource>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff f86b 	bl	8000c50 <printResetSource>

  	/* Teste serielle Schnittstelle*/
  	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8001b7a:	213a      	movs	r1, #58	; 0x3a
 8001b7c:	48a2      	ldr	r0, [pc, #648]	; (8001e08 <main+0x384>)
 8001b7e:	f7fe fe1f 	bl	80007c0 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8001b82:	f7fe ffe9 	bl	8000b58 <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 8001b86:	f7ff fb35 	bl	80011f4 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8001b8a:	f7ff f933 	bl	8000df4 <readall_inputs>

  	// Daten fuer TxMassage erstellen
  	for (uint8_t j = 0; j < 8; j++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001b94:	e00e      	b.n	8001bb4 <main+0x130>
  		TxData[j] = (j + 1);
 8001b96:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001b9a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8001b9e:	3201      	adds	r2, #1
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	33b0      	adds	r3, #176	; 0xb0
 8001ba4:	443b      	add	r3, r7
 8001ba6:	f803 2c20 	strb.w	r2, [r3, #-32]
  	for (uint8_t j = 0; j < 8; j++)
 8001baa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001bb4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001bb8:	2b07      	cmp	r3, #7
 8001bba:	d9ec      	bls.n	8001b96 <main+0x112>

  	// Starte While-Schleife
#define MAINWHILE				"\nStarte While Schleife\n"
  	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 8001bbc:	2118      	movs	r1, #24
 8001bbe:	4893      	ldr	r0, [pc, #588]	; (8001e0c <main+0x388>)
 8001bc0:	f7fe fdfe 	bl	80007c0 <uartTransmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8001bc4:	4b92      	ldr	r3, [pc, #584]	; (8001e10 <main+0x38c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d10a      	bne.n	8001be4 <main+0x160>
		{
			count++;													// Zaehler count hochzaehlen
 8001bce:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 8001bd8:	4b8d      	ldr	r3, [pc, #564]	; (8001e10 <main+0x38c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]

			task = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		}

		// Task wird alle 50 Millisekunden ausgefuehrt
		if (((count % 20) == 0) && (task == 1))
 8001be4:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8001be8:	4b8a      	ldr	r3, [pc, #552]	; (8001e14 <main+0x390>)
 8001bea:	fba3 1302 	umull	r1, r3, r3, r2
 8001bee:	0919      	lsrs	r1, r3, #4
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d112      	bne.n	8001c26 <main+0x1a2>
 8001c00:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d10e      	bne.n	8001c26 <main+0x1a2>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 8001c08:	f107 011c 	add.w	r1, r7, #28
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	4a82      	ldr	r2, [pc, #520]	; (8001e18 <main+0x394>)
 8001c10:	4882      	ldr	r0, [pc, #520]	; (8001e1c <main+0x398>)
 8001c12:	f001 fb25 	bl	8003260 <HAL_CAN_AddTxMessage>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			hal_error(status);
 8001c1c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f8b7 	bl	8000d94 <hal_error>
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if (((count % 100) == 0) && (task == 1))
 8001c26:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001c2a:	4a7d      	ldr	r2, [pc, #500]	; (8001e20 <main+0x39c>)
 8001c2c:	fba2 1203 	umull	r1, r2, r2, r3
 8001c30:	0952      	lsrs	r2, r2, #5
 8001c32:	2164      	movs	r1, #100	; 0x64
 8001c34:	fb01 f202 	mul.w	r2, r1, r2
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d134      	bne.n	8001caa <main+0x226>
 8001c40:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d130      	bne.n	8001caa <main+0x226>
		{
			// alle Inputs einlesen
			readall_inputs();
 8001c48:	f7ff f8d4 	bl	8000df4 <readall_inputs>

			// Bremse pruefen
//			readBrake();

			// Gaspedal pruefen
			gas_adc = readTrottle();
 8001c4c:	f7ff fb10 	bl	8001270 <readTrottle>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

			// Mittelwert bilden (https://nestedsoftware.com/2018/03/20/calculating-a-moving-average-on-streaming-data-5a7k.22879.html)
			// Mittelwertbildung aus 10 Werten (Weniger die 10 verkleineren, Mehr die 10 vergrößern)
			gas_mean = (gas_mean + ((gas_adc - gas_mean)/10));
 8001c56:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8001c5a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	4a70      	ldr	r2, [pc, #448]	; (8001e24 <main+0x3a0>)
 8001c62:	fb82 1203 	smull	r1, r2, r2, r3
 8001c66:	1092      	asrs	r2, r2, #2
 8001c68:	17db      	asrs	r3, r3, #31
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001c72:	4413      	add	r3, r2
 8001c74:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa

			// Daten in Bamocarformat umwandeln
			tmp[0] = 0x90;
 8001c78:	2390      	movs	r3, #144	; 0x90
 8001c7a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			tmp[1] = (gas_mean);
 8001c7e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			tmp[2] = ((gas_mean) >> 8);
 8001c88:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

			// Drehmoment an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8001c96:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001c9a:	1d39      	adds	r1, r7, #4
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	485f      	ldr	r0, [pc, #380]	; (8001e1c <main+0x398>)
 8001ca0:	f001 fade 	bl	8003260 <HAL_CAN_AddTxMessage>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (task == 1))
 8001caa:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8001cae:	4a5c      	ldr	r2, [pc, #368]	; (8001e20 <main+0x39c>)
 8001cb0:	fba2 1203 	umull	r1, r2, r2, r3
 8001cb4:	0992      	lsrs	r2, r2, #6
 8001cb6:	21c8      	movs	r1, #200	; 0xc8
 8001cb8:	fb01 f202 	mul.w	r2, r1, r2
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d16f      	bne.n	8001da4 <main+0x320>
 8001cc4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d16b      	bne.n	8001da4 <main+0x320>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8001ccc:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <main+0x3a4>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
			OutData[1] = highcurrent_out.high_out;
 8001cd4:	4b55      	ldr	r3, [pc, #340]	; (8001e2c <main+0x3a8>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
			OutData[2] = (leuchten_out.ledoutput >> 8);
 8001cdc:	4b54      	ldr	r3, [pc, #336]	; (8001e30 <main+0x3ac>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			OutData[3] = leuchten_out.ledoutput;
 8001cea:	4b51      	ldr	r3, [pc, #324]	; (8001e30 <main+0x3ac>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			OutData[4] = komfort_out.komfortoutput;
 8001cf4:	4b4f      	ldr	r3, [pc, #316]	; (8001e34 <main+0x3b0>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			OutData[5] ++;
 8001cfc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001d00:	3301      	adds	r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX2);
 8001d08:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d0c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001d10:	2304      	movs	r3, #4
 8001d12:	4842      	ldr	r0, [pc, #264]	; (8001e1c <main+0x398>)
 8001d14:	f001 faa4 	bl	8003260 <HAL_CAN_AddTxMessage>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] ++;
 8001d1e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8001d22:	3301      	adds	r3, #1
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			InData[1] = (system_in.systeminput >> 8);
 8001d2a:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <main+0x3b4>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
			InData[2] = system_in.systeminput;
 8001d38:	4b3f      	ldr	r3, [pc, #252]	; (8001e38 <main+0x3b4>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			InData[3] = sdc_in.sdcinput;
 8001d42:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <main+0x3b8>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			InData[4] = (komfort_in.komfortinput >> 8);
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <main+0x3bc>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			InData[5] = komfort_in.komfortinput;
 8001d58:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <main+0x3bc>)
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX1);
 8001d62:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001d66:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	482b      	ldr	r0, [pc, #172]	; (8001e1c <main+0x398>)
 8001d6e:	f001 fa77 	bl	8003260 <HAL_CAN_AddTxMessage>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);

			// Bamocar Fehler auslesen
			tmp[0] = 0x3D;
 8001d78:	233d      	movs	r3, #61	; 0x3d
 8001d7a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			tmp[1] = 0x8F;
 8001d7e:	238f      	movs	r3, #143	; 0x8f
 8001d80:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			tmp[2] = 0x00;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

			// Befehl Fehler auslesen an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8001d8a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001d8e:	1d39      	adds	r1, r7, #4
 8001d90:	2301      	movs	r3, #1
 8001d92:	4822      	ldr	r0, [pc, #136]	; (8001e1c <main+0x398>)
 8001d94:	f001 fa64 	bl	8003260 <HAL_CAN_AddTxMessage>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);

			// Variable count auf 0 zuruecksetzen
			count = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		}

		task = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf


	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 8001daa:	f7ff fa1b 	bl	80011e4 <millis>
 8001dae:	4602      	mov	r2, r0
 8001db0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	f240 808c 	bls.w	8001ed4 <main+0x450>
		{
	  		HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &RxMessage, TxData);
 8001dbc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001dc0:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <main+0x3c0>)
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4815      	ldr	r0, [pc, #84]	; (8001e1c <main+0x398>)
 8001dc6:	f001 fb1b 	bl	8003400 <HAL_CAN_GetRxMessage>

			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 8001dca:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <main+0x3c4>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d17f      	bne.n	8001ed4 <main+0x450>
			{
				// Nachricht ID ueber UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <main+0x3c0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2110      	movs	r1, #16
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fd04 	bl	80007e8 <uartTransmitNumber>
				uartTransmit("\t", 1);
 8001de0:	2101      	movs	r1, #1
 8001de2:	481a      	ldr	r0, [pc, #104]	; (8001e4c <main+0x3c8>)
 8001de4:	f7fe fcec 	bl	80007c0 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8001dee:	e03c      	b.n	8001e6a <main+0x3e6>
 8001df0:	080071a0 	.word	0x080071a0
 8001df4:	080071b8 	.word	0x080071b8
 8001df8:	080071d0 	.word	0x080071d0
 8001dfc:	080071e8 	.word	0x080071e8
 8001e00:	08007200 	.word	0x08007200
 8001e04:	20000120 	.word	0x20000120
 8001e08:	08007110 	.word	0x08007110
 8001e0c:	0800714c 	.word	0x0800714c
 8001e10:	20000114 	.word	0x20000114
 8001e14:	cccccccd 	.word	0xcccccccd
 8001e18:	20000118 	.word	0x20000118
 8001e1c:	200000c8 	.word	0x200000c8
 8001e20:	51eb851f 	.word	0x51eb851f
 8001e24:	66666667 	.word	0x66666667
 8001e28:	20000048 	.word	0x20000048
 8001e2c:	2000004c 	.word	0x2000004c
 8001e30:	20000050 	.word	0x20000050
 8001e34:	20000054 	.word	0x20000054
 8001e38:	2000003c 	.word	0x2000003c
 8001e3c:	20000040 	.word	0x20000040
 8001e40:	20000044 	.word	0x20000044
 8001e44:	200000f0 	.word	0x200000f0
 8001e48:	20000115 	.word	0x20000115
 8001e4c:	08007164 	.word	0x08007164
				{
					uartTransmitNumber(RxData[i], 16);
 8001e50:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001e54:	4a2c      	ldr	r2, [pc, #176]	; (8001f08 <main+0x484>)
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	2110      	movs	r1, #16
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fcc4 	bl	80007e8 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001e60:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001e64:	3301      	adds	r3, #1
 8001e66:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8001e6a:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 8001e6e:	4b27      	ldr	r3, [pc, #156]	; (8001f0c <main+0x488>)
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d3ec      	bcc.n	8001e50 <main+0x3cc>
				}
				uartTransmit("\n", 1);
 8001e76:	2101      	movs	r1, #1
 8001e78:	4825      	ldr	r0, [pc, #148]	; (8001f10 <main+0x48c>)
 8001e7a:	f7fe fca1 	bl	80007c0 <uartTransmit>

				// Sortieren der IDs nach Geraeten
				switch (RxMessage.StdId)
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <main+0x488>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f240 1211 	movw	r2, #273	; 0x111
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00b      	beq.n	8001ea2 <main+0x41e>
 8001e8a:	f240 1281 	movw	r2, #385	; 0x181
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10c      	bne.n	8001eac <main+0x428>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0], RxMessage.DLC);
 8001e92:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <main+0x488>)
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	4619      	mov	r1, r3
 8001e9a:	481b      	ldr	r0, [pc, #108]	; (8001f08 <main+0x484>)
 8001e9c:	f7fe fb56 	bl	800054c <BAMOCAN_ID>
						break;
 8001ea0:	e009      	b.n	8001eb6 <main+0x432>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 8001ea2:	2117      	movs	r1, #23
 8001ea4:	481b      	ldr	r0, [pc, #108]	; (8001f14 <main+0x490>)
 8001ea6:	f7fe fc8b 	bl	80007c0 <uartTransmit>
						break;
 8001eaa:	e004      	b.n	8001eb6 <main+0x432>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 8001eac:	2118      	movs	r1, #24
 8001eae:	481a      	ldr	r0, [pc, #104]	; (8001f18 <main+0x494>)
 8001eb0:	f7fe fc86 	bl	80007c0 <uartTransmit>
						break;
 8001eb4:	bf00      	nop
				}

				TxData[2] = motor1.output[2];
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <main+0x498>)
 8001eb8:	789b      	ldrb	r3, [r3, #2]
 8001eba:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
				TxData[3] = motor1.output[3];
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <main+0x498>)
 8001ec0:	78db      	ldrb	r3, [r3, #3]
 8001ec2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				lastcan = millis();
 8001ec6:	f7ff f98d 	bl	80011e4 <millis>
 8001eca:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

				can_change = 0;
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <main+0x49c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
			}
		}

#ifdef DEBUG
		// Sende CAN Nachricht auf CAN-Bus / Teste CAN-BUS
		if (millis() - lastsendcan >= 1000)
 8001ed4:	f7ff f986 	bl	80011e4 <millis>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ee4:	f4ff ae6e 	bcc.w	8001bc4 <main+0x140>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8001ee8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001eec:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	480c      	ldr	r0, [pc, #48]	; (8001f24 <main+0x4a0>)
 8001ef4:	f001 f9b4 	bl	8003260 <HAL_CAN_AddTxMessage>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			//hal_error(status);
			lastsendcan = millis();
 8001efe:	f7ff f971 	bl	80011e4 <millis>
 8001f02:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		if (millisekunden_flag_1 == 1)
 8001f06:	e65d      	b.n	8001bc4 <main+0x140>
 8001f08:	2000010c 	.word	0x2000010c
 8001f0c:	200000f0 	.word	0x200000f0
 8001f10:	08007168 	.word	0x08007168
 8001f14:	0800716c 	.word	0x0800716c
 8001f18:	08007184 	.word	0x08007184
 8001f1c:	20000118 	.word	0x20000118
 8001f20:	20000115 	.word	0x20000115
 8001f24:	200000c8 	.word	0x200000c8

08001f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b094      	sub	sp, #80	; 0x50
 8001f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f2e:	f107 031c 	add.w	r3, r7, #28
 8001f32:	2234      	movs	r2, #52	; 0x34
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fe78 	bl	8006c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f3c:	f107 0308 	add.w	r3, r7, #8
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4c:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <SystemClock_Config+0xd8>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	4a2b      	ldr	r2, [pc, #172]	; (8002000 <SystemClock_Config+0xd8>)
 8001f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f56:	6413      	str	r3, [r2, #64]	; 0x40
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <SystemClock_Config+0xd8>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <SystemClock_Config+0xdc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f6c:	4a25      	ldr	r2, [pc, #148]	; (8002004 <SystemClock_Config+0xdc>)
 8001f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b23      	ldr	r3, [pc, #140]	; (8002004 <SystemClock_Config+0xdc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001f94:	2319      	movs	r3, #25
 8001f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001f98:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001f9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 f956 	bl	8004260 <HAL_RCC_OscConfig>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001fba:	f000 f863 	bl	8002084 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001fbe:	f002 f8ff 	bl	80041c0 <HAL_PWREx_EnableOverDrive>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001fc8:	f000 f85c 	bl	8002084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fcc:	230f      	movs	r3, #15
 8001fce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	2103      	movs	r1, #3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f002 fbe7 	bl	80047bc <HAL_RCC_ClockConfig>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001ff4:	f000 f846 	bl	8002084 <Error_Handler>
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3750      	adds	r7, #80	; 0x50
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000

08002008 <HAL_CAN_RxFifo0MsgPendingCallback>:
    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
}

// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	// Nachricht aus Speicher auslesen
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002012:	4a07      	ldr	r2, [pc, #28]	; (8002030 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002014:	2100      	movs	r1, #0
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f001 f9f2 	bl	8003400 <HAL_CAN_GetRxMessage>
	can_change = 1;
 800201c:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000010c 	.word	0x2000010c
 8002030:	200000f0 	.word	0x200000f0
 8002034:	20000115 	.word	0x20000115

08002038 <HAL_CAN_RxFifo0FullCallback>:

// Can-Interrupt: Fifo0 ist voll
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	// Fifo0 voll
	uartTransmit("Fifo0 von CAN3 ist voll\n", 24);
 8002040:	2118      	movs	r1, #24
 8002042:	4804      	ldr	r0, [pc, #16]	; (8002054 <HAL_CAN_RxFifo0FullCallback+0x1c>)
 8002044:	f7fe fbbc 	bl	80007c0 <uartTransmit>

	Error_Handler();
 8002048:	f000 f81c 	bl	8002084 <Error_Handler>
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	08007250 	.word	0x08007250

08002058 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a06      	ldr	r2, [pc, #24]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d102      	bne.n	800206e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
	}
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000120 	.word	0x20000120
 8002080:	20000114 	.word	0x20000114

08002084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002088:	b672      	cpsid	i
}
 800208a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <Error_Handler+0x50>)
 800208e:	7853      	ldrb	r3, [r2, #1]
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <Error_Handler+0x50>)
 8002098:	785b      	ldrb	r3, [r3, #1]
 800209a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	2104      	movs	r1, #4
 80020a4:	480c      	ldr	r0, [pc, #48]	; (80020d8 <Error_Handler+0x54>)
 80020a6:	f002 f871 	bl	800418c <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <Error_Handler+0x50>)
 80020ac:	7853      	ldrb	r3, [r2, #1]
 80020ae:	f36f 1304 	bfc	r3, #4, #1
 80020b2:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <Error_Handler+0x50>)
 80020b6:	785b      	ldrb	r3, [r3, #1]
 80020b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c4:	4804      	ldr	r0, [pc, #16]	; (80020d8 <Error_Handler+0x54>)
 80020c6:	f002 f861 	bl	800418c <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 80020ca:	2122      	movs	r1, #34	; 0x22
 80020cc:	4803      	ldr	r0, [pc, #12]	; (80020dc <Error_Handler+0x58>)
 80020ce:	f7fe fb77 	bl	80007c0 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 80020d2:	e7fe      	b.n	80020d2 <Error_Handler+0x4e>
 80020d4:	20000050 	.word	0x20000050
 80020d8:	40020400 	.word	0x40020400
 80020dc:	0800726c 	.word	0x0800726c

080020e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_MspInit+0x44>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <HAL_MspInit+0x44>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_MspInit+0x44>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_MspInit+0x44>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <HAL_MspInit+0x44>)
 8002104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_MspInit+0x44>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800

08002128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800212c:	e7fe      	b.n	800212c <NMI_Handler+0x4>

0800212e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <MemManage_Handler+0x4>

0800213a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <BusFault_Handler+0x4>

08002140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <UsageFault_Handler+0x4>

08002146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002174:	f000 f98e 	bl	8002494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <USART2_IRQHandler+0x10>)
 8002182:	f003 fd5f 	bl	8005c44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2000016c 	.word	0x2000016c

08002190 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <TIM6_DAC_IRQHandler+0x10>)
 8002196:	f003 f9ef 	bl	8005578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000120 	.word	0x20000120

080021a4 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <CAN3_RX0_IRQHandler+0x10>)
 80021aa:	f001 fa61 	bl	8003670 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200000c8 	.word	0x200000c8

080021b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <SystemInit+0x28>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <SystemInit+0x28>)
 80021c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <SystemInit+0x28>)
 80021ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021d2:	609a      	str	r2, [r3, #8]
#endif
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80021f4:	4b14      	ldr	r3, [pc, #80]	; (8002248 <MX_TIM6_Init+0x64>)
 80021f6:	4a15      	ldr	r2, [pc, #84]	; (800224c <MX_TIM6_Init+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27 - 1;
 80021fa:	4b13      	ldr	r3, [pc, #76]	; (8002248 <MX_TIM6_Init+0x64>)
 80021fc:	221a      	movs	r2, #26
 80021fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <MX_TIM6_Init+0x64>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000 - 1;
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <MX_TIM6_Init+0x64>)
 8002208:	f640 729f 	movw	r2, #3999	; 0xf9f
 800220c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <MX_TIM6_Init+0x64>)
 8002210:	2280      	movs	r2, #128	; 0x80
 8002212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <MX_TIM6_Init+0x64>)
 8002216:	f003 f8df 	bl	80053d8 <HAL_TIM_Base_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002220:	f7ff ff30 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002224:	2300      	movs	r3, #0
 8002226:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	4619      	mov	r1, r3
 8002230:	4805      	ldr	r0, [pc, #20]	; (8002248 <MX_TIM6_Init+0x64>)
 8002232:	f003 fb89 	bl	8005948 <HAL_TIMEx_MasterConfigSynchronization>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800223c:	f7ff ff22 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000120 	.word	0x20000120
 800224c:	40001000 	.word	0x40001000

08002250 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <HAL_TIM_Base_MspInit+0x44>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d113      	bne.n	800228a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_TIM_Base_MspInit+0x48>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <HAL_TIM_Base_MspInit+0x48>)
 8002268:	f043 0310 	orr.w	r3, r3, #16
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_TIM_Base_MspInit+0x48>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	2036      	movs	r0, #54	; 0x36
 8002280:	f001 fcf7 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002284:	2036      	movs	r0, #54	; 0x36
 8002286:	f001 fd10 	bl	8003caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40001000 	.word	0x40001000
 8002298:	40023800 	.word	0x40023800

0800229c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <MX_USART2_UART_Init+0x58>)
 80022a2:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <MX_USART2_UART_Init+0x5c>)
 80022a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <MX_USART2_UART_Init+0x58>)
 80022a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <MX_USART2_UART_Init+0x58>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <MX_USART2_UART_Init+0x58>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <MX_USART2_UART_Init+0x58>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <MX_USART2_UART_Init+0x58>)
 80022c2:	220c      	movs	r2, #12
 80022c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <MX_USART2_UART_Init+0x58>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <MX_USART2_UART_Init+0x58>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <MX_USART2_UART_Init+0x58>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MX_USART2_UART_Init+0x58>)
 80022da:	2200      	movs	r2, #0
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <MX_USART2_UART_Init+0x58>)
 80022e0:	f003 fbde 	bl	8005aa0 <HAL_UART_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022ea:	f7ff fecb 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000016c 	.word	0x2000016c
 80022f8:	40004400 	.word	0x40004400

080022fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b0ae      	sub	sp, #184	; 0xb8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2290      	movs	r2, #144	; 0x90
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f004 fc85 	bl	8006c2c <memset>
  if(uartHandle->Instance==USART2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a25      	ldr	r2, [pc, #148]	; (80023bc <HAL_UART_MspInit+0xc0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d142      	bne.n	80023b2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002330:	2300      	movs	r3, #0
 8002332:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	4618      	mov	r0, r3
 800233a:	f002 fc25 	bl	8004b88 <HAL_RCCEx_PeriphCLKConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002344:	f7ff fe9e 	bl	8002084 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 800234e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002352:	6413      	str	r3, [r2, #64]	; 0x40
 8002354:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	4a16      	ldr	r2, [pc, #88]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	6313      	str	r3, [r2, #48]	; 0x30
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_UART_MspInit+0xc4>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8002378:	2360      	movs	r3, #96	; 0x60
 800237a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002390:	2307      	movs	r3, #7
 8002392:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002396:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800239a:	4619      	mov	r1, r3
 800239c:	4809      	ldr	r0, [pc, #36]	; (80023c4 <HAL_UART_MspInit+0xc8>)
 800239e:	f001 fd31 	bl	8003e04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2100      	movs	r1, #0
 80023a6:	2026      	movs	r0, #38	; 0x26
 80023a8:	f001 fc63 	bl	8003c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023ac:	2026      	movs	r0, #38	; 0x26
 80023ae:	f001 fc7c 	bl	8003caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023b2:	bf00      	nop
 80023b4:	37b8      	adds	r7, #184	; 0xb8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40004400 	.word	0x40004400
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020c00 	.word	0x40020c00

080023c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002400 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023ce:	e003      	b.n	80023d8 <LoopCopyDataInit>

080023d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023d6:	3104      	adds	r1, #4

080023d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023d8:	480b      	ldr	r0, [pc, #44]	; (8002408 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023e0:	d3f6      	bcc.n	80023d0 <CopyDataInit>
  ldr  r2, =_sbss
 80023e2:	4a0b      	ldr	r2, [pc, #44]	; (8002410 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023e4:	e002      	b.n	80023ec <LoopFillZerobss>

080023e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023e8:	f842 3b04 	str.w	r3, [r2], #4

080023ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023f0:	d3f9      	bcc.n	80023e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023f2:	f7ff fee1 	bl	80021b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023f6:	f004 fbf5 	bl	8006be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fa:	f7ff fb43 	bl	8001a84 <main>
  bx  lr    
 80023fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002400:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002404:	080072e0 	.word	0x080072e0
  ldr  r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800240c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002410:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002414:	200001f8 	.word	0x200001f8

08002418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC_IRQHandler>

0800241a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241e:	2003      	movs	r0, #3
 8002420:	f001 fc1c 	bl	8003c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002424:	2000      	movs	r0, #0
 8002426:	f000 f805 	bl	8002434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800242a:	f7ff fe59 	bl	80020e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_InitTick+0x54>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_InitTick+0x58>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	fbb3 f3f1 	udiv	r3, r3, r1
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	4618      	mov	r0, r3
 8002454:	f001 fc37 	bl	8003cc6 <HAL_SYSTICK_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e00e      	b.n	8002480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b0f      	cmp	r3, #15
 8002466:	d80a      	bhi.n	800247e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002468:	2200      	movs	r2, #0
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f001 fbff 	bl	8003c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002474:	4a06      	ldr	r2, [pc, #24]	; (8002490 <HAL_InitTick+0x5c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000000 	.word	0x20000000
 800248c:	20000008 	.word	0x20000008
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_IncTick+0x20>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_IncTick+0x24>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <HAL_IncTick+0x24>)
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000008 	.word	0x20000008
 80024b8:	200001f4 	.word	0x200001f4

080024bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return uwTick;
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <HAL_GetTick+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	200001f4 	.word	0x200001f4

080024d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff ffee 	bl	80024bc <HAL_GetTick>
 80024e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d005      	beq.n	80024fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <HAL_Delay+0x44>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4413      	add	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024fa:	bf00      	nop
 80024fc:	f7ff ffde 	bl	80024bc <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	429a      	cmp	r2, r3
 800250a:	d8f7      	bhi.n	80024fc <HAL_Delay+0x28>
  {
  }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000008 	.word	0x20000008

0800251c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8002520:	4b02      	ldr	r3, [pc, #8]	; (800252c <HAL_GetHalVersion+0x10>)
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	01030000 	.word	0x01030000

08002530 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_GetREVID+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0c1b      	lsrs	r3, r3, #16
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e0042000 	.word	0xe0042000

08002548 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_GetDEVID+0x18>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e0042000 	.word	0xe0042000

08002564 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <HAL_GetUIDw0+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	1ff0f420 	.word	0x1ff0f420

0800257c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <HAL_GetUIDw1+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	1ff0f424 	.word	0x1ff0f424

08002594 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_GetUIDw2+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	1ff0f428 	.word	0x1ff0f428

080025ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e031      	b.n	8002626 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe ff4e 	bl	800146c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_ADC_Init+0x84>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	f043 0202 	orr.w	r2, r3, #2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fb0a 	bl	8002c14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f023 0303 	bic.w	r3, r3, #3
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
 8002616:	e001      	b.n	800261c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	ffffeefd 	.word	0xffffeefd

08002634 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_ADC_Start+0x1a>
 800264a:	2302      	movs	r3, #2
 800264c:	e0ad      	b.n	80027aa <HAL_ADC_Start+0x176>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	d018      	beq.n	8002696 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002674:	4b50      	ldr	r3, [pc, #320]	; (80027b8 <HAL_ADC_Start+0x184>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a50      	ldr	r2, [pc, #320]	; (80027bc <HAL_ADC_Start+0x188>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	0c9a      	lsrs	r2, r3, #18
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002688:	e002      	b.n	8002690 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3b01      	subs	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f9      	bne.n	800268a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d175      	bne.n	8002790 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026a8:	4b45      	ldr	r3, [pc, #276]	; (80027c0 <HAL_ADC_Start+0x18c>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026de:	d106      	bne.n	80026ee <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f023 0206 	bic.w	r2, r3, #6
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44
 80026ec:	e002      	b.n	80026f4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002704:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_ADC_Start+0x190>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d143      	bne.n	80027a8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	e03a      	b.n	80027a8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a24      	ldr	r2, [pc, #144]	; (80027c8 <HAL_ADC_Start+0x194>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10e      	bne.n	800275a <HAL_ADC_Start+0x126>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d107      	bne.n	800275a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002758:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <HAL_ADC_Start+0x190>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d120      	bne.n	80027a8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a18      	ldr	r2, [pc, #96]	; (80027cc <HAL_ADC_Start+0x198>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d11b      	bne.n	80027a8 <HAL_ADC_Start+0x174>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d114      	bne.n	80027a8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	e00b      	b.n	80027a8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f043 0210 	orr.w	r2, r3, #16
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000000 	.word	0x20000000
 80027bc:	431bde83 	.word	0x431bde83
 80027c0:	fffff8fe 	.word	0xfffff8fe
 80027c4:	40012300 	.word	0x40012300
 80027c8:	40012000 	.word	0x40012000
 80027cc:	40012200 	.word	0x40012200

080027d0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_Stop+0x16>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e01f      	b.n	8002826 <HAL_ADC_Stop+0x56>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_ADC_Stop+0x64>)
 8002812:	4013      	ands	r3, r2
 8002814:	f043 0201 	orr.w	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	ffffeefe 	.word	0xffffeefe

08002838 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002854:	d113      	bne.n	800287e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002864:	d10b      	bne.n	800287e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f043 0220 	orr.w	r2, r3, #32
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e063      	b.n	8002946 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800287e:	f7ff fe1d 	bl	80024bc <HAL_GetTick>
 8002882:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002884:	e021      	b.n	80028ca <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d01d      	beq.n	80028ca <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <HAL_ADC_PollForConversion+0x6c>
 8002894:	f7ff fe12 	bl	80024bc <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d212      	bcs.n	80028ca <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d00b      	beq.n	80028ca <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f043 0204 	orr.w	r2, r3, #4
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e03d      	b.n	8002946 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d1d6      	bne.n	8002886 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0212 	mvn.w	r2, #18
 80028e0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d123      	bne.n	8002944 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002900:	2b00      	cmp	r3, #0
 8002902:	d11f      	bne.n	8002944 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800290e:	2b00      	cmp	r3, #0
 8002910:	d006      	beq.n	8002920 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800291c:	2b00      	cmp	r3, #0
 800291e:	d111      	bne.n	8002944 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d105      	bne.n	8002944 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f043 0201 	orr.w	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x1c>
 8002980:	2302      	movs	r3, #2
 8002982:	e136      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x28a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b09      	cmp	r3, #9
 8002992:	d93a      	bls.n	8002a0a <HAL_ADC_ConfigChannel+0xa2>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800299c:	d035      	beq.n	8002a0a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68d9      	ldr	r1, [r3, #12]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	3b1e      	subs	r3, #30
 80029b4:	2207      	movs	r2, #7
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43da      	mvns	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	400a      	ands	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a8d      	ldr	r2, [pc, #564]	; (8002c00 <HAL_ADC_ConfigChannel+0x298>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10a      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68d9      	ldr	r1, [r3, #12]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	061a      	lsls	r2, r3, #24
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029e2:	e035      	b.n	8002a50 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68d9      	ldr	r1, [r3, #12]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	4618      	mov	r0, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4403      	add	r3, r0
 80029fc:	3b1e      	subs	r3, #30
 80029fe:	409a      	lsls	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a08:	e022      	b.n	8002a50 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6919      	ldr	r1, [r3, #16]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	4613      	mov	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	2207      	movs	r2, #7
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43da      	mvns	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6919      	ldr	r1, [r3, #16]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	4603      	mov	r3, r0
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4403      	add	r3, r0
 8002a46:	409a      	lsls	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b06      	cmp	r3, #6
 8002a56:	d824      	bhi.n	8002aa2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	3b05      	subs	r3, #5
 8002a6a:	221f      	movs	r2, #31
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43da      	mvns	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	400a      	ands	r2, r1
 8002a78:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	3b05      	subs	r3, #5
 8002a94:	fa00 f203 	lsl.w	r2, r0, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	635a      	str	r2, [r3, #52]	; 0x34
 8002aa0:	e04c      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d824      	bhi.n	8002af4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	3b23      	subs	r3, #35	; 0x23
 8002abc:	221f      	movs	r2, #31
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	400a      	ands	r2, r1
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	4618      	mov	r0, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b23      	subs	r3, #35	; 0x23
 8002ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
 8002af2:	e023      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	3b41      	subs	r3, #65	; 0x41
 8002b06:	221f      	movs	r2, #31
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	400a      	ands	r2, r1
 8002b14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b41      	subs	r3, #65	; 0x41
 8002b30:	fa00 f203 	lsl.w	r2, r0, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a30      	ldr	r2, [pc, #192]	; (8002c04 <HAL_ADC_ConfigChannel+0x29c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10a      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1f4>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b4e:	d105      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002b50:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a2c      	ldr	r2, [pc, #176]	; (8002c08 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b56:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b5a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a28      	ldr	r2, [pc, #160]	; (8002c04 <HAL_ADC_ConfigChannel+0x29c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d10f      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x21e>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b12      	cmp	r3, #18
 8002b6c:	d10b      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a25      	ldr	r2, [pc, #148]	; (8002c08 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b78:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b7a:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b84:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <HAL_ADC_ConfigChannel+0x29c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d12b      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x280>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1a      	ldr	r2, [pc, #104]	; (8002c00 <HAL_ADC_ConfigChannel+0x298>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d003      	beq.n	8002ba2 <HAL_ADC_ConfigChannel+0x23a>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b11      	cmp	r3, #17
 8002ba0:	d122      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4a18      	ldr	r2, [pc, #96]	; (8002c08 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ba8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002bac:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <HAL_ADC_ConfigChannel+0x2a0>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <HAL_ADC_ConfigChannel+0x2a0>)
 8002bb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bb8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a10      	ldr	r2, [pc, #64]	; (8002c00 <HAL_ADC_ConfigChannel+0x298>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d111      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_ADC_ConfigChannel+0x2a4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a11      	ldr	r2, [pc, #68]	; (8002c10 <HAL_ADC_ConfigChannel+0x2a8>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0c9a      	lsrs	r2, r3, #18
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bda:	e002      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f9      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	10000012 	.word	0x10000012
 8002c04:	40012000 	.word	0x40012000
 8002c08:	40012300 	.word	0x40012300
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	431bde83 	.word	0x431bde83

08002c14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002c1c:	4b78      	ldr	r3, [pc, #480]	; (8002e00 <ADC_Init+0x1ec>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4a77      	ldr	r2, [pc, #476]	; (8002e00 <ADC_Init+0x1ec>)
 8002c22:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c26:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002c28:	4b75      	ldr	r3, [pc, #468]	; (8002e00 <ADC_Init+0x1ec>)
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4973      	ldr	r1, [pc, #460]	; (8002e00 <ADC_Init+0x1ec>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	021a      	lsls	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6899      	ldr	r1, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <ADC_Init+0x1f0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d022      	beq.n	8002cee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6899      	ldr	r1, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6899      	ldr	r1, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	e00f      	b.n	8002d0e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0202 	bic.w	r2, r2, #2
 8002d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6899      	ldr	r1, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	005a      	lsls	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01b      	beq.n	8002d74 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6859      	ldr	r1, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	3b01      	subs	r3, #1
 8002d68:	035a      	lsls	r2, r3, #13
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	e007      	b.n	8002d84 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	051a      	lsls	r2, r3, #20
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002db8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6899      	ldr	r1, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dc6:	025a      	lsls	r2, r3, #9
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6899      	ldr	r1, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	029a      	lsls	r2, r3, #10
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	40012300 	.word	0x40012300
 8002e04:	0f000001 	.word	0x0f000001

08002e08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0ed      	b.n	8002ff6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe fc04 	bl	8001634 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e3c:	f7ff fb3e 	bl	80024bc <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e42:	e012      	b.n	8002e6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e44:	f7ff fb3a 	bl	80024bc <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b0a      	cmp	r3, #10
 8002e50:	d90b      	bls.n	8002e6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2205      	movs	r2, #5
 8002e62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0c5      	b.n	8002ff6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0e5      	beq.n	8002e44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0202 	bic.w	r2, r2, #2
 8002e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e88:	f7ff fb18 	bl	80024bc <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e8e:	e012      	b.n	8002eb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e90:	f7ff fb14 	bl	80024bc <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b0a      	cmp	r3, #10
 8002e9c:	d90b      	bls.n	8002eb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2205      	movs	r2, #5
 8002eae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e09f      	b.n	8002ff6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e5      	bne.n	8002e90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7e1b      	ldrb	r3, [r3, #24]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d108      	bne.n	8002ede <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e007      	b.n	8002eee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7e5b      	ldrb	r3, [r3, #25]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d108      	bne.n	8002f08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e007      	b.n	8002f18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7e9b      	ldrb	r3, [r3, #26]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d108      	bne.n	8002f32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0220 	orr.w	r2, r2, #32
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e007      	b.n	8002f42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0220 	bic.w	r2, r2, #32
 8002f40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	7edb      	ldrb	r3, [r3, #27]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d108      	bne.n	8002f5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0210 	bic.w	r2, r2, #16
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e007      	b.n	8002f6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0210 	orr.w	r2, r2, #16
 8002f6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7f1b      	ldrb	r3, [r3, #28]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d108      	bne.n	8002f86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0208 	orr.w	r2, r2, #8
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e007      	b.n	8002f96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0208 	bic.w	r2, r2, #8
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	7f5b      	ldrb	r3, [r3, #29]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d108      	bne.n	8002fb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0204 	orr.w	r2, r2, #4
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e007      	b.n	8002fc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0204 	bic.w	r2, r2, #4
 8002fbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	ea42 0103 	orr.w	r1, r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	1e5a      	subs	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003016:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d003      	beq.n	8003026 <HAL_CAN_ConfigFilter+0x26>
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b02      	cmp	r3, #2
 8003022:	f040 80c7 	bne.w	80031b4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a69      	ldr	r2, [pc, #420]	; (80031d0 <HAL_CAN_ConfigFilter+0x1d0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d001      	beq.n	8003034 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003030:	4b68      	ldr	r3, [pc, #416]	; (80031d4 <HAL_CAN_ConfigFilter+0x1d4>)
 8003032:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800303a:	f043 0201 	orr.w	r2, r3, #1
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	4a63      	ldr	r2, [pc, #396]	; (80031d4 <HAL_CAN_ConfigFilter+0x1d4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d111      	bne.n	8003070 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003052:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	431a      	orrs	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	2201      	movs	r2, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	43db      	mvns	r3, r3
 800308a:	401a      	ands	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d123      	bne.n	80030e2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	401a      	ands	r2, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	3248      	adds	r2, #72	; 0x48
 80030c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030d8:	6979      	ldr	r1, [r7, #20]
 80030da:	3348      	adds	r3, #72	; 0x48
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d122      	bne.n	8003130 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800310a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3248      	adds	r2, #72	; 0x48
 8003110:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003124:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003126:	6979      	ldr	r1, [r7, #20]
 8003128:	3348      	adds	r3, #72	; 0x48
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	43db      	mvns	r3, r3
 8003142:	401a      	ands	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800314a:	e007      	b.n	800315c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	431a      	orrs	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	43db      	mvns	r3, r3
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003176:	e007      	b.n	8003188 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	431a      	orrs	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d107      	bne.n	80031a0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	431a      	orrs	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031a6:	f023 0201 	bic.w	r2, r3, #1
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e006      	b.n	80031c2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40003400 	.word	0x40003400
 80031d4:	40006400 	.word	0x40006400

080031d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d12e      	bne.n	800324a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003204:	f7ff f95a 	bl	80024bc <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800320a:	e012      	b.n	8003232 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800320c:	f7ff f956 	bl	80024bc <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b0a      	cmp	r3, #10
 8003218:	d90b      	bls.n	8003232 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2205      	movs	r2, #5
 800322a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e012      	b.n	8003258 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e5      	bne.n	800320c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e006      	b.n	8003258 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	; 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003274:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800327e:	7ffb      	ldrb	r3, [r7, #31]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d003      	beq.n	800328c <HAL_CAN_AddTxMessage+0x2c>
 8003284:	7ffb      	ldrb	r3, [r7, #31]
 8003286:	2b02      	cmp	r3, #2
 8003288:	f040 80ad 	bne.w	80033e6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8095 	beq.w	80033d6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	0e1b      	lsrs	r3, r3, #24
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80032b6:	2201      	movs	r2, #1
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10d      	bne.n	80032e4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	6809      	ldr	r1, [r1, #0]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3318      	adds	r3, #24
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	440b      	add	r3, r1
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e00f      	b.n	8003304 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032ee:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032f4:	68f9      	ldr	r1, [r7, #12]
 80032f6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80032f8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3318      	adds	r3, #24
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	440b      	add	r3, r1
 8003302:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6819      	ldr	r1, [r3, #0]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	3318      	adds	r3, #24
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	440b      	add	r3, r1
 8003314:	3304      	adds	r3, #4
 8003316:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	7d1b      	ldrb	r3, [r3, #20]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d111      	bne.n	8003344 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3318      	adds	r3, #24
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	4413      	add	r3, r2
 800332c:	3304      	adds	r3, #4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	6811      	ldr	r1, [r2, #0]
 8003334:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3318      	adds	r3, #24
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	440b      	add	r3, r1
 8003340:	3304      	adds	r3, #4
 8003342:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3307      	adds	r3, #7
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	061a      	lsls	r2, r3, #24
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3306      	adds	r3, #6
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	041b      	lsls	r3, r3, #16
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3305      	adds	r3, #5
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	4313      	orrs	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	3204      	adds	r2, #4
 8003364:	7812      	ldrb	r2, [r2, #0]
 8003366:	4610      	mov	r0, r2
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	6811      	ldr	r1, [r2, #0]
 800336c:	ea43 0200 	orr.w	r2, r3, r0
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	440b      	add	r3, r1
 8003376:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800337a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3303      	adds	r3, #3
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	061a      	lsls	r2, r3, #24
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3302      	adds	r3, #2
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3301      	adds	r3, #1
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	4313      	orrs	r3, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	4610      	mov	r0, r2
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	6811      	ldr	r1, [r2, #0]
 80033a2:	ea43 0200 	orr.w	r2, r3, r0
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	440b      	add	r3, r1
 80033ac:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80033b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	3318      	adds	r3, #24
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	4413      	add	r3, r2
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	6811      	ldr	r1, [r2, #0]
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	3318      	adds	r3, #24
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	440b      	add	r3, r1
 80033d0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e00e      	b.n	80033f4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e006      	b.n	80033f4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
  }
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3724      	adds	r7, #36	; 0x24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003414:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d003      	beq.n	8003424 <HAL_CAN_GetRxMessage+0x24>
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	2b02      	cmp	r3, #2
 8003420:	f040 80f3 	bne.w	800360a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10e      	bne.n	8003448 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d116      	bne.n	8003466 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0e7      	b.n	8003618 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d107      	bne.n	8003466 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e0d8      	b.n	8003618 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	331b      	adds	r3, #27
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	4413      	add	r3, r2
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0204 	and.w	r2, r3, #4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10c      	bne.n	800349e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	331b      	adds	r3, #27
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	4413      	add	r3, r2
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	0d5b      	lsrs	r3, r3, #21
 8003494:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	e00b      	b.n	80034b6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	331b      	adds	r3, #27
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	4413      	add	r3, r2
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	08db      	lsrs	r3, r3, #3
 80034ae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	331b      	adds	r3, #27
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	4413      	add	r3, r2
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0202 	and.w	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	331b      	adds	r3, #27
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	4413      	add	r3, r2
 80034d8:	3304      	adds	r3, #4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 020f 	and.w	r2, r3, #15
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	331b      	adds	r3, #27
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	4413      	add	r3, r2
 80034f0:	3304      	adds	r3, #4
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	331b      	adds	r3, #27
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	4413      	add	r3, r2
 8003508:	3304      	adds	r3, #4
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	0c1b      	lsrs	r3, r3, #16
 800350e:	b29a      	uxth	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	4413      	add	r3, r2
 800351e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	b2da      	uxtb	r2, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	4413      	add	r3, r2
 8003534:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	0a1a      	lsrs	r2, r3, #8
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	4413      	add	r3, r2
 800354e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0c1a      	lsrs	r2, r3, #16
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	3302      	adds	r3, #2
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	4413      	add	r3, r2
 8003568:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	0e1a      	lsrs	r2, r3, #24
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	3303      	adds	r3, #3
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	4413      	add	r3, r2
 8003582:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	3304      	adds	r3, #4
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	4413      	add	r3, r2
 800359a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0a1a      	lsrs	r2, r3, #8
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	3305      	adds	r3, #5
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	0c1a      	lsrs	r2, r3, #16
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	3306      	adds	r3, #6
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	0e1a      	lsrs	r2, r3, #24
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	3307      	adds	r3, #7
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d108      	bne.n	80035f6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0220 	orr.w	r2, r2, #32
 80035f2:	60da      	str	r2, [r3, #12]
 80035f4:	e007      	b.n	8003606 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0220 	orr.w	r2, r2, #32
 8003604:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	e006      	b.n	8003618 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003634:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d002      	beq.n	8003642 <HAL_CAN_ActivateNotification+0x1e>
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d109      	bne.n	8003656 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6959      	ldr	r1, [r3, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e006      	b.n	8003664 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
  }
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	; 0x28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003678:	2300      	movs	r3, #0
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d07c      	beq.n	80037b0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d023      	beq.n	8003708 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2201      	movs	r2, #1
 80036c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f983 	bl	80039de <HAL_CAN_TxMailbox0CompleteCallback>
 80036d8:	e016      	b.n	8003708 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d004      	beq.n	80036ee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
 80036ec:	e00c      	b.n	8003708 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d004      	beq.n	8003702 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003700:	e002      	b.n	8003708 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f989 	bl	8003a1a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d024      	beq.n	800375c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800371a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f963 	bl	80039f2 <HAL_CAN_TxMailbox1CompleteCallback>
 800372c:	e016      	b.n	800375c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	2b00      	cmp	r3, #0
 8003736:	d004      	beq.n	8003742 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
 8003740:	e00c      	b.n	800375c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
 8003754:	e002      	b.n	800375c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f969 	bl	8003a2e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d024      	beq.n	80037b0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800376e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f943 	bl	8003a06 <HAL_CAN_TxMailbox2CompleteCallback>
 8003780:	e016      	b.n	80037b0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d004      	beq.n	8003796 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
 8003794:	e00c      	b.n	80037b0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d004      	beq.n	80037aa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
 80037a8:	e002      	b.n	80037b0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f949 	bl	8003a42 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00c      	beq.n	80037d4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2210      	movs	r2, #16
 80037d2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00b      	beq.n	80037f6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d006      	beq.n	80037f6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2208      	movs	r2, #8
 80037ee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7fe fc21 	bl	8002038 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d009      	beq.n	8003814 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fe fbfa 	bl	8002008 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00c      	beq.n	8003838 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800382e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2210      	movs	r2, #16
 8003836:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d006      	beq.n	800385a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2208      	movs	r2, #8
 8003852:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f908 	bl	8003a6a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	d009      	beq.n	8003878 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8ef 	bl	8003a56 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d006      	beq.n	800389a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2210      	movs	r2, #16
 8003892:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f8f2 	bl	8003a7e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00b      	beq.n	80038bc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2208      	movs	r2, #8
 80038b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f8eb 	bl	8003a92 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d07b      	beq.n	80039be <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d072      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	f043 0302 	orr.w	r3, r3, #2
 8003906:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	f043 0304 	orr.w	r3, r3, #4
 8003922:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392a:	2b00      	cmp	r3, #0
 800392c:	d043      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003934:	2b00      	cmp	r3, #0
 8003936:	d03e      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800393e:	2b60      	cmp	r3, #96	; 0x60
 8003940:	d02b      	beq.n	800399a <HAL_CAN_IRQHandler+0x32a>
 8003942:	2b60      	cmp	r3, #96	; 0x60
 8003944:	d82e      	bhi.n	80039a4 <HAL_CAN_IRQHandler+0x334>
 8003946:	2b50      	cmp	r3, #80	; 0x50
 8003948:	d022      	beq.n	8003990 <HAL_CAN_IRQHandler+0x320>
 800394a:	2b50      	cmp	r3, #80	; 0x50
 800394c:	d82a      	bhi.n	80039a4 <HAL_CAN_IRQHandler+0x334>
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d019      	beq.n	8003986 <HAL_CAN_IRQHandler+0x316>
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d826      	bhi.n	80039a4 <HAL_CAN_IRQHandler+0x334>
 8003956:	2b30      	cmp	r3, #48	; 0x30
 8003958:	d010      	beq.n	800397c <HAL_CAN_IRQHandler+0x30c>
 800395a:	2b30      	cmp	r3, #48	; 0x30
 800395c:	d822      	bhi.n	80039a4 <HAL_CAN_IRQHandler+0x334>
 800395e:	2b10      	cmp	r3, #16
 8003960:	d002      	beq.n	8003968 <HAL_CAN_IRQHandler+0x2f8>
 8003962:	2b20      	cmp	r3, #32
 8003964:	d005      	beq.n	8003972 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003966:	e01d      	b.n	80039a4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	f043 0308 	orr.w	r3, r3, #8
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003970:	e019      	b.n	80039a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	f043 0310 	orr.w	r3, r3, #16
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800397a:	e014      	b.n	80039a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	f043 0320 	orr.w	r3, r3, #32
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003984:	e00f      	b.n	80039a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800398e:	e00a      	b.n	80039a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003998:	e005      	b.n	80039a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039a2:	e000      	b.n	80039a6 <HAL_CAN_IRQHandler+0x336>
            break;
 80039a4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2204      	movs	r2, #4
 80039bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f868 	bl	8003aa6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80039d6:	bf00      	nop
 80039d8:	3728      	adds	r7, #40	; 0x28
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <__NVIC_SetPriorityGrouping>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <__NVIC_SetPriorityGrouping+0x40>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aea:	4a04      	ldr	r2, [pc, #16]	; (8003afc <__NVIC_SetPriorityGrouping+0x40>)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	60d3      	str	r3, [r2, #12]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00
 8003b00:	05fa0000 	.word	0x05fa0000

08003b04 <__NVIC_GetPriorityGrouping>:
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b08:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <__NVIC_GetPriorityGrouping+0x18>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	0a1b      	lsrs	r3, r3, #8
 8003b0e:	f003 0307 	and.w	r3, r3, #7
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <__NVIC_EnableIRQ>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	db0b      	blt.n	8003b4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	f003 021f 	and.w	r2, r3, #31
 8003b38:	4907      	ldr	r1, [pc, #28]	; (8003b58 <__NVIC_EnableIRQ+0x38>)
 8003b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	2001      	movs	r0, #1
 8003b42:	fa00 f202 	lsl.w	r2, r0, r2
 8003b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	e000e100 	.word	0xe000e100

08003b5c <__NVIC_SetPriority>:
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	6039      	str	r1, [r7, #0]
 8003b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	db0a      	blt.n	8003b86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	490c      	ldr	r1, [pc, #48]	; (8003ba8 <__NVIC_SetPriority+0x4c>)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	0112      	lsls	r2, r2, #4
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	440b      	add	r3, r1
 8003b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b84:	e00a      	b.n	8003b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4908      	ldr	r1, [pc, #32]	; (8003bac <__NVIC_SetPriority+0x50>)
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	3b04      	subs	r3, #4
 8003b94:	0112      	lsls	r2, r2, #4
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	440b      	add	r3, r1
 8003b9a:	761a      	strb	r2, [r3, #24]
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000e100 	.word	0xe000e100
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <NVIC_EncodePriority>:
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	; 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f1c3 0307 	rsb	r3, r3, #7
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	bf28      	it	cs
 8003bce:	2304      	movcs	r3, #4
 8003bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	2b06      	cmp	r3, #6
 8003bd8:	d902      	bls.n	8003be0 <NVIC_EncodePriority+0x30>
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3b03      	subs	r3, #3
 8003bde:	e000      	b.n	8003be2 <NVIC_EncodePriority+0x32>
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be4:	f04f 32ff 	mov.w	r2, #4294967295
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	43d9      	mvns	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c08:	4313      	orrs	r3, r2
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3724      	adds	r7, #36	; 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <SysTick_Config>:
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c28:	d301      	bcc.n	8003c2e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e00f      	b.n	8003c4e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <SysTick_Config+0x40>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c36:	210f      	movs	r1, #15
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	f7ff ff8e 	bl	8003b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <SysTick_Config+0x40>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c46:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <SysTick_Config+0x40>)
 8003c48:	2207      	movs	r2, #7
 8003c4a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	e000e010 	.word	0xe000e010

08003c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff29 	bl	8003abc <__NVIC_SetPriorityGrouping>
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	4603      	mov	r3, r0
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c84:	f7ff ff3e 	bl	8003b04 <__NVIC_GetPriorityGrouping>
 8003c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	6978      	ldr	r0, [r7, #20]
 8003c90:	f7ff ff8e 	bl	8003bb0 <NVIC_EncodePriority>
 8003c94:	4602      	mov	r2, r0
 8003c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff5d 	bl	8003b5c <__NVIC_SetPriority>
}
 8003ca2:	bf00      	nop
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff31 	bl	8003b20 <__NVIC_EnableIRQ>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff ffa2 	bl	8003c18 <SysTick_Config>
 8003cd4:	4603      	mov	r3, r0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cec:	f7fe fbe6 	bl	80024bc <HAL_GetTick>
 8003cf0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d008      	beq.n	8003d10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2280      	movs	r2, #128	; 0x80
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e052      	b.n	8003db6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0216 	bic.w	r2, r2, #22
 8003d1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d103      	bne.n	8003d40 <HAL_DMA_Abort+0x62>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0208 	bic.w	r2, r2, #8
 8003d4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d60:	e013      	b.n	8003d8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d62:	f7fe fbab 	bl	80024bc <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	d90c      	bls.n	8003d8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e015      	b.n	8003db6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e4      	bne.n	8003d62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	223f      	movs	r2, #63	; 0x3f
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d004      	beq.n	8003ddc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2280      	movs	r2, #128	; 0x80
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e00c      	b.n	8003df6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2205      	movs	r2, #5
 8003de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b089      	sub	sp, #36	; 0x24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	e175      	b.n	8004110 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e24:	2201      	movs	r2, #1
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4013      	ands	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	f040 8164 	bne.w	800410a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d005      	beq.n	8003e5a <HAL_GPIO_Init+0x56>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d130      	bne.n	8003ebc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	2203      	movs	r2, #3
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e90:	2201      	movs	r2, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 0201 	and.w	r2, r3, #1
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d017      	beq.n	8003ef8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d123      	bne.n	8003f4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	08da      	lsrs	r2, r3, #3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3208      	adds	r2, #8
 8003f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	220f      	movs	r2, #15
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	08da      	lsrs	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3208      	adds	r2, #8
 8003f46:	69b9      	ldr	r1, [r7, #24]
 8003f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0203 	and.w	r2, r3, #3
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80be 	beq.w	800410a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f8e:	4b66      	ldr	r3, [pc, #408]	; (8004128 <HAL_GPIO_Init+0x324>)
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	4a65      	ldr	r2, [pc, #404]	; (8004128 <HAL_GPIO_Init+0x324>)
 8003f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f98:	6453      	str	r3, [r2, #68]	; 0x44
 8003f9a:	4b63      	ldr	r3, [pc, #396]	; (8004128 <HAL_GPIO_Init+0x324>)
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003fa6:	4a61      	ldr	r2, [pc, #388]	; (800412c <HAL_GPIO_Init+0x328>)
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	3302      	adds	r3, #2
 8003fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	220f      	movs	r2, #15
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a58      	ldr	r2, [pc, #352]	; (8004130 <HAL_GPIO_Init+0x32c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d037      	beq.n	8004042 <HAL_GPIO_Init+0x23e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a57      	ldr	r2, [pc, #348]	; (8004134 <HAL_GPIO_Init+0x330>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d031      	beq.n	800403e <HAL_GPIO_Init+0x23a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a56      	ldr	r2, [pc, #344]	; (8004138 <HAL_GPIO_Init+0x334>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d02b      	beq.n	800403a <HAL_GPIO_Init+0x236>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a55      	ldr	r2, [pc, #340]	; (800413c <HAL_GPIO_Init+0x338>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d025      	beq.n	8004036 <HAL_GPIO_Init+0x232>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a54      	ldr	r2, [pc, #336]	; (8004140 <HAL_GPIO_Init+0x33c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01f      	beq.n	8004032 <HAL_GPIO_Init+0x22e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a53      	ldr	r2, [pc, #332]	; (8004144 <HAL_GPIO_Init+0x340>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d019      	beq.n	800402e <HAL_GPIO_Init+0x22a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a52      	ldr	r2, [pc, #328]	; (8004148 <HAL_GPIO_Init+0x344>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <HAL_GPIO_Init+0x226>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a51      	ldr	r2, [pc, #324]	; (800414c <HAL_GPIO_Init+0x348>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00d      	beq.n	8004026 <HAL_GPIO_Init+0x222>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a50      	ldr	r2, [pc, #320]	; (8004150 <HAL_GPIO_Init+0x34c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d007      	beq.n	8004022 <HAL_GPIO_Init+0x21e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a4f      	ldr	r2, [pc, #316]	; (8004154 <HAL_GPIO_Init+0x350>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <HAL_GPIO_Init+0x21a>
 800401a:	2309      	movs	r3, #9
 800401c:	e012      	b.n	8004044 <HAL_GPIO_Init+0x240>
 800401e:	230a      	movs	r3, #10
 8004020:	e010      	b.n	8004044 <HAL_GPIO_Init+0x240>
 8004022:	2308      	movs	r3, #8
 8004024:	e00e      	b.n	8004044 <HAL_GPIO_Init+0x240>
 8004026:	2307      	movs	r3, #7
 8004028:	e00c      	b.n	8004044 <HAL_GPIO_Init+0x240>
 800402a:	2306      	movs	r3, #6
 800402c:	e00a      	b.n	8004044 <HAL_GPIO_Init+0x240>
 800402e:	2305      	movs	r3, #5
 8004030:	e008      	b.n	8004044 <HAL_GPIO_Init+0x240>
 8004032:	2304      	movs	r3, #4
 8004034:	e006      	b.n	8004044 <HAL_GPIO_Init+0x240>
 8004036:	2303      	movs	r3, #3
 8004038:	e004      	b.n	8004044 <HAL_GPIO_Init+0x240>
 800403a:	2302      	movs	r3, #2
 800403c:	e002      	b.n	8004044 <HAL_GPIO_Init+0x240>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <HAL_GPIO_Init+0x240>
 8004042:	2300      	movs	r3, #0
 8004044:	69fa      	ldr	r2, [r7, #28]
 8004046:	f002 0203 	and.w	r2, r2, #3
 800404a:	0092      	lsls	r2, r2, #2
 800404c:	4093      	lsls	r3, r2
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004054:	4935      	ldr	r1, [pc, #212]	; (800412c <HAL_GPIO_Init+0x328>)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	089b      	lsrs	r3, r3, #2
 800405a:	3302      	adds	r3, #2
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004062:	4b3d      	ldr	r3, [pc, #244]	; (8004158 <HAL_GPIO_Init+0x354>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004086:	4a34      	ldr	r2, [pc, #208]	; (8004158 <HAL_GPIO_Init+0x354>)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800408c:	4b32      	ldr	r3, [pc, #200]	; (8004158 <HAL_GPIO_Init+0x354>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040b0:	4a29      	ldr	r2, [pc, #164]	; (8004158 <HAL_GPIO_Init+0x354>)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040b6:	4b28      	ldr	r3, [pc, #160]	; (8004158 <HAL_GPIO_Init+0x354>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040da:	4a1f      	ldr	r2, [pc, #124]	; (8004158 <HAL_GPIO_Init+0x354>)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_GPIO_Init+0x354>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004104:	4a14      	ldr	r2, [pc, #80]	; (8004158 <HAL_GPIO_Init+0x354>)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	3301      	adds	r3, #1
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b0f      	cmp	r3, #15
 8004114:	f67f ae86 	bls.w	8003e24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	3724      	adds	r7, #36	; 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800
 800412c:	40013800 	.word	0x40013800
 8004130:	40020000 	.word	0x40020000
 8004134:	40020400 	.word	0x40020400
 8004138:	40020800 	.word	0x40020800
 800413c:	40020c00 	.word	0x40020c00
 8004140:	40021000 	.word	0x40021000
 8004144:	40021400 	.word	0x40021400
 8004148:	40021800 	.word	0x40021800
 800414c:	40021c00 	.word	0x40021c00
 8004150:	40022000 	.word	0x40022000
 8004154:	40022400 	.word	0x40022400
 8004158:	40013c00 	.word	0x40013c00

0800415c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	887b      	ldrh	r3, [r7, #2]
 800416e:	4013      	ands	r3, r2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
 8004178:	e001      	b.n	800417e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800417e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	807b      	strh	r3, [r7, #2]
 8004198:	4613      	mov	r3, r2
 800419a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800419c:	787b      	ldrb	r3, [r7, #1]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041a2:	887a      	ldrh	r2, [r7, #2]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80041a8:	e003      	b.n	80041b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80041aa:	887b      	ldrh	r3, [r7, #2]
 80041ac:	041a      	lsls	r2, r3, #16
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	619a      	str	r2, [r3, #24]
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	4b23      	ldr	r3, [pc, #140]	; (8004258 <HAL_PWREx_EnableOverDrive+0x98>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	4a22      	ldr	r2, [pc, #136]	; (8004258 <HAL_PWREx_EnableOverDrive+0x98>)
 80041d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d4:	6413      	str	r3, [r2, #64]	; 0x40
 80041d6:	4b20      	ldr	r3, [pc, #128]	; (8004258 <HAL_PWREx_EnableOverDrive+0x98>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80041e2:	4b1e      	ldr	r3, [pc, #120]	; (800425c <HAL_PWREx_EnableOverDrive+0x9c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1d      	ldr	r2, [pc, #116]	; (800425c <HAL_PWREx_EnableOverDrive+0x9c>)
 80041e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041ee:	f7fe f965 	bl	80024bc <HAL_GetTick>
 80041f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041f4:	e009      	b.n	800420a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041f6:	f7fe f961 	bl	80024bc <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004204:	d901      	bls.n	800420a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e022      	b.n	8004250 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800420a:	4b14      	ldr	r3, [pc, #80]	; (800425c <HAL_PWREx_EnableOverDrive+0x9c>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004216:	d1ee      	bne.n	80041f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004218:	4b10      	ldr	r3, [pc, #64]	; (800425c <HAL_PWREx_EnableOverDrive+0x9c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a0f      	ldr	r2, [pc, #60]	; (800425c <HAL_PWREx_EnableOverDrive+0x9c>)
 800421e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004222:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004224:	f7fe f94a 	bl	80024bc <HAL_GetTick>
 8004228:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800422a:	e009      	b.n	8004240 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800422c:	f7fe f946 	bl	80024bc <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800423a:	d901      	bls.n	8004240 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e007      	b.n	8004250 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800424c:	d1ee      	bne.n	800422c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40023800 	.word	0x40023800
 800425c:	40007000 	.word	0x40007000

08004260 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004268:	2300      	movs	r3, #0
 800426a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e29b      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8087 	beq.w	8004392 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004284:	4b96      	ldr	r3, [pc, #600]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b04      	cmp	r3, #4
 800428e:	d00c      	beq.n	80042aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004290:	4b93      	ldr	r3, [pc, #588]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b08      	cmp	r3, #8
 800429a:	d112      	bne.n	80042c2 <HAL_RCC_OscConfig+0x62>
 800429c:	4b90      	ldr	r3, [pc, #576]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a8:	d10b      	bne.n	80042c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042aa:	4b8d      	ldr	r3, [pc, #564]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d06c      	beq.n	8004390 <HAL_RCC_OscConfig+0x130>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d168      	bne.n	8004390 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e275      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ca:	d106      	bne.n	80042da <HAL_RCC_OscConfig+0x7a>
 80042cc:	4b84      	ldr	r3, [pc, #528]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a83      	ldr	r2, [pc, #524]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80042d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	e02e      	b.n	8004338 <HAL_RCC_OscConfig+0xd8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10c      	bne.n	80042fc <HAL_RCC_OscConfig+0x9c>
 80042e2:	4b7f      	ldr	r3, [pc, #508]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a7e      	ldr	r2, [pc, #504]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80042e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4b7c      	ldr	r3, [pc, #496]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a7b      	ldr	r2, [pc, #492]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80042f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e01d      	b.n	8004338 <HAL_RCC_OscConfig+0xd8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0xc0>
 8004306:	4b76      	ldr	r3, [pc, #472]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a75      	ldr	r2, [pc, #468]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b73      	ldr	r3, [pc, #460]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a72      	ldr	r2, [pc, #456]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0xd8>
 8004320:	4b6f      	ldr	r3, [pc, #444]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6e      	ldr	r2, [pc, #440]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b6c      	ldr	r3, [pc, #432]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a6b      	ldr	r2, [pc, #428]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fe f8bc 	bl	80024bc <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004348:	f7fe f8b8 	bl	80024bc <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	; 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e229      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b61      	ldr	r3, [pc, #388]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0xe8>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fe f8a8 	bl	80024bc <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fe f8a4 	bl	80024bc <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e215      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	4b57      	ldr	r3, [pc, #348]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x110>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d069      	beq.n	8004472 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800439e:	4b50      	ldr	r3, [pc, #320]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043aa:	4b4d      	ldr	r3, [pc, #308]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d11c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x190>
 80043b6:	4b4a      	ldr	r3, [pc, #296]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d116      	bne.n	80043f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	4b47      	ldr	r3, [pc, #284]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCC_OscConfig+0x17a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1e9      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b41      	ldr	r3, [pc, #260]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	493d      	ldr	r1, [pc, #244]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	e040      	b.n	8004472 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d023      	beq.n	8004440 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f8:	4b39      	ldr	r3, [pc, #228]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a38      	ldr	r2, [pc, #224]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fe f85a 	bl	80024bc <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440c:	f7fe f856 	bl	80024bc <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e1c7      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441e:	4b30      	ldr	r3, [pc, #192]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442a:	4b2d      	ldr	r3, [pc, #180]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4929      	ldr	r1, [pc, #164]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
 800443e:	e018      	b.n	8004472 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004440:	4b27      	ldr	r3, [pc, #156]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a26      	ldr	r2, [pc, #152]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004446:	f023 0301 	bic.w	r3, r3, #1
 800444a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fe f836 	bl	80024bc <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004454:	f7fe f832 	bl	80024bc <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e1a3      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004466:	4b1e      	ldr	r3, [pc, #120]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d038      	beq.n	80044f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d019      	beq.n	80044ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004486:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 8004488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448a:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004492:	f7fe f813 	bl	80024bc <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800449a:	f7fe f80f 	bl	80024bc <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e180      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ac:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80044ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x23a>
 80044b8:	e01a      	b.n	80044f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80044bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044be:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <HAL_RCC_OscConfig+0x280>)
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c6:	f7fd fff9 	bl	80024bc <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044cc:	e00a      	b.n	80044e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ce:	f7fd fff5 	bl	80024bc <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d903      	bls.n	80044e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e166      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
 80044e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e4:	4b92      	ldr	r3, [pc, #584]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80044e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1ee      	bne.n	80044ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80a4 	beq.w	8004646 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fe:	4b8c      	ldr	r3, [pc, #560]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10d      	bne.n	8004526 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	4b89      	ldr	r3, [pc, #548]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	4a88      	ldr	r2, [pc, #544]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 8004510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004514:	6413      	str	r3, [r2, #64]	; 0x40
 8004516:	4b86      	ldr	r3, [pc, #536]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004526:	4b83      	ldr	r3, [pc, #524]	; (8004734 <HAL_RCC_OscConfig+0x4d4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d118      	bne.n	8004564 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004532:	4b80      	ldr	r3, [pc, #512]	; (8004734 <HAL_RCC_OscConfig+0x4d4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a7f      	ldr	r2, [pc, #508]	; (8004734 <HAL_RCC_OscConfig+0x4d4>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453e:	f7fd ffbd 	bl	80024bc <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004546:	f7fd ffb9 	bl	80024bc <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b64      	cmp	r3, #100	; 0x64
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e12a      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004558:	4b76      	ldr	r3, [pc, #472]	; (8004734 <HAL_RCC_OscConfig+0x4d4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <HAL_RCC_OscConfig+0x31a>
 800456c:	4b70      	ldr	r3, [pc, #448]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	4a6f      	ldr	r2, [pc, #444]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6713      	str	r3, [r2, #112]	; 0x70
 8004578:	e02d      	b.n	80045d6 <HAL_RCC_OscConfig+0x376>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x33c>
 8004582:	4b6b      	ldr	r3, [pc, #428]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	4a6a      	ldr	r2, [pc, #424]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6713      	str	r3, [r2, #112]	; 0x70
 800458e:	4b68      	ldr	r3, [pc, #416]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	4a67      	ldr	r2, [pc, #412]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	6713      	str	r3, [r2, #112]	; 0x70
 800459a:	e01c      	b.n	80045d6 <HAL_RCC_OscConfig+0x376>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d10c      	bne.n	80045be <HAL_RCC_OscConfig+0x35e>
 80045a4:	4b62      	ldr	r3, [pc, #392]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	4a61      	ldr	r2, [pc, #388]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80045aa:	f043 0304 	orr.w	r3, r3, #4
 80045ae:	6713      	str	r3, [r2, #112]	; 0x70
 80045b0:	4b5f      	ldr	r3, [pc, #380]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80045b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b4:	4a5e      	ldr	r2, [pc, #376]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	6713      	str	r3, [r2, #112]	; 0x70
 80045bc:	e00b      	b.n	80045d6 <HAL_RCC_OscConfig+0x376>
 80045be:	4b5c      	ldr	r3, [pc, #368]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	4a5b      	ldr	r2, [pc, #364]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ca:	4b59      	ldr	r3, [pc, #356]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	4a58      	ldr	r2, [pc, #352]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80045d0:	f023 0304 	bic.w	r3, r3, #4
 80045d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d015      	beq.n	800460a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fd ff6d 	bl	80024bc <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fd ff69 	bl	80024bc <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0d8      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fc:	4b4c      	ldr	r3, [pc, #304]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0ee      	beq.n	80045e6 <HAL_RCC_OscConfig+0x386>
 8004608:	e014      	b.n	8004634 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fd ff57 	bl	80024bc <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fd ff53 	bl	80024bc <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e0c2      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004628:	4b41      	ldr	r3, [pc, #260]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1ee      	bne.n	8004612 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d105      	bne.n	8004646 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463a:	4b3d      	ldr	r3, [pc, #244]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	4a3c      	ldr	r2, [pc, #240]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 8004640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 80ae 	beq.w	80047ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004650:	4b37      	ldr	r3, [pc, #220]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 030c 	and.w	r3, r3, #12
 8004658:	2b08      	cmp	r3, #8
 800465a:	d06d      	beq.n	8004738 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d14b      	bne.n	80046fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004664:	4b32      	ldr	r3, [pc, #200]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a31      	ldr	r2, [pc, #196]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 800466a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800466e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fd ff24 	bl	80024bc <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004678:	f7fd ff20 	bl	80024bc <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e091      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468a:	4b29      	ldr	r3, [pc, #164]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69da      	ldr	r2, [r3, #28]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	019b      	lsls	r3, r3, #6
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ac:	085b      	lsrs	r3, r3, #1
 80046ae:	3b01      	subs	r3, #1
 80046b0:	041b      	lsls	r3, r3, #16
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	061b      	lsls	r3, r3, #24
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	071b      	lsls	r3, r3, #28
 80046c2:	491b      	ldr	r1, [pc, #108]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c8:	4b19      	ldr	r3, [pc, #100]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80046ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fd fef2 	bl	80024bc <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fd feee 	bl	80024bc <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e05f      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ee:	4b10      	ldr	r3, [pc, #64]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x47c>
 80046fa:	e057      	b.n	80047ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fc:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a0b      	ldr	r2, [pc, #44]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 8004702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fd fed8 	bl	80024bc <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004710:	f7fd fed4 	bl	80024bc <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e045      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	4b03      	ldr	r3, [pc, #12]	; (8004730 <HAL_RCC_OscConfig+0x4d0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x4b0>
 800472e:	e03d      	b.n	80047ac <HAL_RCC_OscConfig+0x54c>
 8004730:	40023800 	.word	0x40023800
 8004734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004738:	4b1f      	ldr	r3, [pc, #124]	; (80047b8 <HAL_RCC_OscConfig+0x558>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d030      	beq.n	80047a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d129      	bne.n	80047a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d122      	bne.n	80047a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800476e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004770:	4293      	cmp	r3, r2
 8004772:	d119      	bne.n	80047a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	3b01      	subs	r3, #1
 8004782:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d10f      	bne.n	80047a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800

080047bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0d0      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d4:	4b6a      	ldr	r3, [pc, #424]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d910      	bls.n	8004804 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b67      	ldr	r3, [pc, #412]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 020f 	bic.w	r2, r3, #15
 80047ea:	4965      	ldr	r1, [pc, #404]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b63      	ldr	r3, [pc, #396]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0b8      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800481c:	4b59      	ldr	r3, [pc, #356]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a58      	ldr	r2, [pc, #352]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 8004822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004826:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004834:	4b53      	ldr	r3, [pc, #332]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4a52      	ldr	r2, [pc, #328]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 800483a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800483e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004840:	4b50      	ldr	r3, [pc, #320]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	494d      	ldr	r1, [pc, #308]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d040      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d107      	bne.n	8004876 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	4b47      	ldr	r3, [pc, #284]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d115      	bne.n	800489e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e07f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d107      	bne.n	800488e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487e:	4b41      	ldr	r3, [pc, #260]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e073      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488e:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e06b      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800489e:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f023 0203 	bic.w	r2, r3, #3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4936      	ldr	r1, [pc, #216]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b0:	f7fd fe04 	bl	80024bc <HAL_GetTick>
 80048b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b8:	f7fd fe00 	bl	80024bc <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e053      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ce:	4b2d      	ldr	r3, [pc, #180]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 020c 	and.w	r2, r3, #12
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	429a      	cmp	r2, r3
 80048de:	d1eb      	bne.n	80048b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048e0:	4b27      	ldr	r3, [pc, #156]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d210      	bcs.n	8004910 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 020f 	bic.w	r2, r3, #15
 80048f6:	4922      	ldr	r1, [pc, #136]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b20      	ldr	r3, [pc, #128]	; (8004980 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e032      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4916      	ldr	r1, [pc, #88]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	490e      	ldr	r1, [pc, #56]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800494e:	f000 f821 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004952:	4602      	mov	r2, r0
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCC_ClockConfig+0x1c8>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	490a      	ldr	r1, [pc, #40]	; (8004988 <HAL_RCC_ClockConfig+0x1cc>)
 8004960:	5ccb      	ldrb	r3, [r1, r3]
 8004962:	fa22 f303 	lsr.w	r3, r2, r3
 8004966:	4a09      	ldr	r2, [pc, #36]	; (800498c <HAL_RCC_ClockConfig+0x1d0>)
 8004968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <HAL_RCC_ClockConfig+0x1d4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fd fd60 	bl	8002434 <HAL_InitTick>

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40023c00 	.word	0x40023c00
 8004984:	40023800 	.word	0x40023800
 8004988:	08007290 	.word	0x08007290
 800498c:	20000000 	.word	0x20000000
 8004990:	20000004 	.word	0x20000004

08004994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004998:	b090      	sub	sp, #64	; 0x40
 800499a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	637b      	str	r3, [r7, #52]	; 0x34
 80049a0:	2300      	movs	r3, #0
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a4:	2300      	movs	r3, #0
 80049a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ac:	4b59      	ldr	r3, [pc, #356]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 030c 	and.w	r3, r3, #12
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d00d      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x40>
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	f200 80a1 	bhi.w	8004b00 <HAL_RCC_GetSysClockFreq+0x16c>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x34>
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d003      	beq.n	80049ce <HAL_RCC_GetSysClockFreq+0x3a>
 80049c6:	e09b      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049c8:	4b53      	ldr	r3, [pc, #332]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x184>)
 80049ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049cc:	e09b      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ce:	4b53      	ldr	r3, [pc, #332]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x188>)
 80049d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049d2:	e098      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049d4:	4b4f      	ldr	r3, [pc, #316]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049dc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049de:	4b4d      	ldr	r3, [pc, #308]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d028      	beq.n	8004a3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ea:	4b4a      	ldr	r3, [pc, #296]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	099b      	lsrs	r3, r3, #6
 80049f0:	2200      	movs	r2, #0
 80049f2:	623b      	str	r3, [r7, #32]
 80049f4:	627a      	str	r2, [r7, #36]	; 0x24
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049fc:	2100      	movs	r1, #0
 80049fe:	4b47      	ldr	r3, [pc, #284]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a00:	fb03 f201 	mul.w	r2, r3, r1
 8004a04:	2300      	movs	r3, #0
 8004a06:	fb00 f303 	mul.w	r3, r0, r3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	4a43      	ldr	r2, [pc, #268]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004a0e:	fba0 1202 	umull	r1, r2, r0, r2
 8004a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a14:	460a      	mov	r2, r1
 8004a16:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1a:	4413      	add	r3, r2
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a20:	2200      	movs	r2, #0
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	61fa      	str	r2, [r7, #28]
 8004a26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a2e:	f7fb fc0b 	bl	8000248 <__aeabi_uldivmod>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4613      	mov	r3, r2
 8004a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3a:	e053      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3c:	4b35      	ldr	r3, [pc, #212]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	099b      	lsrs	r3, r3, #6
 8004a42:	2200      	movs	r2, #0
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	617a      	str	r2, [r7, #20]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a4e:	f04f 0b00 	mov.w	fp, #0
 8004a52:	4652      	mov	r2, sl
 8004a54:	465b      	mov	r3, fp
 8004a56:	f04f 0000 	mov.w	r0, #0
 8004a5a:	f04f 0100 	mov.w	r1, #0
 8004a5e:	0159      	lsls	r1, r3, #5
 8004a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a64:	0150      	lsls	r0, r2, #5
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	ebb2 080a 	subs.w	r8, r2, sl
 8004a6e:	eb63 090b 	sbc.w	r9, r3, fp
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a86:	ebb2 0408 	subs.w	r4, r2, r8
 8004a8a:	eb63 0509 	sbc.w	r5, r3, r9
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	00eb      	lsls	r3, r5, #3
 8004a98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a9c:	00e2      	lsls	r2, r4, #3
 8004a9e:	4614      	mov	r4, r2
 8004aa0:	461d      	mov	r5, r3
 8004aa2:	eb14 030a 	adds.w	r3, r4, sl
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	eb45 030b 	adc.w	r3, r5, fp
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aba:	4629      	mov	r1, r5
 8004abc:	028b      	lsls	r3, r1, #10
 8004abe:	4621      	mov	r1, r4
 8004ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	028a      	lsls	r2, r1, #10
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4619      	mov	r1, r3
 8004acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ace:	2200      	movs	r2, #0
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	60fa      	str	r2, [r7, #12]
 8004ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ad8:	f7fb fbb6 	bl	8000248 <__aeabi_uldivmod>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	0c1b      	lsrs	r3, r3, #16
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	3301      	adds	r3, #1
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004af4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004afe:	e002      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3740      	adds	r7, #64	; 0x40
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	017d7840 	.word	0x017d7840

08004b20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b24:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b26:	681b      	ldr	r3, [r3, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000000 	.word	0x20000000

08004b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b3c:	f7ff fff0 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	0a9b      	lsrs	r3, r3, #10
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4903      	ldr	r1, [pc, #12]	; (8004b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4e:	5ccb      	ldrb	r3, [r1, r3]
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	080072a0 	.word	0x080072a0

08004b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b64:	f7ff ffdc 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	0b5b      	lsrs	r3, r3, #13
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	4903      	ldr	r1, [pc, #12]	; (8004b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b76:	5ccb      	ldrb	r3, [r1, r3]
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800
 8004b84:	080072a0 	.word	0x080072a0

08004b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d012      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bb0:	4b69      	ldr	r3, [pc, #420]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4a68      	ldr	r2, [pc, #416]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004bba:	6093      	str	r3, [r2, #8]
 8004bbc:	4b66      	ldr	r3, [pc, #408]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc4:	4964      	ldr	r1, [pc, #400]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d017      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004be2:	4b5d      	ldr	r3, [pc, #372]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	4959      	ldr	r1, [pc, #356]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c00:	d101      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c02:	2301      	movs	r3, #1
 8004c04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d017      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c1e:	4b4e      	ldr	r3, [pc, #312]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	494a      	ldr	r1, [pc, #296]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 808b 	beq.w	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c6c:	4b3a      	ldr	r3, [pc, #232]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	4a39      	ldr	r2, [pc, #228]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c76:	6413      	str	r3, [r2, #64]	; 0x40
 8004c78:	4b37      	ldr	r3, [pc, #220]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c84:	4b35      	ldr	r3, [pc, #212]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a34      	ldr	r2, [pc, #208]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c90:	f7fd fc14 	bl	80024bc <HAL_GetTick>
 8004c94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c98:	f7fd fc10 	bl	80024bc <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	; 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e38f      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004caa:	4b2c      	ldr	r3, [pc, #176]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cb6:	4b28      	ldr	r3, [pc, #160]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cbe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d035      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d02e      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cd4:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cdc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cde:	4b1e      	ldr	r3, [pc, #120]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce2:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cea:	4b1b      	ldr	r3, [pc, #108]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	4a1a      	ldr	r2, [pc, #104]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004cf6:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cfc:	4b16      	ldr	r3, [pc, #88]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d114      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fd fbd8 	bl	80024bc <HAL_GetTick>
 8004d0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0e:	e00a      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d10:	f7fd fbd4 	bl	80024bc <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e351      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d26:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0ee      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d3e:	d111      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d4e:	400b      	ands	r3, r1
 8004d50:	4901      	ldr	r1, [pc, #4]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	608b      	str	r3, [r1, #8]
 8004d56:	e00b      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	40007000 	.word	0x40007000
 8004d60:	0ffffcff 	.word	0x0ffffcff
 8004d64:	4bac      	ldr	r3, [pc, #688]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4aab      	ldr	r2, [pc, #684]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d6e:	6093      	str	r3, [r2, #8]
 8004d70:	4ba9      	ldr	r3, [pc, #676]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7c:	49a6      	ldr	r1, [pc, #664]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d010      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d8e:	4ba2      	ldr	r3, [pc, #648]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d94:	4aa0      	ldr	r2, [pc, #640]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d9e:	4b9e      	ldr	r3, [pc, #632]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	499b      	ldr	r1, [pc, #620]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dbc:	4b96      	ldr	r3, [pc, #600]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dca:	4993      	ldr	r1, [pc, #588]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dde:	4b8e      	ldr	r3, [pc, #568]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dec:	498a      	ldr	r1, [pc, #552]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e00:	4b85      	ldr	r3, [pc, #532]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0e:	4982      	ldr	r1, [pc, #520]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e22:	4b7d      	ldr	r3, [pc, #500]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e30:	4979      	ldr	r1, [pc, #484]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e44:	4b74      	ldr	r3, [pc, #464]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	f023 0203 	bic.w	r2, r3, #3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	4971      	ldr	r1, [pc, #452]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e66:	4b6c      	ldr	r3, [pc, #432]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6c:	f023 020c 	bic.w	r2, r3, #12
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e74:	4968      	ldr	r1, [pc, #416]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e88:	4b63      	ldr	r3, [pc, #396]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e96:	4960      	ldr	r1, [pc, #384]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004eaa:	4b5b      	ldr	r3, [pc, #364]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb8:	4957      	ldr	r1, [pc, #348]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ecc:	4b52      	ldr	r3, [pc, #328]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eda:	494f      	ldr	r1, [pc, #316]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004eee:	4b4a      	ldr	r3, [pc, #296]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efc:	4946      	ldr	r1, [pc, #280]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f10:	4b41      	ldr	r3, [pc, #260]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1e:	493e      	ldr	r1, [pc, #248]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f32:	4b39      	ldr	r3, [pc, #228]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f40:	4935      	ldr	r1, [pc, #212]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f54:	4b30      	ldr	r3, [pc, #192]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f62:	492d      	ldr	r1, [pc, #180]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d011      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f76:	4b28      	ldr	r3, [pc, #160]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f84:	4924      	ldr	r1, [pc, #144]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f94:	d101      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f96:	2301      	movs	r3, #1
 8004f98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fb6:	4b18      	ldr	r3, [pc, #96]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc4:	4914      	ldr	r1, [pc, #80]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fd8:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fde:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe8:	490b      	ldr	r1, [pc, #44]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00f      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500c:	4902      	ldr	r1, [pc, #8]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005014:	e002      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00b      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005028:	4b8a      	ldr	r3, [pc, #552]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800502a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800502e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005038:	4986      	ldr	r1, [pc, #536]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00b      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800504c:	4b81      	ldr	r3, [pc, #516]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800504e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005052:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800505c:	497d      	ldr	r1, [pc, #500]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d006      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80d6 	beq.w	8005224 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005078:	4b76      	ldr	r3, [pc, #472]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a75      	ldr	r2, [pc, #468]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800507e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005084:	f7fd fa1a 	bl	80024bc <HAL_GetTick>
 8005088:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800508a:	e008      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800508c:	f7fd fa16 	bl	80024bc <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	; 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e195      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800509e:	4b6d      	ldr	r3, [pc, #436]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d021      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d11d      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050be:	4b65      	ldr	r3, [pc, #404]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c4:	0c1b      	lsrs	r3, r3, #16
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050cc:	4b61      	ldr	r3, [pc, #388]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d2:	0e1b      	lsrs	r3, r3, #24
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	019a      	lsls	r2, r3, #6
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	431a      	orrs	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	061b      	lsls	r3, r3, #24
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	071b      	lsls	r3, r3, #28
 80050f2:	4958      	ldr	r1, [pc, #352]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d004      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800510e:	d00a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005118:	2b00      	cmp	r3, #0
 800511a:	d02e      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005124:	d129      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005126:	4b4b      	ldr	r3, [pc, #300]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512c:	0c1b      	lsrs	r3, r3, #16
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005134:	4b47      	ldr	r3, [pc, #284]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800513a:	0f1b      	lsrs	r3, r3, #28
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	019a      	lsls	r2, r3, #6
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	041b      	lsls	r3, r3, #16
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	061b      	lsls	r3, r3, #24
 8005154:	431a      	orrs	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	071b      	lsls	r3, r3, #28
 800515a:	493e      	ldr	r1, [pc, #248]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005162:	4b3c      	ldr	r3, [pc, #240]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005168:	f023 021f 	bic.w	r2, r3, #31
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	3b01      	subs	r3, #1
 8005172:	4938      	ldr	r1, [pc, #224]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d01d      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005186:	4b33      	ldr	r3, [pc, #204]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800518c:	0e1b      	lsrs	r3, r3, #24
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005194:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800519a:	0f1b      	lsrs	r3, r3, #28
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	019a      	lsls	r2, r3, #6
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	431a      	orrs	r2, r3
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	061b      	lsls	r3, r3, #24
 80051b4:	431a      	orrs	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	071b      	lsls	r3, r3, #28
 80051ba:	4926      	ldr	r1, [pc, #152]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d011      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	019a      	lsls	r2, r3, #6
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	041b      	lsls	r3, r3, #16
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	061b      	lsls	r3, r3, #24
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	071b      	lsls	r3, r3, #28
 80051ea:	491a      	ldr	r1, [pc, #104]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051f2:	4b18      	ldr	r3, [pc, #96]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a17      	ldr	r2, [pc, #92]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051fe:	f7fd f95d 	bl	80024bc <HAL_GetTick>
 8005202:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005204:	e008      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005206:	f7fd f959 	bl	80024bc <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b64      	cmp	r3, #100	; 0x64
 8005212:	d901      	bls.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e0d8      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005218:	4b0e      	ldr	r3, [pc, #56]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	2b01      	cmp	r3, #1
 8005228:	f040 80ce 	bne.w	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800522c:	4b09      	ldr	r3, [pc, #36]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a08      	ldr	r2, [pc, #32]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005238:	f7fd f940 	bl	80024bc <HAL_GetTick>
 800523c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800523e:	e00b      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005240:	f7fd f93c 	bl	80024bc <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b64      	cmp	r3, #100	; 0x64
 800524c:	d904      	bls.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e0bb      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005258:	4b5e      	ldr	r3, [pc, #376]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005264:	d0ec      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005282:	2b00      	cmp	r3, #0
 8005284:	d02e      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d12a      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800528e:	4b51      	ldr	r3, [pc, #324]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800529c:	4b4d      	ldr	r3, [pc, #308]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a2:	0f1b      	lsrs	r3, r3, #28
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	019a      	lsls	r2, r3, #6
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	041b      	lsls	r3, r3, #16
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	061b      	lsls	r3, r3, #24
 80052bc:	431a      	orrs	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	071b      	lsls	r3, r3, #28
 80052c2:	4944      	ldr	r1, [pc, #272]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052ca:	4b42      	ldr	r3, [pc, #264]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	3b01      	subs	r3, #1
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	493d      	ldr	r1, [pc, #244]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d022      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052f8:	d11d      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052fa:	4b36      	ldr	r3, [pc, #216]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005300:	0e1b      	lsrs	r3, r3, #24
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005308:	4b32      	ldr	r3, [pc, #200]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530e:	0f1b      	lsrs	r3, r3, #28
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	019a      	lsls	r2, r3, #6
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	041b      	lsls	r3, r3, #16
 8005322:	431a      	orrs	r2, r3
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	061b      	lsls	r3, r3, #24
 8005328:	431a      	orrs	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	071b      	lsls	r3, r3, #28
 800532e:	4929      	ldr	r1, [pc, #164]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d028      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005342:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	0e1b      	lsrs	r3, r3, #24
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005350:	4b20      	ldr	r3, [pc, #128]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	019a      	lsls	r2, r3, #6
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	041b      	lsls	r3, r3, #16
 8005368:	431a      	orrs	r2, r3
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	061b      	lsls	r3, r3, #24
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	071b      	lsls	r3, r3, #28
 8005376:	4917      	ldr	r1, [pc, #92]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800537e:	4b15      	ldr	r3, [pc, #84]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	4911      	ldr	r1, [pc, #68]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005394:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a0e      	ldr	r2, [pc, #56]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800539a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a0:	f7fd f88c 	bl	80024bc <HAL_GetTick>
 80053a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053a8:	f7fd f888 	bl	80024bc <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	; 0x64
 80053b4:	d901      	bls.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e007      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053ba:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c6:	d1ef      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3720      	adds	r7, #32
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800

080053d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e049      	b.n	800547e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fc ff26 	bl	8002250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3304      	adds	r3, #4
 8005414:	4619      	mov	r1, r3
 8005416:	4610      	mov	r0, r2
 8005418:	f000 f9f6 	bl	8005808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	d001      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e054      	b.n	800554a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a26      	ldr	r2, [pc, #152]	; (8005558 <HAL_TIM_Base_Start_IT+0xd0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d022      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ca:	d01d      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a22      	ldr	r2, [pc, #136]	; (800555c <HAL_TIM_Base_Start_IT+0xd4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d018      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a21      	ldr	r2, [pc, #132]	; (8005560 <HAL_TIM_Base_Start_IT+0xd8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1f      	ldr	r2, [pc, #124]	; (8005564 <HAL_TIM_Base_Start_IT+0xdc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00e      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1e      	ldr	r2, [pc, #120]	; (8005568 <HAL_TIM_Base_Start_IT+0xe0>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d009      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a1c      	ldr	r2, [pc, #112]	; (800556c <HAL_TIM_Base_Start_IT+0xe4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x80>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <HAL_TIM_Base_Start_IT+0xe8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d115      	bne.n	8005534 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	4b19      	ldr	r3, [pc, #100]	; (8005574 <HAL_TIM_Base_Start_IT+0xec>)
 8005510:	4013      	ands	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b06      	cmp	r3, #6
 8005518:	d015      	beq.n	8005546 <HAL_TIM_Base_Start_IT+0xbe>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005520:	d011      	beq.n	8005546 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0201 	orr.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005532:	e008      	b.n	8005546 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0201 	orr.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e000      	b.n	8005548 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005546:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40010000 	.word	0x40010000
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40010400 	.word	0x40010400
 800556c:	40014000 	.word	0x40014000
 8005570:	40001800 	.word	0x40001800
 8005574:	00010007 	.word	0x00010007

08005578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	d122      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b02      	cmp	r3, #2
 800559a:	d11b      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0202 	mvn.w	r2, #2
 80055a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f905 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f8f7 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f908 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d122      	bne.n	8005628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d11b      	bne.n	8005628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0204 	mvn.w	r2, #4
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f8db 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f8cd 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f8de 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b08      	cmp	r3, #8
 8005634:	d122      	bne.n	800567c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b08      	cmp	r3, #8
 8005642:	d11b      	bne.n	800567c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0208 	mvn.w	r2, #8
 800564c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2204      	movs	r2, #4
 8005652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f8b1 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 8005668:	e005      	b.n	8005676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f8a3 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f8b4 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0310 	and.w	r3, r3, #16
 8005686:	2b10      	cmp	r3, #16
 8005688:	d122      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b10      	cmp	r3, #16
 8005696:	d11b      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0210 	mvn.w	r2, #16
 80056a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2208      	movs	r2, #8
 80056a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f887 	bl	80057ca <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f879 	bl	80057b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f88a 	bl	80057de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d10e      	bne.n	80056fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d107      	bne.n	80056fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0201 	mvn.w	r2, #1
 80056f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fc fcae 	bl	8002058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005706:	2b80      	cmp	r3, #128	; 0x80
 8005708:	d10e      	bne.n	8005728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005714:	2b80      	cmp	r3, #128	; 0x80
 8005716:	d107      	bne.n	8005728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f9a8 	bl	8005a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005736:	d10e      	bne.n	8005756 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d107      	bne.n	8005756 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800574e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f99b 	bl	8005a8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005760:	2b40      	cmp	r3, #64	; 0x40
 8005762:	d10e      	bne.n	8005782 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576e:	2b40      	cmp	r3, #64	; 0x40
 8005770:	d107      	bne.n	8005782 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800577a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f838 	bl	80057f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b20      	cmp	r3, #32
 800578e:	d10e      	bne.n	80057ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b20      	cmp	r3, #32
 800579c:	d107      	bne.n	80057ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f06f 0220 	mvn.w	r2, #32
 80057a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f95b 	bl	8005a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057ae:	bf00      	nop
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a40      	ldr	r2, [pc, #256]	; (800591c <TIM_Base_SetConfig+0x114>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d013      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005826:	d00f      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a3d      	ldr	r2, [pc, #244]	; (8005920 <TIM_Base_SetConfig+0x118>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00b      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a3c      	ldr	r2, [pc, #240]	; (8005924 <TIM_Base_SetConfig+0x11c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d007      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a3b      	ldr	r2, [pc, #236]	; (8005928 <TIM_Base_SetConfig+0x120>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3a      	ldr	r2, [pc, #232]	; (800592c <TIM_Base_SetConfig+0x124>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d108      	bne.n	800585a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2f      	ldr	r2, [pc, #188]	; (800591c <TIM_Base_SetConfig+0x114>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d02b      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005868:	d027      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2c      	ldr	r2, [pc, #176]	; (8005920 <TIM_Base_SetConfig+0x118>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d023      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2b      	ldr	r2, [pc, #172]	; (8005924 <TIM_Base_SetConfig+0x11c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01f      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2a      	ldr	r2, [pc, #168]	; (8005928 <TIM_Base_SetConfig+0x120>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01b      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a29      	ldr	r2, [pc, #164]	; (800592c <TIM_Base_SetConfig+0x124>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d017      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a28      	ldr	r2, [pc, #160]	; (8005930 <TIM_Base_SetConfig+0x128>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a27      	ldr	r2, [pc, #156]	; (8005934 <TIM_Base_SetConfig+0x12c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00f      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a26      	ldr	r2, [pc, #152]	; (8005938 <TIM_Base_SetConfig+0x130>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00b      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a25      	ldr	r2, [pc, #148]	; (800593c <TIM_Base_SetConfig+0x134>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d007      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a24      	ldr	r2, [pc, #144]	; (8005940 <TIM_Base_SetConfig+0x138>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d003      	beq.n	80058ba <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a23      	ldr	r2, [pc, #140]	; (8005944 <TIM_Base_SetConfig+0x13c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d108      	bne.n	80058cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a0a      	ldr	r2, [pc, #40]	; (800591c <TIM_Base_SetConfig+0x114>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_Base_SetConfig+0xf8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a0c      	ldr	r2, [pc, #48]	; (800592c <TIM_Base_SetConfig+0x124>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d103      	bne.n	8005908 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	615a      	str	r2, [r3, #20]
}
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40010000 	.word	0x40010000
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800
 8005928:	40000c00 	.word	0x40000c00
 800592c:	40010400 	.word	0x40010400
 8005930:	40014000 	.word	0x40014000
 8005934:	40014400 	.word	0x40014400
 8005938:	40014800 	.word	0x40014800
 800593c:	40001800 	.word	0x40001800
 8005940:	40001c00 	.word	0x40001c00
 8005944:	40002000 	.word	0x40002000

08005948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800595c:	2302      	movs	r3, #2
 800595e:	e06d      	b.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a30      	ldr	r2, [pc, #192]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d004      	beq.n	8005994 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a2f      	ldr	r2, [pc, #188]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d108      	bne.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800599a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a20      	ldr	r2, [pc, #128]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d022      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d2:	d01d      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1d      	ldr	r2, [pc, #116]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d018      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d013      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1a      	ldr	r2, [pc, #104]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00e      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a15      	ldr	r2, [pc, #84]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d009      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a16      	ldr	r2, [pc, #88]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10c      	bne.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	40010000 	.word	0x40010000
 8005a4c:	40010400 	.word	0x40010400
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40001800 	.word	0x40001800

08005a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e040      	b.n	8005b34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fc fc1a 	bl	80022fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2224      	movs	r2, #36	; 0x24
 8005acc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fbc2 	bl	8006268 <UART_SetConfig>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e022      	b.n	8005b34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fe1a 	bl	8006730 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fea1 	bl	8006874 <UART_CheckIdleState>
 8005b32:	4603      	mov	r3, r0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d171      	bne.n	8005c38 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_UART_Transmit+0x24>
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e06a      	b.n	8005c3a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2221      	movs	r2, #33	; 0x21
 8005b70:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b72:	f7fc fca3 	bl	80024bc <HAL_GetTick>
 8005b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	88fa      	ldrh	r2, [r7, #6]
 8005b7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	88fa      	ldrh	r2, [r7, #6]
 8005b84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b90:	d108      	bne.n	8005ba4 <HAL_UART_Transmit+0x68>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d104      	bne.n	8005ba4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	e003      	b.n	8005bac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bac:	e02c      	b.n	8005c08 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2180      	movs	r1, #128	; 0x80
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fea8 	bl	800690e <UART_WaitOnFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e038      	b.n	8005c3a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bdc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	3302      	adds	r3, #2
 8005be2:	61bb      	str	r3, [r7, #24]
 8005be4:	e007      	b.n	8005bf6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	781a      	ldrb	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1cc      	bne.n	8005bae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2140      	movs	r1, #64	; 0x40
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fe75 	bl	800690e <UART_WaitOnFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e005      	b.n	8005c3a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e000      	b.n	8005c3a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005c38:	2302      	movs	r3, #2
  }
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b0ba      	sub	sp, #232	; 0xe8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c72:	4013      	ands	r3, r2
 8005c74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d115      	bne.n	8005cac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00f      	beq.n	8005cac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 82ac 	beq.w	80061fa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4798      	blx	r3
      }
      return;
 8005caa:	e2a6      	b.n	80061fa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005cac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8117 	beq.w	8005ee4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005cc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005cc6:	4b85      	ldr	r3, [pc, #532]	; (8005edc <HAL_UART_IRQHandler+0x298>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 810a 	beq.w	8005ee4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d011      	beq.n	8005d00 <HAL_UART_IRQHandler+0xbc>
 8005cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00b      	beq.n	8005d00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2201      	movs	r2, #1
 8005cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf6:	f043 0201 	orr.w	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d011      	beq.n	8005d30 <HAL_UART_IRQHandler+0xec>
 8005d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00b      	beq.n	8005d30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d26:	f043 0204 	orr.w	r2, r3, #4
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d011      	beq.n	8005d60 <HAL_UART_IRQHandler+0x11c>
 8005d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00b      	beq.n	8005d60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2204      	movs	r2, #4
 8005d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d56:	f043 0202 	orr.w	r2, r3, #2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d017      	beq.n	8005d9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d105      	bne.n	8005d84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2208      	movs	r2, #8
 8005d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d92:	f043 0208 	orr.w	r2, r3, #8
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d012      	beq.n	8005dce <HAL_UART_IRQHandler+0x18a>
 8005da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00c      	beq.n	8005dce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc4:	f043 0220 	orr.w	r2, r3, #32
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8212 	beq.w	80061fe <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00d      	beq.n	8005e02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b40      	cmp	r3, #64	; 0x40
 8005e18:	d005      	beq.n	8005e26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d04f      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fe37 	bl	8006a9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b40      	cmp	r3, #64	; 0x40
 8005e38:	d141      	bne.n	8005ebe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e48:	e853 3f00 	ldrex	r3, [r3]
 8005e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3308      	adds	r3, #8
 8005e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1d9      	bne.n	8005e3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d013      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e92:	4a13      	ldr	r2, [pc, #76]	; (8005ee0 <HAL_UART_IRQHandler+0x29c>)
 8005e94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fd ff8f 	bl	8003dbe <HAL_DMA_Abort_IT>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d017      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb4:	e00f      	b.n	8005ed6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f9b6 	bl	8006228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ebc:	e00b      	b.n	8005ed6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f9b2 	bl	8006228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec4:	e007      	b.n	8005ed6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f9ae 	bl	8006228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005ed4:	e193      	b.n	80061fe <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed6:	bf00      	nop
    return;
 8005ed8:	e191      	b.n	80061fe <HAL_UART_IRQHandler+0x5ba>
 8005eda:	bf00      	nop
 8005edc:	04000120 	.word	0x04000120
 8005ee0:	08006b63 	.word	0x08006b63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	f040 814c 	bne.w	8006186 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef2:	f003 0310 	and.w	r3, r3, #16
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 8145 	beq.w	8006186 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 813e 	beq.w	8006186 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2210      	movs	r2, #16
 8005f10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1c:	2b40      	cmp	r3, #64	; 0x40
 8005f1e:	f040 80b6 	bne.w	800608e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 8165 	beq.w	8006202 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f42:	429a      	cmp	r2, r3
 8005f44:	f080 815d 	bcs.w	8006202 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5c:	f000 8086 	beq.w	800606c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1da      	bne.n	8005f60 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fbc:	f023 0301 	bic.w	r3, r3, #1
 8005fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e1      	bne.n	8005faa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3308      	adds	r3, #8
 8005fec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3308      	adds	r3, #8
 8006006:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800600a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800600c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006010:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e3      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800603a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800603c:	f023 0310 	bic.w	r3, r3, #16
 8006040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800604e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006050:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800605c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e4      	bne.n	800602c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006066:	4618      	mov	r0, r3
 8006068:	f7fd fe39 	bl	8003cde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800607e:	b29b      	uxth	r3, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	b29b      	uxth	r3, r3
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8d8 	bl	800623c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800608c:	e0b9      	b.n	8006202 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800609a:	b29b      	uxth	r3, r3
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 80ab 	beq.w	8006206 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80060b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80a6 	beq.w	8006206 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060dc:	647b      	str	r3, [r7, #68]	; 0x44
 80060de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e4      	bne.n	80060ba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3308      	adds	r3, #8
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	e853 3f00 	ldrex	r3, [r3]
 80060fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	f023 0301 	bic.w	r3, r3, #1
 8006106:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3308      	adds	r3, #8
 8006110:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006114:	633a      	str	r2, [r7, #48]	; 0x30
 8006116:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800611a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611c:	e841 2300 	strex	r3, r2, [r1]
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e3      	bne.n	80060f0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2220      	movs	r2, #32
 800612c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	60fb      	str	r3, [r7, #12]
   return(result);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f023 0310 	bic.w	r3, r3, #16
 8006150:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	69b9      	ldr	r1, [r7, #24]
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	617b      	str	r3, [r7, #20]
   return(result);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e4      	bne.n	800613c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2202      	movs	r2, #2
 8006176:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006178:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f85c 	bl	800623c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006184:	e03f      	b.n	8006206 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00e      	beq.n	80061b0 <HAL_UART_IRQHandler+0x56c>
 8006192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d008      	beq.n	80061b0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f853 	bl	8006254 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061ae:	e02d      	b.n	800620c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00e      	beq.n	80061da <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80061bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d008      	beq.n	80061da <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01c      	beq.n	800620a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
    }
    return;
 80061d8:	e017      	b.n	800620a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d012      	beq.n	800620c <HAL_UART_IRQHandler+0x5c8>
 80061e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00c      	beq.n	800620c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fccb 	bl	8006b8e <UART_EndTransmit_IT>
    return;
 80061f8:	e008      	b.n	800620c <HAL_UART_IRQHandler+0x5c8>
      return;
 80061fa:	bf00      	nop
 80061fc:	e006      	b.n	800620c <HAL_UART_IRQHandler+0x5c8>
    return;
 80061fe:	bf00      	nop
 8006200:	e004      	b.n	800620c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006202:	bf00      	nop
 8006204:	e002      	b.n	800620c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006206:	bf00      	nop
 8006208:	e000      	b.n	800620c <HAL_UART_IRQHandler+0x5c8>
    return;
 800620a:	bf00      	nop
  }

}
 800620c:	37e8      	adds	r7, #232	; 0xe8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop

08006214 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	4313      	orrs	r3, r2
 800628a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4ba6      	ldr	r3, [pc, #664]	; (800652c <UART_SetConfig+0x2c4>)
 8006294:	4013      	ands	r3, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6812      	ldr	r2, [r2, #0]
 800629a:	6979      	ldr	r1, [r7, #20]
 800629c:	430b      	orrs	r3, r1
 800629e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a94      	ldr	r2, [pc, #592]	; (8006530 <UART_SetConfig+0x2c8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d120      	bne.n	8006326 <UART_SetConfig+0xbe>
 80062e4:	4b93      	ldr	r3, [pc, #588]	; (8006534 <UART_SetConfig+0x2cc>)
 80062e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d816      	bhi.n	8006320 <UART_SetConfig+0xb8>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <UART_SetConfig+0x90>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	08006309 	.word	0x08006309
 80062fc:	08006315 	.word	0x08006315
 8006300:	0800630f 	.word	0x0800630f
 8006304:	0800631b 	.word	0x0800631b
 8006308:	2301      	movs	r3, #1
 800630a:	77fb      	strb	r3, [r7, #31]
 800630c:	e150      	b.n	80065b0 <UART_SetConfig+0x348>
 800630e:	2302      	movs	r3, #2
 8006310:	77fb      	strb	r3, [r7, #31]
 8006312:	e14d      	b.n	80065b0 <UART_SetConfig+0x348>
 8006314:	2304      	movs	r3, #4
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e14a      	b.n	80065b0 <UART_SetConfig+0x348>
 800631a:	2308      	movs	r3, #8
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e147      	b.n	80065b0 <UART_SetConfig+0x348>
 8006320:	2310      	movs	r3, #16
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e144      	b.n	80065b0 <UART_SetConfig+0x348>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a83      	ldr	r2, [pc, #524]	; (8006538 <UART_SetConfig+0x2d0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d132      	bne.n	8006396 <UART_SetConfig+0x12e>
 8006330:	4b80      	ldr	r3, [pc, #512]	; (8006534 <UART_SetConfig+0x2cc>)
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	2b0c      	cmp	r3, #12
 800633c:	d828      	bhi.n	8006390 <UART_SetConfig+0x128>
 800633e:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <UART_SetConfig+0xdc>)
 8006340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006344:	08006379 	.word	0x08006379
 8006348:	08006391 	.word	0x08006391
 800634c:	08006391 	.word	0x08006391
 8006350:	08006391 	.word	0x08006391
 8006354:	08006385 	.word	0x08006385
 8006358:	08006391 	.word	0x08006391
 800635c:	08006391 	.word	0x08006391
 8006360:	08006391 	.word	0x08006391
 8006364:	0800637f 	.word	0x0800637f
 8006368:	08006391 	.word	0x08006391
 800636c:	08006391 	.word	0x08006391
 8006370:	08006391 	.word	0x08006391
 8006374:	0800638b 	.word	0x0800638b
 8006378:	2300      	movs	r3, #0
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	e118      	b.n	80065b0 <UART_SetConfig+0x348>
 800637e:	2302      	movs	r3, #2
 8006380:	77fb      	strb	r3, [r7, #31]
 8006382:	e115      	b.n	80065b0 <UART_SetConfig+0x348>
 8006384:	2304      	movs	r3, #4
 8006386:	77fb      	strb	r3, [r7, #31]
 8006388:	e112      	b.n	80065b0 <UART_SetConfig+0x348>
 800638a:	2308      	movs	r3, #8
 800638c:	77fb      	strb	r3, [r7, #31]
 800638e:	e10f      	b.n	80065b0 <UART_SetConfig+0x348>
 8006390:	2310      	movs	r3, #16
 8006392:	77fb      	strb	r3, [r7, #31]
 8006394:	e10c      	b.n	80065b0 <UART_SetConfig+0x348>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a68      	ldr	r2, [pc, #416]	; (800653c <UART_SetConfig+0x2d4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d120      	bne.n	80063e2 <UART_SetConfig+0x17a>
 80063a0:	4b64      	ldr	r3, [pc, #400]	; (8006534 <UART_SetConfig+0x2cc>)
 80063a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063aa:	2b30      	cmp	r3, #48	; 0x30
 80063ac:	d013      	beq.n	80063d6 <UART_SetConfig+0x16e>
 80063ae:	2b30      	cmp	r3, #48	; 0x30
 80063b0:	d814      	bhi.n	80063dc <UART_SetConfig+0x174>
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	d009      	beq.n	80063ca <UART_SetConfig+0x162>
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d810      	bhi.n	80063dc <UART_SetConfig+0x174>
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <UART_SetConfig+0x15c>
 80063be:	2b10      	cmp	r3, #16
 80063c0:	d006      	beq.n	80063d0 <UART_SetConfig+0x168>
 80063c2:	e00b      	b.n	80063dc <UART_SetConfig+0x174>
 80063c4:	2300      	movs	r3, #0
 80063c6:	77fb      	strb	r3, [r7, #31]
 80063c8:	e0f2      	b.n	80065b0 <UART_SetConfig+0x348>
 80063ca:	2302      	movs	r3, #2
 80063cc:	77fb      	strb	r3, [r7, #31]
 80063ce:	e0ef      	b.n	80065b0 <UART_SetConfig+0x348>
 80063d0:	2304      	movs	r3, #4
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e0ec      	b.n	80065b0 <UART_SetConfig+0x348>
 80063d6:	2308      	movs	r3, #8
 80063d8:	77fb      	strb	r3, [r7, #31]
 80063da:	e0e9      	b.n	80065b0 <UART_SetConfig+0x348>
 80063dc:	2310      	movs	r3, #16
 80063de:	77fb      	strb	r3, [r7, #31]
 80063e0:	e0e6      	b.n	80065b0 <UART_SetConfig+0x348>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a56      	ldr	r2, [pc, #344]	; (8006540 <UART_SetConfig+0x2d8>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d120      	bne.n	800642e <UART_SetConfig+0x1c6>
 80063ec:	4b51      	ldr	r3, [pc, #324]	; (8006534 <UART_SetConfig+0x2cc>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063f6:	2bc0      	cmp	r3, #192	; 0xc0
 80063f8:	d013      	beq.n	8006422 <UART_SetConfig+0x1ba>
 80063fa:	2bc0      	cmp	r3, #192	; 0xc0
 80063fc:	d814      	bhi.n	8006428 <UART_SetConfig+0x1c0>
 80063fe:	2b80      	cmp	r3, #128	; 0x80
 8006400:	d009      	beq.n	8006416 <UART_SetConfig+0x1ae>
 8006402:	2b80      	cmp	r3, #128	; 0x80
 8006404:	d810      	bhi.n	8006428 <UART_SetConfig+0x1c0>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <UART_SetConfig+0x1a8>
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	d006      	beq.n	800641c <UART_SetConfig+0x1b4>
 800640e:	e00b      	b.n	8006428 <UART_SetConfig+0x1c0>
 8006410:	2300      	movs	r3, #0
 8006412:	77fb      	strb	r3, [r7, #31]
 8006414:	e0cc      	b.n	80065b0 <UART_SetConfig+0x348>
 8006416:	2302      	movs	r3, #2
 8006418:	77fb      	strb	r3, [r7, #31]
 800641a:	e0c9      	b.n	80065b0 <UART_SetConfig+0x348>
 800641c:	2304      	movs	r3, #4
 800641e:	77fb      	strb	r3, [r7, #31]
 8006420:	e0c6      	b.n	80065b0 <UART_SetConfig+0x348>
 8006422:	2308      	movs	r3, #8
 8006424:	77fb      	strb	r3, [r7, #31]
 8006426:	e0c3      	b.n	80065b0 <UART_SetConfig+0x348>
 8006428:	2310      	movs	r3, #16
 800642a:	77fb      	strb	r3, [r7, #31]
 800642c:	e0c0      	b.n	80065b0 <UART_SetConfig+0x348>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a44      	ldr	r2, [pc, #272]	; (8006544 <UART_SetConfig+0x2dc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d125      	bne.n	8006484 <UART_SetConfig+0x21c>
 8006438:	4b3e      	ldr	r3, [pc, #248]	; (8006534 <UART_SetConfig+0x2cc>)
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006446:	d017      	beq.n	8006478 <UART_SetConfig+0x210>
 8006448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800644c:	d817      	bhi.n	800647e <UART_SetConfig+0x216>
 800644e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006452:	d00b      	beq.n	800646c <UART_SetConfig+0x204>
 8006454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006458:	d811      	bhi.n	800647e <UART_SetConfig+0x216>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <UART_SetConfig+0x1fe>
 800645e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006462:	d006      	beq.n	8006472 <UART_SetConfig+0x20a>
 8006464:	e00b      	b.n	800647e <UART_SetConfig+0x216>
 8006466:	2300      	movs	r3, #0
 8006468:	77fb      	strb	r3, [r7, #31]
 800646a:	e0a1      	b.n	80065b0 <UART_SetConfig+0x348>
 800646c:	2302      	movs	r3, #2
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e09e      	b.n	80065b0 <UART_SetConfig+0x348>
 8006472:	2304      	movs	r3, #4
 8006474:	77fb      	strb	r3, [r7, #31]
 8006476:	e09b      	b.n	80065b0 <UART_SetConfig+0x348>
 8006478:	2308      	movs	r3, #8
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e098      	b.n	80065b0 <UART_SetConfig+0x348>
 800647e:	2310      	movs	r3, #16
 8006480:	77fb      	strb	r3, [r7, #31]
 8006482:	e095      	b.n	80065b0 <UART_SetConfig+0x348>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a2f      	ldr	r2, [pc, #188]	; (8006548 <UART_SetConfig+0x2e0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d125      	bne.n	80064da <UART_SetConfig+0x272>
 800648e:	4b29      	ldr	r3, [pc, #164]	; (8006534 <UART_SetConfig+0x2cc>)
 8006490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006494:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006498:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800649c:	d017      	beq.n	80064ce <UART_SetConfig+0x266>
 800649e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064a2:	d817      	bhi.n	80064d4 <UART_SetConfig+0x26c>
 80064a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a8:	d00b      	beq.n	80064c2 <UART_SetConfig+0x25a>
 80064aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ae:	d811      	bhi.n	80064d4 <UART_SetConfig+0x26c>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <UART_SetConfig+0x254>
 80064b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b8:	d006      	beq.n	80064c8 <UART_SetConfig+0x260>
 80064ba:	e00b      	b.n	80064d4 <UART_SetConfig+0x26c>
 80064bc:	2301      	movs	r3, #1
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e076      	b.n	80065b0 <UART_SetConfig+0x348>
 80064c2:	2302      	movs	r3, #2
 80064c4:	77fb      	strb	r3, [r7, #31]
 80064c6:	e073      	b.n	80065b0 <UART_SetConfig+0x348>
 80064c8:	2304      	movs	r3, #4
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e070      	b.n	80065b0 <UART_SetConfig+0x348>
 80064ce:	2308      	movs	r3, #8
 80064d0:	77fb      	strb	r3, [r7, #31]
 80064d2:	e06d      	b.n	80065b0 <UART_SetConfig+0x348>
 80064d4:	2310      	movs	r3, #16
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e06a      	b.n	80065b0 <UART_SetConfig+0x348>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1b      	ldr	r2, [pc, #108]	; (800654c <UART_SetConfig+0x2e4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d138      	bne.n	8006556 <UART_SetConfig+0x2ee>
 80064e4:	4b13      	ldr	r3, [pc, #76]	; (8006534 <UART_SetConfig+0x2cc>)
 80064e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80064ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064f2:	d017      	beq.n	8006524 <UART_SetConfig+0x2bc>
 80064f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064f8:	d82a      	bhi.n	8006550 <UART_SetConfig+0x2e8>
 80064fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064fe:	d00b      	beq.n	8006518 <UART_SetConfig+0x2b0>
 8006500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006504:	d824      	bhi.n	8006550 <UART_SetConfig+0x2e8>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <UART_SetConfig+0x2aa>
 800650a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800650e:	d006      	beq.n	800651e <UART_SetConfig+0x2b6>
 8006510:	e01e      	b.n	8006550 <UART_SetConfig+0x2e8>
 8006512:	2300      	movs	r3, #0
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e04b      	b.n	80065b0 <UART_SetConfig+0x348>
 8006518:	2302      	movs	r3, #2
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e048      	b.n	80065b0 <UART_SetConfig+0x348>
 800651e:	2304      	movs	r3, #4
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e045      	b.n	80065b0 <UART_SetConfig+0x348>
 8006524:	2308      	movs	r3, #8
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e042      	b.n	80065b0 <UART_SetConfig+0x348>
 800652a:	bf00      	nop
 800652c:	efff69f3 	.word	0xefff69f3
 8006530:	40011000 	.word	0x40011000
 8006534:	40023800 	.word	0x40023800
 8006538:	40004400 	.word	0x40004400
 800653c:	40004800 	.word	0x40004800
 8006540:	40004c00 	.word	0x40004c00
 8006544:	40005000 	.word	0x40005000
 8006548:	40011400 	.word	0x40011400
 800654c:	40007800 	.word	0x40007800
 8006550:	2310      	movs	r3, #16
 8006552:	77fb      	strb	r3, [r7, #31]
 8006554:	e02c      	b.n	80065b0 <UART_SetConfig+0x348>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a72      	ldr	r2, [pc, #456]	; (8006724 <UART_SetConfig+0x4bc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d125      	bne.n	80065ac <UART_SetConfig+0x344>
 8006560:	4b71      	ldr	r3, [pc, #452]	; (8006728 <UART_SetConfig+0x4c0>)
 8006562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006566:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800656a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800656e:	d017      	beq.n	80065a0 <UART_SetConfig+0x338>
 8006570:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006574:	d817      	bhi.n	80065a6 <UART_SetConfig+0x33e>
 8006576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800657a:	d00b      	beq.n	8006594 <UART_SetConfig+0x32c>
 800657c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006580:	d811      	bhi.n	80065a6 <UART_SetConfig+0x33e>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <UART_SetConfig+0x326>
 8006586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800658a:	d006      	beq.n	800659a <UART_SetConfig+0x332>
 800658c:	e00b      	b.n	80065a6 <UART_SetConfig+0x33e>
 800658e:	2300      	movs	r3, #0
 8006590:	77fb      	strb	r3, [r7, #31]
 8006592:	e00d      	b.n	80065b0 <UART_SetConfig+0x348>
 8006594:	2302      	movs	r3, #2
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e00a      	b.n	80065b0 <UART_SetConfig+0x348>
 800659a:	2304      	movs	r3, #4
 800659c:	77fb      	strb	r3, [r7, #31]
 800659e:	e007      	b.n	80065b0 <UART_SetConfig+0x348>
 80065a0:	2308      	movs	r3, #8
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e004      	b.n	80065b0 <UART_SetConfig+0x348>
 80065a6:	2310      	movs	r3, #16
 80065a8:	77fb      	strb	r3, [r7, #31]
 80065aa:	e001      	b.n	80065b0 <UART_SetConfig+0x348>
 80065ac:	2310      	movs	r3, #16
 80065ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b8:	d15b      	bne.n	8006672 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80065ba:	7ffb      	ldrb	r3, [r7, #31]
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d828      	bhi.n	8006612 <UART_SetConfig+0x3aa>
 80065c0:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <UART_SetConfig+0x360>)
 80065c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c6:	bf00      	nop
 80065c8:	080065ed 	.word	0x080065ed
 80065cc:	080065f5 	.word	0x080065f5
 80065d0:	080065fd 	.word	0x080065fd
 80065d4:	08006613 	.word	0x08006613
 80065d8:	08006603 	.word	0x08006603
 80065dc:	08006613 	.word	0x08006613
 80065e0:	08006613 	.word	0x08006613
 80065e4:	08006613 	.word	0x08006613
 80065e8:	0800660b 	.word	0x0800660b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ec:	f7fe faa4 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 80065f0:	61b8      	str	r0, [r7, #24]
        break;
 80065f2:	e013      	b.n	800661c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f4:	f7fe fab4 	bl	8004b60 <HAL_RCC_GetPCLK2Freq>
 80065f8:	61b8      	str	r0, [r7, #24]
        break;
 80065fa:	e00f      	b.n	800661c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065fc:	4b4b      	ldr	r3, [pc, #300]	; (800672c <UART_SetConfig+0x4c4>)
 80065fe:	61bb      	str	r3, [r7, #24]
        break;
 8006600:	e00c      	b.n	800661c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006602:	f7fe f9c7 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8006606:	61b8      	str	r0, [r7, #24]
        break;
 8006608:	e008      	b.n	800661c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800660a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660e:	61bb      	str	r3, [r7, #24]
        break;
 8006610:	e004      	b.n	800661c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	77bb      	strb	r3, [r7, #30]
        break;
 800661a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d074      	beq.n	800670c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	005a      	lsls	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	085b      	lsrs	r3, r3, #1
 800662c:	441a      	add	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	fbb2 f3f3 	udiv	r3, r2, r3
 8006636:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	2b0f      	cmp	r3, #15
 800663c:	d916      	bls.n	800666c <UART_SetConfig+0x404>
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006644:	d212      	bcs.n	800666c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	b29b      	uxth	r3, r3
 800664a:	f023 030f 	bic.w	r3, r3, #15
 800664e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	085b      	lsrs	r3, r3, #1
 8006654:	b29b      	uxth	r3, r3
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	b29a      	uxth	r2, r3
 800665c:	89fb      	ldrh	r3, [r7, #14]
 800665e:	4313      	orrs	r3, r2
 8006660:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	89fa      	ldrh	r2, [r7, #14]
 8006668:	60da      	str	r2, [r3, #12]
 800666a:	e04f      	b.n	800670c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	77bb      	strb	r3, [r7, #30]
 8006670:	e04c      	b.n	800670c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006672:	7ffb      	ldrb	r3, [r7, #31]
 8006674:	2b08      	cmp	r3, #8
 8006676:	d828      	bhi.n	80066ca <UART_SetConfig+0x462>
 8006678:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <UART_SetConfig+0x418>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	080066a5 	.word	0x080066a5
 8006684:	080066ad 	.word	0x080066ad
 8006688:	080066b5 	.word	0x080066b5
 800668c:	080066cb 	.word	0x080066cb
 8006690:	080066bb 	.word	0x080066bb
 8006694:	080066cb 	.word	0x080066cb
 8006698:	080066cb 	.word	0x080066cb
 800669c:	080066cb 	.word	0x080066cb
 80066a0:	080066c3 	.word	0x080066c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066a4:	f7fe fa48 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 80066a8:	61b8      	str	r0, [r7, #24]
        break;
 80066aa:	e013      	b.n	80066d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066ac:	f7fe fa58 	bl	8004b60 <HAL_RCC_GetPCLK2Freq>
 80066b0:	61b8      	str	r0, [r7, #24]
        break;
 80066b2:	e00f      	b.n	80066d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b4:	4b1d      	ldr	r3, [pc, #116]	; (800672c <UART_SetConfig+0x4c4>)
 80066b6:	61bb      	str	r3, [r7, #24]
        break;
 80066b8:	e00c      	b.n	80066d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ba:	f7fe f96b 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 80066be:	61b8      	str	r0, [r7, #24]
        break;
 80066c0:	e008      	b.n	80066d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066c6:	61bb      	str	r3, [r7, #24]
        break;
 80066c8:	e004      	b.n	80066d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	77bb      	strb	r3, [r7, #30]
        break;
 80066d2:	bf00      	nop
    }

    if (pclk != 0U)
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d018      	beq.n	800670c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	085a      	lsrs	r2, r3, #1
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	441a      	add	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b0f      	cmp	r3, #15
 80066f2:	d909      	bls.n	8006708 <UART_SetConfig+0x4a0>
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fa:	d205      	bcs.n	8006708 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	b29a      	uxth	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	60da      	str	r2, [r3, #12]
 8006706:	e001      	b.n	800670c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006718:	7fbb      	ldrb	r3, [r7, #30]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3720      	adds	r7, #32
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	40007c00 	.word	0x40007c00
 8006728:	40023800 	.word	0x40023800
 800672c:	00f42400 	.word	0x00f42400

08006730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	f003 0310 	and.w	r3, r3, #16
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01a      	beq.n	8006846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800682e:	d10a      	bne.n	8006846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af02      	add	r7, sp, #8
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006884:	f7fb fe1a 	bl	80024bc <HAL_GetTick>
 8006888:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b08      	cmp	r3, #8
 8006896:	d10e      	bne.n	80068b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f831 	bl	800690e <UART_WaitOnFlagUntilTimeout>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e027      	b.n	8006906 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	d10e      	bne.n	80068e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f81b 	bl	800690e <UART_WaitOnFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e011      	b.n	8006906 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2220      	movs	r2, #32
 80068e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b09c      	sub	sp, #112	; 0x70
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	603b      	str	r3, [r7, #0]
 800691a:	4613      	mov	r3, r2
 800691c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800691e:	e0a7      	b.n	8006a70 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006926:	f000 80a3 	beq.w	8006a70 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692a:	f7fb fdc7 	bl	80024bc <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006936:	429a      	cmp	r2, r3
 8006938:	d302      	bcc.n	8006940 <UART_WaitOnFlagUntilTimeout+0x32>
 800693a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800693c:	2b00      	cmp	r3, #0
 800693e:	d13f      	bne.n	80069c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006954:	667b      	str	r3, [r7, #100]	; 0x64
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800695e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006960:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006964:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800696c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e6      	bne.n	8006940 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3308      	adds	r3, #8
 8006978:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	f023 0301 	bic.w	r3, r3, #1
 8006988:	663b      	str	r3, [r7, #96]	; 0x60
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3308      	adds	r3, #8
 8006990:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006992:	64ba      	str	r2, [r7, #72]	; 0x48
 8006994:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e5      	bne.n	8006972 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2220      	movs	r2, #32
 80069aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e068      	b.n	8006a92 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d050      	beq.n	8006a70 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069dc:	d148      	bne.n	8006a70 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	e853 3f00 	ldrex	r3, [r3]
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a06:	637b      	str	r3, [r7, #52]	; 0x34
 8006a08:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a0e:	e841 2300 	strex	r3, r2, [r1]
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1e6      	bne.n	80069e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3308      	adds	r3, #8
 8006a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	613b      	str	r3, [r7, #16]
   return(result);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f023 0301 	bic.w	r3, r3, #1
 8006a30:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3308      	adds	r3, #8
 8006a38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a3a:	623a      	str	r2, [r7, #32]
 8006a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3e:	69f9      	ldr	r1, [r7, #28]
 8006a40:	6a3a      	ldr	r2, [r7, #32]
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1e5      	bne.n	8006a1a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2220      	movs	r2, #32
 8006a52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e010      	b.n	8006a92 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69da      	ldr	r2, [r3, #28]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	bf0c      	ite	eq
 8006a80:	2301      	moveq	r3, #1
 8006a82:	2300      	movne	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	461a      	mov	r2, r3
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	f43f af48 	beq.w	8006920 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3770      	adds	r7, #112	; 0x70
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b095      	sub	sp, #84	; 0x54
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ac2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e6      	bne.n	8006aa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3308      	adds	r3, #8
 8006af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e5      	bne.n	8006ad4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d118      	bne.n	8006b42 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f023 0310 	bic.w	r3, r3, #16
 8006b24:	647b      	str	r3, [r7, #68]	; 0x44
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	6979      	ldr	r1, [r7, #20]
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e6      	bne.n	8006b10 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b56:	bf00      	nop
 8006b58:	3754      	adds	r7, #84	; 0x54
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f7ff fb51 	bl	8006228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b86:	bf00      	nop
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b088      	sub	sp, #32
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006baa:	61fb      	str	r3, [r7, #28]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	61bb      	str	r3, [r7, #24]
 8006bb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	6979      	ldr	r1, [r7, #20]
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	e841 2300 	strex	r3, r2, [r1]
 8006bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1e6      	bne.n	8006b96 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff fb1d 	bl	8006214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bda:	bf00      	nop
 8006bdc:	3720      	adds	r7, #32
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <__libc_init_array>:
 8006be4:	b570      	push	{r4, r5, r6, lr}
 8006be6:	4d0d      	ldr	r5, [pc, #52]	; (8006c1c <__libc_init_array+0x38>)
 8006be8:	4c0d      	ldr	r4, [pc, #52]	; (8006c20 <__libc_init_array+0x3c>)
 8006bea:	1b64      	subs	r4, r4, r5
 8006bec:	10a4      	asrs	r4, r4, #2
 8006bee:	2600      	movs	r6, #0
 8006bf0:	42a6      	cmp	r6, r4
 8006bf2:	d109      	bne.n	8006c08 <__libc_init_array+0x24>
 8006bf4:	4d0b      	ldr	r5, [pc, #44]	; (8006c24 <__libc_init_array+0x40>)
 8006bf6:	4c0c      	ldr	r4, [pc, #48]	; (8006c28 <__libc_init_array+0x44>)
 8006bf8:	f000 f864 	bl	8006cc4 <_init>
 8006bfc:	1b64      	subs	r4, r4, r5
 8006bfe:	10a4      	asrs	r4, r4, #2
 8006c00:	2600      	movs	r6, #0
 8006c02:	42a6      	cmp	r6, r4
 8006c04:	d105      	bne.n	8006c12 <__libc_init_array+0x2e>
 8006c06:	bd70      	pop	{r4, r5, r6, pc}
 8006c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c0c:	4798      	blx	r3
 8006c0e:	3601      	adds	r6, #1
 8006c10:	e7ee      	b.n	8006bf0 <__libc_init_array+0xc>
 8006c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c16:	4798      	blx	r3
 8006c18:	3601      	adds	r6, #1
 8006c1a:	e7f2      	b.n	8006c02 <__libc_init_array+0x1e>
 8006c1c:	080072d8 	.word	0x080072d8
 8006c20:	080072d8 	.word	0x080072d8
 8006c24:	080072d8 	.word	0x080072d8
 8006c28:	080072dc 	.word	0x080072dc

08006c2c <memset>:
 8006c2c:	4402      	add	r2, r0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d100      	bne.n	8006c36 <memset+0xa>
 8006c34:	4770      	bx	lr
 8006c36:	f803 1b01 	strb.w	r1, [r3], #1
 8006c3a:	e7f9      	b.n	8006c30 <memset+0x4>

08006c3c <__utoa>:
 8006c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c3e:	4c1f      	ldr	r4, [pc, #124]	; (8006cbc <__utoa+0x80>)
 8006c40:	b08b      	sub	sp, #44	; 0x2c
 8006c42:	4605      	mov	r5, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	466e      	mov	r6, sp
 8006c48:	f104 0c20 	add.w	ip, r4, #32
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	6861      	ldr	r1, [r4, #4]
 8006c50:	4637      	mov	r7, r6
 8006c52:	c703      	stmia	r7!, {r0, r1}
 8006c54:	3408      	adds	r4, #8
 8006c56:	4564      	cmp	r4, ip
 8006c58:	463e      	mov	r6, r7
 8006c5a:	d1f7      	bne.n	8006c4c <__utoa+0x10>
 8006c5c:	7921      	ldrb	r1, [r4, #4]
 8006c5e:	7139      	strb	r1, [r7, #4]
 8006c60:	1e91      	subs	r1, r2, #2
 8006c62:	6820      	ldr	r0, [r4, #0]
 8006c64:	6038      	str	r0, [r7, #0]
 8006c66:	2922      	cmp	r1, #34	; 0x22
 8006c68:	f04f 0100 	mov.w	r1, #0
 8006c6c:	d904      	bls.n	8006c78 <__utoa+0x3c>
 8006c6e:	7019      	strb	r1, [r3, #0]
 8006c70:	460b      	mov	r3, r1
 8006c72:	4618      	mov	r0, r3
 8006c74:	b00b      	add	sp, #44	; 0x2c
 8006c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c78:	1e58      	subs	r0, r3, #1
 8006c7a:	4684      	mov	ip, r0
 8006c7c:	fbb5 f7f2 	udiv	r7, r5, r2
 8006c80:	fb02 5617 	mls	r6, r2, r7, r5
 8006c84:	3628      	adds	r6, #40	; 0x28
 8006c86:	446e      	add	r6, sp
 8006c88:	460c      	mov	r4, r1
 8006c8a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006c8e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006c92:	462e      	mov	r6, r5
 8006c94:	42b2      	cmp	r2, r6
 8006c96:	f101 0101 	add.w	r1, r1, #1
 8006c9a:	463d      	mov	r5, r7
 8006c9c:	d9ee      	bls.n	8006c7c <__utoa+0x40>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	545a      	strb	r2, [r3, r1]
 8006ca2:	1919      	adds	r1, r3, r4
 8006ca4:	1aa5      	subs	r5, r4, r2
 8006ca6:	42aa      	cmp	r2, r5
 8006ca8:	dae3      	bge.n	8006c72 <__utoa+0x36>
 8006caa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006cae:	780e      	ldrb	r6, [r1, #0]
 8006cb0:	7006      	strb	r6, [r0, #0]
 8006cb2:	3201      	adds	r2, #1
 8006cb4:	f801 5901 	strb.w	r5, [r1], #-1
 8006cb8:	e7f4      	b.n	8006ca4 <__utoa+0x68>
 8006cba:	bf00      	nop
 8006cbc:	080072a8 	.word	0x080072a8

08006cc0 <utoa>:
 8006cc0:	f7ff bfbc 	b.w	8006c3c <__utoa>

08006cc4 <_init>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	bf00      	nop
 8006cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cca:	bc08      	pop	{r3}
 8006ccc:	469e      	mov	lr, r3
 8006cce:	4770      	bx	lr

08006cd0 <_fini>:
 8006cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd2:	bf00      	nop
 8006cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd6:	bc08      	pop	{r3}
 8006cd8:	469e      	mov	lr, r3
 8006cda:	4770      	bx	lr
