
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008058  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  08008250  08008250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a50  08008a50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a50  08008a50  00018a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a58  08008a58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a58  08008a58  00018a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a5c  08008a5c  00018a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000000c  08008a6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08008a6c  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5b5  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d2f  00000000  00000000  0003a5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  0003e320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  0003f5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9db  00000000  00000000  00040688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad94  00000000  00000000  0006d063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108d91  00000000  00000000  00087df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190b88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a84  00000000  00000000  00190bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08008238 	.word	0x08008238

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08008238 	.word	0x08008238

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data, uint8_t dlc)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
	uint8_t Reg = data[0];
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	733b      	strb	r3, [r7, #12]
	uint16_t speed = 0, strom;
 800055e:	2300      	movs	r3, #0
 8000560:	817b      	strh	r3, [r7, #10]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000562:	7b3b      	ldrb	r3, [r7, #12]
 8000564:	2bd8      	cmp	r3, #216	; 0xd8
 8000566:	f000 80be 	beq.w	80006e6 <BAMOCAN_ID+0x19a>
 800056a:	2bd8      	cmp	r3, #216	; 0xd8
 800056c:	f300 8100 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000570:	2ba8      	cmp	r3, #168	; 0xa8
 8000572:	d012      	beq.n	800059a <BAMOCAN_ID+0x4e>
 8000574:	2ba8      	cmp	r3, #168	; 0xa8
 8000576:	f300 80fb 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800057a:	2b8f      	cmp	r3, #143	; 0x8f
 800057c:	d077      	beq.n	800066e <BAMOCAN_ID+0x122>
 800057e:	2b8f      	cmp	r3, #143	; 0x8f
 8000580:	f300 80f6 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 8000584:	2b5f      	cmp	r3, #95	; 0x5f
 8000586:	d025      	beq.n	80005d4 <BAMOCAN_ID+0x88>
 8000588:	2b5f      	cmp	r3, #95	; 0x5f
 800058a:	f300 80f1 	bgt.w	8000770 <BAMOCAN_ID+0x224>
 800058e:	2b1b      	cmp	r3, #27
 8000590:	f000 80d4 	beq.w	800073c <BAMOCAN_ID+0x1f0>
 8000594:	2b40      	cmp	r3, #64	; 0x40
 8000596:	d037      	beq.n	8000608 <BAMOCAN_ID+0xbc>
 8000598:	e0ea      	b.n	8000770 <BAMOCAN_ID+0x224>
	{
		// Drehzahl vom Bamocar bekommen
		case BAMOCAR_REG_N_ACT_FILTER:
			speed = ((data[2]<<8) + data[1]);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3302      	adds	r3, #2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4413      	add	r3, r2
 80005b0:	817b      	strh	r3, [r7, #10]
			motor1.Drehzahl = speed;
 80005b2:	4a74      	ldr	r2, [pc, #464]	; (8000784 <BAMOCAN_ID+0x238>)
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG_BAMOCAR
			uartTransmit("Motordrehzahl\n", 14);
 80005b8:	210e      	movs	r1, #14
 80005ba:	4873      	ldr	r0, [pc, #460]	; (8000788 <BAMOCAN_ID+0x23c>)
 80005bc:	f000 f900 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(speed, 10);
 80005c0:	897b      	ldrh	r3, [r7, #10]
 80005c2:	210a      	movs	r1, #10
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f90f 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005ca:	2101      	movs	r1, #1
 80005cc:	486f      	ldr	r0, [pc, #444]	; (800078c <BAMOCAN_ID+0x240>)
 80005ce:	f000 f8f7 	bl	80007c0 <uartTransmit>
#endif
			break;
 80005d2:	e0d2      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Stromwert von Bamocar bekommen
		case BAMOCAR_REG_I_ACT_FILTER:
			strom = ((data[2]<<8) + data[1]);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3302      	adds	r3, #2
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	021b      	lsls	r3, r3, #8
 80005de:	b29a      	uxth	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4413      	add	r3, r2
 80005ea:	813b      	strh	r3, [r7, #8]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motorstrom\n", 11);
 80005ec:	210b      	movs	r1, #11
 80005ee:	4868      	ldr	r0, [pc, #416]	; (8000790 <BAMOCAN_ID+0x244>)
 80005f0:	f000 f8e6 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(strom, 10);
 80005f4:	893b      	ldrh	r3, [r7, #8]
 80005f6:	210a      	movs	r1, #10
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f8f5 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	4862      	ldr	r0, [pc, #392]	; (800078c <BAMOCAN_ID+0x240>)
 8000602:	f000 f8dd 	bl	80007c0 <uartTransmit>
#endif

			break;
 8000606:	e0b8      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Statusregister von Bamocar bekommen
		case BAMOCAR_REG_STATUS:
			bamocar_stat.status1 = ((data[4] << 24) + (data[3] << 16) + (data[2] << 8) + data[1]);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3304      	adds	r3, #4
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	061a      	lsls	r2, r3, #24
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3303      	adds	r3, #3
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	041b      	lsls	r3, r3, #16
 8000618:	441a      	add	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	3302      	adds	r3, #2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	4413      	add	r3, r2
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	3201      	adds	r2, #1
 8000628:	7812      	ldrb	r2, [r2, #0]
 800062a:	4413      	add	r3, r2
 800062c:	461a      	mov	r2, r3
 800062e:	4b59      	ldr	r3, [pc, #356]	; (8000794 <BAMOCAN_ID+0x248>)
 8000630:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Status\n", 15);
 8000632:	210f      	movs	r1, #15
 8000634:	4858      	ldr	r0, [pc, #352]	; (8000798 <BAMOCAN_ID+0x24c>)
 8000636:	f000 f8c3 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800063a:	2304      	movs	r3, #4
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e00e      	b.n	800065e <BAMOCAN_ID+0x112>
			{
				uartTransmitNumber(bamocar_stat.status[i-1], 16);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a53      	ldr	r2, [pc, #332]	; (8000794 <BAMOCAN_ID+0x248>)
 8000646:	5cd3      	ldrb	r3, [r2, r3]
 8000648:	2110      	movs	r1, #16
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f8cc 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000650:	2101      	movs	r1, #1
 8000652:	4852      	ldr	r0, [pc, #328]	; (800079c <BAMOCAN_ID+0x250>)
 8000654:	f000 f8b4 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	3b01      	subs	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1ed      	bne.n	8000640 <BAMOCAN_ID+0xf4>
			}
			uartTransmit("\n", 1);
 8000664:	2101      	movs	r1, #1
 8000666:	4849      	ldr	r0, [pc, #292]	; (800078c <BAMOCAN_ID+0x240>)
 8000668:	f000 f8aa 	bl	80007c0 <uartTransmit>
#endif

			break;
 800066c:	e085      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Errorregister von Bamocar bekommen
		case BAMOCAR_REG_ERROR:
			bamocar_error.error1 = ((data[2] << 8) + data[1]);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3302      	adds	r3, #2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b29a      	uxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3301      	adds	r3, #1
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	4413      	add	r3, r2
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <BAMOCAN_ID+0x254>)
 8000688:	801a      	strh	r2, [r3, #0]
			bamocar_warnung.warnung1 = ((data[4] << 8) + data[3]);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3304      	adds	r3, #4
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b29a      	uxth	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3303      	adds	r3, #3
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b29b      	uxth	r3, r3
 800069e:	4413      	add	r3, r2
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <BAMOCAN_ID+0x258>)
 80006a4:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Error\n", 14);
 80006a6:	210e      	movs	r1, #14
 80006a8:	483f      	ldr	r0, [pc, #252]	; (80007a8 <BAMOCAN_ID+0x25c>)
 80006aa:	f000 f889 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	73bb      	strb	r3, [r7, #14]
 80006b2:	e010      	b.n	80006d6 <BAMOCAN_ID+0x18a>
			{
				uartTransmitNumber(data[1+i], 16);
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	3301      	adds	r3, #1
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2110      	movs	r1, #16
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f890 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 80006c8:	2101      	movs	r1, #1
 80006ca:	4834      	ldr	r0, [pc, #208]	; (800079c <BAMOCAN_ID+0x250>)
 80006cc:	f000 f878 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	3301      	adds	r3, #1
 80006d4:	73bb      	strb	r3, [r7, #14]
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d9eb      	bls.n	80006b4 <BAMOCAN_ID+0x168>
			}
			uartTransmit("\n", 1);
 80006dc:	2101      	movs	r1, #1
 80006de:	482b      	ldr	r0, [pc, #172]	; (800078c <BAMOCAN_ID+0x240>)
 80006e0:	f000 f86e 	bl	80007c0 <uartTransmit>
#endif

			break;
 80006e4:	e049      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Status IO Register von Bamocar bekommen
		case BAMOCAR_REG_STATUS_IO:
			bamocar_IOstatus.status1 = ((data[2] << 8) + data[1]);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3302      	adds	r3, #2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <BAMOCAN_ID+0x260>)
 8000700:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar IO Status\n", 18);
 8000702:	2112      	movs	r1, #18
 8000704:	482a      	ldr	r0, [pc, #168]	; (80007b0 <BAMOCAN_ID+0x264>)
 8000706:	f000 f85b 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	737b      	strb	r3, [r7, #13]
 800070e:	e00d      	b.n	800072c <BAMOCAN_ID+0x1e0>
			{
				uartTransmitNumber(bamocar_IOstatus.status[i], 16);
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <BAMOCAN_ID+0x260>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	2110      	movs	r1, #16
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f865 	bl	80007e8 <uartTransmitNumber>
				uartTransmit(" ", 1);
 800071e:	2101      	movs	r1, #1
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <BAMOCAN_ID+0x250>)
 8000722:	f000 f84d 	bl	80007c0 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 8000726:	7b7b      	ldrb	r3, [r7, #13]
 8000728:	3301      	adds	r3, #1
 800072a:	737b      	strb	r3, [r7, #13]
 800072c:	7b7b      	ldrb	r3, [r7, #13]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d9ee      	bls.n	8000710 <BAMOCAN_ID+0x1c4>
			}
			uartTransmit("\n", 1);
 8000732:	2101      	movs	r1, #1
 8000734:	4815      	ldr	r0, [pc, #84]	; (800078c <BAMOCAN_ID+0x240>)
 8000736:	f000 f843 	bl	80007c0 <uartTransmit>
#endif

			break;
 800073a:	e01e      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Firmware von Bamocar ausgelesen
		case BAMOCAR_REG_FIRMWARE:
			bamocar_data.data = ((data[2]<<8) + data[1]);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3302      	adds	r3, #2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	3201      	adds	r2, #1
 8000748:	7812      	ldrb	r2, [r2, #0]
 800074a:	4413      	add	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <BAMOCAN_ID+0x268>)
 8000750:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Firmware\n", 9);
 8000752:	2109      	movs	r1, #9
 8000754:	4818      	ldr	r0, [pc, #96]	; (80007b8 <BAMOCAN_ID+0x26c>)
 8000756:	f000 f833 	bl	80007c0 <uartTransmit>
			uartTransmitNumber(bamocar_data.data, 16);
 800075a:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <BAMOCAN_ID+0x268>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2110      	movs	r1, #16
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f841 	bl	80007e8 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8000766:	2101      	movs	r1, #1
 8000768:	4808      	ldr	r0, [pc, #32]	; (800078c <BAMOCAN_ID+0x240>)
 800076a:	f000 f829 	bl	80007c0 <uartTransmit>
#endif

			break;
 800076e:	e004      	b.n	800077a <BAMOCAN_ID+0x22e>

		// Register fuer Bamocar nicht definiert, Fehler
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000770:	2121      	movs	r1, #33	; 0x21
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <BAMOCAN_ID+0x270>)
 8000774:	f000 f824 	bl	80007c0 <uartTransmit>
			break;
 8000778:	bf00      	nop
	}
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000015c 	.word	0x2000015c
 8000788:	08008250 	.word	0x08008250
 800078c:	08008260 	.word	0x08008260
 8000790:	08008264 	.word	0x08008264
 8000794:	2000002c 	.word	0x2000002c
 8000798:	08008270 	.word	0x08008270
 800079c:	08008280 	.word	0x08008280
 80007a0:	20000030 	.word	0x20000030
 80007a4:	20000034 	.word	0x20000034
 80007a8:	08008284 	.word	0x08008284
 80007ac:	20000028 	.word	0x20000028
 80007b0:	08008294 	.word	0x08008294
 80007b4:	20000038 	.word	0x20000038
 80007b8:	080082a8 	.word	0x080082a8
 80007bc:	080082b4 	.word	0x080082b4

080007c0 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <uartTransmit+0x24>)
 80007d6:	f006 f9fb 	bl	8006bd0 <HAL_UART_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200001b0 	.word	0x200001b0

080007e8 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f007 fd1a 	bl	8008234 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fd17 	bl	8000238 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	f107 010c 	add.w	r1, r7, #12
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <uartTransmitNumber+0x3c>)
 8000818:	f006 f9da 	bl	8006bd0 <HAL_UART_Transmit>
}
 800081c:	bf00      	nop
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200001b0 	.word	0x200001b0

08000828 <uartTransmitString>:
//----------------------------------------------------------------------

// Uart2 Transmit String Funktion
//----------------------------------------------------------------------
void uartTransmitString(const char *str)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, sizeof(str), 1000);
 8000830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000834:	2204      	movs	r2, #4
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <uartTransmitString+0x20>)
 800083a:	f006 f9c9 	bl	8006bd0 <HAL_UART_Transmit>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200001b0 	.word	0x200001b0

0800084c <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000852:	2114      	movs	r1, #20
 8000854:	483d      	ldr	r0, [pc, #244]	; (800094c <collectHardwareInfo+0x100>)
 8000856:	f7ff ffb3 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 800085a:	f002 fe81 	bl	8003560 <HAL_GetDEVID>
 800085e:	4603      	mov	r3, r0
 8000860:	210a      	movs	r1, #10
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ffc0 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000868:	2116      	movs	r1, #22
 800086a:	4839      	ldr	r0, [pc, #228]	; (8000950 <collectHardwareInfo+0x104>)
 800086c:	f7ff ffa8 	bl	80007c0 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000870:	f002 fe6a 	bl	8003548 <HAL_GetREVID>
 8000874:	4603      	mov	r3, r0
 8000876:	f242 0201 	movw	r2, #8193	; 0x2001
 800087a:	4293      	cmp	r3, r2
 800087c:	d016      	beq.n	80008ac <collectHardwareInfo+0x60>
 800087e:	f242 0201 	movw	r2, #8193	; 0x2001
 8000882:	4293      	cmp	r3, r2
 8000884:	d817      	bhi.n	80008b6 <collectHardwareInfo+0x6a>
 8000886:	f241 0201 	movw	r2, #4097	; 0x1001
 800088a:	4293      	cmp	r3, r2
 800088c:	d004      	beq.n	8000898 <collectHardwareInfo+0x4c>
 800088e:	f241 0203 	movw	r2, #4099	; 0x1003
 8000892:	4293      	cmp	r3, r2
 8000894:	d005      	beq.n	80008a2 <collectHardwareInfo+0x56>
 8000896:	e00e      	b.n	80008b6 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000898:	2101      	movs	r1, #1
 800089a:	482e      	ldr	r0, [pc, #184]	; (8000954 <collectHardwareInfo+0x108>)
 800089c:	f7ff ff90 	bl	80007c0 <uartTransmit>
			break;
 80008a0:	e011      	b.n	80008c6 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 80008a2:	2101      	movs	r1, #1
 80008a4:	482c      	ldr	r0, [pc, #176]	; (8000958 <collectHardwareInfo+0x10c>)
 80008a6:	f7ff ff8b 	bl	80007c0 <uartTransmit>
			break;
 80008aa:	e00c      	b.n	80008c6 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 80008ac:	2101      	movs	r1, #1
 80008ae:	482b      	ldr	r0, [pc, #172]	; (800095c <collectHardwareInfo+0x110>)
 80008b0:	f7ff ff86 	bl	80007c0 <uartTransmit>
			break;
 80008b4:	e007      	b.n	80008c6 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 80008b6:	f002 fe47 	bl	8003548 <HAL_GetREVID>
 80008ba:	4603      	mov	r3, r0
 80008bc:	210a      	movs	r1, #10
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff92 	bl	80007e8 <uartTransmitNumber>
			break;
 80008c4:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80008c6:	2114      	movs	r1, #20
 80008c8:	4825      	ldr	r0, [pc, #148]	; (8000960 <collectHardwareInfo+0x114>)
 80008ca:	f7ff ff79 	bl	80007c0 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80008ce:	f005 f8ab 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 80008d2:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a23      	ldr	r2, [pc, #140]	; (8000964 <collectHardwareInfo+0x118>)
 80008d8:	fba2 2303 	umull	r2, r3, r2, r3
 80008dc:	0c9b      	lsrs	r3, r3, #18
 80008de:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80008e0:	210a      	movs	r1, #10
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ff80 	bl	80007e8 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80008e8:	2104      	movs	r1, #4
 80008ea:	481f      	ldr	r0, [pc, #124]	; (8000968 <collectHardwareInfo+0x11c>)
 80008ec:	f7ff ff68 	bl	80007c0 <uartTransmit>


	uartTransmit("\n", 1);
 80008f0:	2101      	movs	r1, #1
 80008f2:	481e      	ldr	r0, [pc, #120]	; (800096c <collectHardwareInfo+0x120>)
 80008f4:	f7ff ff64 	bl	80007c0 <uartTransmit>
	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80008f8:	2110      	movs	r1, #16
 80008fa:	481d      	ldr	r0, [pc, #116]	; (8000970 <collectHardwareInfo+0x124>)
 80008fc:	f7ff ff60 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000900:	f002 fe3c 	bl	800357c <HAL_GetUIDw0>
 8000904:	4603      	mov	r3, r0
 8000906:	2110      	movs	r1, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ff6d 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 800090e:	2101      	movs	r1, #1
 8000910:	4818      	ldr	r0, [pc, #96]	; (8000974 <collectHardwareInfo+0x128>)
 8000912:	f7ff ff55 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000916:	f002 fe3d 	bl	8003594 <HAL_GetUIDw1>
 800091a:	4603      	mov	r3, r0
 800091c:	2110      	movs	r1, #16
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff62 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000924:	2101      	movs	r1, #1
 8000926:	4813      	ldr	r0, [pc, #76]	; (8000974 <collectHardwareInfo+0x128>)
 8000928:	f7ff ff4a 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 800092c:	f002 fe3e 	bl	80035ac <HAL_GetUIDw2>
 8000930:	4603      	mov	r3, r0
 8000932:	2110      	movs	r1, #16
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff57 	bl	80007e8 <uartTransmitNumber>

	uartTransmit("\n", 1);
 800093a:	2101      	movs	r1, #1
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <collectHardwareInfo+0x120>)
 800093e:	f7ff ff3f 	bl	80007c0 <uartTransmit>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	08008330 	.word	0x08008330
 8000950:	08008344 	.word	0x08008344
 8000954:	0800835c 	.word	0x0800835c
 8000958:	08008360 	.word	0x08008360
 800095c:	08008364 	.word	0x08008364
 8000960:	08008368 	.word	0x08008368
 8000964:	431bde83 	.word	0x431bde83
 8000968:	0800837c 	.word	0x0800837c
 800096c:	08008384 	.word	0x08008384
 8000970:	08008388 	.word	0x08008388
 8000974:	08008398 	.word	0x08008398

08000978 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 800097c:	2110      	movs	r1, #16
 800097e:	4826      	ldr	r0, [pc, #152]	; (8000a18 <collectSoftwareInfo+0xa0>)
 8000980:	f7ff ff1e 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000984:	2108      	movs	r1, #8
 8000986:	4825      	ldr	r0, [pc, #148]	; (8000a1c <collectSoftwareInfo+0xa4>)
 8000988:	f7ff ff1a 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 800098c:	2110      	movs	r1, #16
 800098e:	4824      	ldr	r0, [pc, #144]	; (8000a20 <collectSoftwareInfo+0xa8>)
 8000990:	f7ff ff16 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000994:	2106      	movs	r1, #6
 8000996:	4823      	ldr	r0, [pc, #140]	; (8000a24 <collectSoftwareInfo+0xac>)
 8000998:	f7ff ff12 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 800099c:	210e      	movs	r1, #14
 800099e:	4822      	ldr	r0, [pc, #136]	; (8000a28 <collectSoftwareInfo+0xb0>)
 80009a0:	f7ff ff0e 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80009a4:	2129      	movs	r1, #41	; 0x29
 80009a6:	4821      	ldr	r0, [pc, #132]	; (8000a2c <collectSoftwareInfo+0xb4>)
 80009a8:	f7ff ff0a 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009ac:	2101      	movs	r1, #1
 80009ae:	4820      	ldr	r0, [pc, #128]	; (8000a30 <collectSoftwareInfo+0xb8>)
 80009b0:	f7ff ff06 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80009b4:	2115      	movs	r1, #21
 80009b6:	481f      	ldr	r0, [pc, #124]	; (8000a34 <collectSoftwareInfo+0xbc>)
 80009b8:	f7ff ff02 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 80009bc:	210e      	movs	r1, #14
 80009be:	481e      	ldr	r0, [pc, #120]	; (8000a38 <collectSoftwareInfo+0xc0>)
 80009c0:	f7ff fefe 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80009c4:	2114      	movs	r1, #20
 80009c6:	481d      	ldr	r0, [pc, #116]	; (8000a3c <collectSoftwareInfo+0xc4>)
 80009c8:	f7ff fefa 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80009cc:	2129      	movs	r1, #41	; 0x29
 80009ce:	481c      	ldr	r0, [pc, #112]	; (8000a40 <collectSoftwareInfo+0xc8>)
 80009d0:	f7ff fef6 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80009d4:	2115      	movs	r1, #21
 80009d6:	481b      	ldr	r0, [pc, #108]	; (8000a44 <collectSoftwareInfo+0xcc>)
 80009d8:	f7ff fef2 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80009dc:	2115      	movs	r1, #21
 80009de:	481a      	ldr	r0, [pc, #104]	; (8000a48 <collectSoftwareInfo+0xd0>)
 80009e0:	f7ff feee 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80009e4:	2101      	movs	r1, #1
 80009e6:	4812      	ldr	r0, [pc, #72]	; (8000a30 <collectSoftwareInfo+0xb8>)
 80009e8:	f7ff feea 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80009ec:	2110      	movs	r1, #16
 80009ee:	4817      	ldr	r0, [pc, #92]	; (8000a4c <collectSoftwareInfo+0xd4>)
 80009f0:	f7ff fee6 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80009f4:	210b      	movs	r1, #11
 80009f6:	4816      	ldr	r0, [pc, #88]	; (8000a50 <collectSoftwareInfo+0xd8>)
 80009f8:	f7ff fee2 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80009fc:	2110      	movs	r1, #16
 80009fe:	4815      	ldr	r0, [pc, #84]	; (8000a54 <collectSoftwareInfo+0xdc>)
 8000a00:	f7ff fede 	bl	80007c0 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000a04:	2109      	movs	r1, #9
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <collectSoftwareInfo+0xe0>)
 8000a08:	f7ff feda 	bl	80007c0 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4808      	ldr	r0, [pc, #32]	; (8000a30 <collectSoftwareInfo+0xb8>)
 8000a10:	f7ff fed6 	bl	80007c0 <uartTransmit>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	0800839c 	.word	0x0800839c
 8000a1c:	080083ac 	.word	0x080083ac
 8000a20:	080083b4 	.word	0x080083b4
 8000a24:	080083c4 	.word	0x080083c4
 8000a28:	080083cc 	.word	0x080083cc
 8000a2c:	080083dc 	.word	0x080083dc
 8000a30:	08008384 	.word	0x08008384
 8000a34:	08008408 	.word	0x08008408
 8000a38:	08008420 	.word	0x08008420
 8000a3c:	08008430 	.word	0x08008430
 8000a40:	08008444 	.word	0x08008444
 8000a44:	08008470 	.word	0x08008470
 8000a48:	08008488 	.word	0x08008488
 8000a4c:	080084a0 	.word	0x080084a0
 8000a50:	080084b0 	.word	0x080084b0
 8000a54:	080084bc 	.word	0x080084bc
 8000a58:	080084cc 	.word	0x080084cc

08000a5c <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000a60:	2113      	movs	r1, #19
 8000a62:	4824      	ldr	r0, [pc, #144]	; (8000af4 <collectMiddlewareInfo+0x98>)
 8000a64:	f7ff feac 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000a68:	210a      	movs	r1, #10
 8000a6a:	2005      	movs	r0, #5
 8000a6c:	f7ff febc 	bl	80007e8 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000a70:	2101      	movs	r1, #1
 8000a72:	4821      	ldr	r0, [pc, #132]	; (8000af8 <collectMiddlewareInfo+0x9c>)
 8000a74:	f7ff fea4 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000a78:	210a      	movs	r1, #10
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff feb4 	bl	80007e8 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000a80:	2111      	movs	r1, #17
 8000a82:	481e      	ldr	r0, [pc, #120]	; (8000afc <collectMiddlewareInfo+0xa0>)
 8000a84:	f7ff fe9c 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000a88:	f002 fd54 	bl	8003534 <HAL_GetHalVersion>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	0e1b      	lsrs	r3, r3, #24
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	210a      	movs	r1, #10
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fea7 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4816      	ldr	r0, [pc, #88]	; (8000af8 <collectMiddlewareInfo+0x9c>)
 8000a9e:	f7ff fe8f 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000aa2:	f002 fd47 	bl	8003534 <HAL_GetHalVersion>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	0c1b      	lsrs	r3, r3, #16
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	210a      	movs	r1, #10
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fe9a 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4810      	ldr	r0, [pc, #64]	; (8000af8 <collectMiddlewareInfo+0x9c>)
 8000ab8:	f7ff fe82 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000abc:	f002 fd3a 	bl	8003534 <HAL_GetHalVersion>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	0a1b      	lsrs	r3, r3, #8
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	210a      	movs	r1, #10
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fe8d 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000ace:	2101      	movs	r1, #1
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <collectMiddlewareInfo+0x9c>)
 8000ad2:	f7ff fe75 	bl	80007c0 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000ad6:	f002 fd2d 	bl	8003534 <HAL_GetHalVersion>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	210a      	movs	r1, #10
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe81 	bl	80007e8 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <collectMiddlewareInfo+0xa4>)
 8000aea:	f7ff fe69 	bl	80007c0 <uartTransmit>
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	080084d8 	.word	0x080084d8
 8000af8:	080084ec 	.word	0x080084ec
 8000afc:	080084f0 	.word	0x080084f0
 8000b00:	08008384 	.word	0x08008384

08000b04 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000b08:	2114      	movs	r1, #20
 8000b0a:	4814      	ldr	r0, [pc, #80]	; (8000b5c <collectGitcounts+0x58>)
 8000b0c:	f7ff fe58 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000b10:	2103      	movs	r1, #3
 8000b12:	4813      	ldr	r0, [pc, #76]	; (8000b60 <collectGitcounts+0x5c>)
 8000b14:	f7ff fe54 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000b18:	2116      	movs	r1, #22
 8000b1a:	4812      	ldr	r0, [pc, #72]	; (8000b64 <collectGitcounts+0x60>)
 8000b1c:	f7ff fe50 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000b20:	2103      	movs	r1, #3
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <collectGitcounts+0x64>)
 8000b24:	f7ff fe4c 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000b28:	211b      	movs	r1, #27
 8000b2a:	4810      	ldr	r0, [pc, #64]	; (8000b6c <collectGitcounts+0x68>)
 8000b2c:	f7ff fe48 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000b30:	2103      	movs	r1, #3
 8000b32:	480f      	ldr	r0, [pc, #60]	; (8000b70 <collectGitcounts+0x6c>)
 8000b34:	f7ff fe44 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000b38:	2115      	movs	r1, #21
 8000b3a:	480e      	ldr	r0, [pc, #56]	; (8000b74 <collectGitcounts+0x70>)
 8000b3c:	f7ff fe40 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000b40:	2102      	movs	r1, #2
 8000b42:	480d      	ldr	r0, [pc, #52]	; (8000b78 <collectGitcounts+0x74>)
 8000b44:	f7ff fe3c 	bl	80007c0 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000b48:	2114      	movs	r1, #20
 8000b4a:	480c      	ldr	r0, [pc, #48]	; (8000b7c <collectGitcounts+0x78>)
 8000b4c:	f7ff fe38 	bl	80007c0 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000b50:	2103      	movs	r1, #3
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <collectGitcounts+0x7c>)
 8000b54:	f7ff fe34 	bl	80007c0 <uartTransmit>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	08008504 	.word	0x08008504
 8000b60:	08008518 	.word	0x08008518
 8000b64:	0800851c 	.word	0x0800851c
 8000b68:	08008534 	.word	0x08008534
 8000b6c:	08008538 	.word	0x08008538
 8000b70:	08008554 	.word	0x08008554
 8000b74:	08008408 	.word	0x08008408
 8000b78:	08008558 	.word	0x08008558
 8000b7c:	08008430 	.word	0x08008430
 8000b80:	0800855c 	.word	0x0800855c

08000b84 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000b88:	2111      	movs	r1, #17
 8000b8a:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <collectSystemInfo+0x40>)
 8000b8c:	f7ff fe18 	bl	80007c0 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000b90:	f7ff fe5c 	bl	800084c <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000b94:	2111      	movs	r1, #17
 8000b96:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <collectSystemInfo+0x44>)
 8000b98:	f7ff fe12 	bl	80007c0 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000b9c:	f7ff feec 	bl	8000978 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000ba0:	2113      	movs	r1, #19
 8000ba2:	480a      	ldr	r0, [pc, #40]	; (8000bcc <collectSystemInfo+0x48>)
 8000ba4:	f7ff fe0c 	bl	80007c0 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000ba8:	f7ff ff58 	bl	8000a5c <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000bac:	2113      	movs	r1, #19
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <collectSystemInfo+0x4c>)
 8000bb0:	f7ff fe06 	bl	80007c0 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000bb4:	f7ff ffa6 	bl	8000b04 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000bb8:	2103      	movs	r1, #3
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <collectSystemInfo+0x50>)
 8000bbc:	f7ff fe00 	bl	80007c0 <uartTransmit>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	08008560 	.word	0x08008560
 8000bc8:	08008574 	.word	0x08008574
 8000bcc:	08008588 	.word	0x08008588
 8000bd0:	0800859c 	.word	0x0800859c
 8000bd4:	080085b0 	.word	0x080085b0

08000bd8 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000bde:	2300      	movs	r3, #0
 8000be0:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <readResetSource+0xa0>)
 8000be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000bf4:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <readResetSource+0xa0>)
 8000bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bf8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	3302      	adds	r3, #2
 8000c04:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <readResetSource+0xa0>)
 8000c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	da02      	bge.n	8000c14 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	3304      	adds	r3, #4
 8000c12:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000c14:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <readResetSource+0xa0>)
 8000c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	3308      	adds	r3, #8
 8000c24:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <readResetSource+0xa0>)
 8000c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	3310      	adds	r3, #16
 8000c36:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <readResetSource+0xa0>)
 8000c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	3320      	adds	r3, #32
 8000c48:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <readResetSource+0xa0>)
 8000c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	3340      	adds	r3, #64	; 0x40
 8000c5a:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <readResetSource+0xa0>)
 8000c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c60:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <readResetSource+0xa0>)
 8000c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c66:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000c86:	2106      	movs	r1, #6
 8000c88:	482a      	ldr	r0, [pc, #168]	; (8000d34 <printResetSource+0xb8>)
 8000c8a:	f7ff fd99 	bl	80007c0 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d104      	bne.n	8000c9e <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000c94:	210f      	movs	r1, #15
 8000c96:	4828      	ldr	r0, [pc, #160]	; (8000d38 <printResetSource+0xbc>)
 8000c98:	f7ff fd92 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000c9c:	e046      	b.n	8000d2c <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000ca8:	2118      	movs	r1, #24
 8000caa:	4824      	ldr	r0, [pc, #144]	; (8000d3c <printResetSource+0xc0>)
 8000cac:	f7ff fd88 	bl	80007c0 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000cba:	2116      	movs	r1, #22
 8000cbc:	4820      	ldr	r0, [pc, #128]	; (8000d40 <printResetSource+0xc4>)
 8000cbe:	f7ff fd7f 	bl	80007c0 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000ccc:	210a      	movs	r1, #10
 8000cce:	481d      	ldr	r0, [pc, #116]	; (8000d44 <printResetSource+0xc8>)
 8000cd0:	f7ff fd76 	bl	80007c0 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000cde:	2110      	movs	r1, #16
 8000ce0:	4819      	ldr	r0, [pc, #100]	; (8000d48 <printResetSource+0xcc>)
 8000ce2:	f7ff fd6d 	bl	80007c0 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	4816      	ldr	r0, [pc, #88]	; (8000d4c <printResetSource+0xd0>)
 8000cf4:	f7ff fd64 	bl	80007c0 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 0320 	and.w	r3, r3, #32
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000d02:	210f      	movs	r1, #15
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <printResetSource+0xd4>)
 8000d06:	f7ff fd5b 	bl	80007c0 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000d14:	210a      	movs	r1, #10
 8000d16:	480f      	ldr	r0, [pc, #60]	; (8000d54 <printResetSource+0xd8>)
 8000d18:	f7ff fd52 	bl	80007c0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da03      	bge.n	8000d2c <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000d24:	2105      	movs	r1, #5
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <printResetSource+0xdc>)
 8000d28:	f7ff fd4a 	bl	80007c0 <uartTransmit>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	080085b4 	.word	0x080085b4
 8000d38:	080085bc 	.word	0x080085bc
 8000d3c:	080085cc 	.word	0x080085cc
 8000d40:	080085e8 	.word	0x080085e8
 8000d44:	08008600 	.word	0x08008600
 8000d48:	0800860c 	.word	0x0800860c
 8000d4c:	08008620 	.word	0x08008620
 8000d50:	08008630 	.word	0x08008630
 8000d54:	08008640 	.word	0x08008640
 8000d58:	0800864c 	.word	0x0800864c

08000d5c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d68:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d013      	beq.n	8000d9c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d78:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d7c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00b      	beq.n	8000d9c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d84:	e000      	b.n	8000d88 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d86:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f9      	beq.n	8000d86 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d92:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Gaspedal einlesen\n");
 8000db2:	4820      	ldr	r0, [pc, #128]	; (8000e34 <ADC_Gaspedal+0x88>)
 8000db4:	f000 fafe 	bl	80013b4 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000dc8:	2306      	movs	r3, #6
 8000dca:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4817      	ldr	r0, [pc, #92]	; (8000e38 <ADC_Gaspedal+0x8c>)
 8000dda:	f002 fdd1 	bl	8003980 <HAL_ADC_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <ADC_Gaspedal+0x3c>
	{
		Error_Handler();
 8000de4:	f002 f95a 	bl	800309c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);
 8000de8:	4813      	ldr	r0, [pc, #76]	; (8000e38 <ADC_Gaspedal+0x8c>)
 8000dea:	f002 fc2f 	bl	800364c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000dee:	2164      	movs	r1, #100	; 0x64
 8000df0:	4811      	ldr	r0, [pc, #68]	; (8000e38 <ADC_Gaspedal+0x8c>)
 8000df2:	f002 fd2d 	bl	8003850 <HAL_ADC_PollForConversion>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d105      	bne.n	8000e08 <ADC_Gaspedal+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000dfc:	480e      	ldr	r0, [pc, #56]	; (8000e38 <ADC_Gaspedal+0x8c>)
 8000dfe:	f002 fdb2 	bl	8003966 <HAL_ADC_GetValue>
 8000e02:	4603      	mov	r3, r0
 8000e04:	82fb      	strh	r3, [r7, #22]
 8000e06:	e002      	b.n	8000e0e <ADC_Gaspedal+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000e08:	2004      	movs	r0, #4
 8000e0a:	f000 fa31 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000e0e:	480a      	ldr	r0, [pc, #40]	; (8000e38 <ADC_Gaspedal+0x8c>)
 8000e10:	f002 fcea 	bl	80037e8 <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Gaspedal:\t");
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <ADC_Gaspedal+0x90>)
 8000e16:	f000 facd 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000e1a:	8afb      	ldrh	r3, [r7, #22]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fad3 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 8000e22:	200a      	movs	r0, #10
 8000e24:	f7ff ff9a 	bl	8000d5c <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000e28:	8afb      	ldrh	r3, [r7, #22]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	08008654 	.word	0x08008654
 8000e38:	20000058 	.word	0x20000058
 8000e3c:	08008670 	.word	0x08008670

08000e40 <ADC_Bremsdruck>:
//----------------------------------------------------------------------

// Bremsdruck einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdruck(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC von Bremsdruck einlesen\n");
 8000e46:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <ADC_Bremsdruck+0x88>)
 8000e48:	f000 fab4 	bl	80013b4 <ITM_SendString>
#endif

	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;
 8000e5c:	230e      	movs	r3, #14
 8000e5e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4817      	ldr	r0, [pc, #92]	; (8000ecc <ADC_Bremsdruck+0x8c>)
 8000e6e:	f002 fd87 	bl	8003980 <HAL_ADC_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <ADC_Bremsdruck+0x3c>
	{
		Error_Handler();
 8000e78:	f002 f910 	bl	800309c <Error_Handler>
	}
	
	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000e7c:	4813      	ldr	r0, [pc, #76]	; (8000ecc <ADC_Bremsdruck+0x8c>)
 8000e7e:	f002 fbe5 	bl	800364c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000e82:	2164      	movs	r1, #100	; 0x64
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <ADC_Bremsdruck+0x8c>)
 8000e86:	f002 fce3 	bl	8003850 <HAL_ADC_PollForConversion>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d105      	bne.n	8000e9c <ADC_Bremsdruck+0x5c>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000e90:	480e      	ldr	r0, [pc, #56]	; (8000ecc <ADC_Bremsdruck+0x8c>)
 8000e92:	f002 fd68 	bl	8003966 <HAL_ADC_GetValue>
 8000e96:	4603      	mov	r3, r0
 8000e98:	82fb      	strh	r3, [r7, #22]
 8000e9a:	e002      	b.n	8000ea2 <ADC_Bremsdruck+0x62>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000e9c:	2004      	movs	r0, #4
 8000e9e:	f000 f9e7 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000ea2:	480a      	ldr	r0, [pc, #40]	; (8000ecc <ADC_Bremsdruck+0x8c>)
 8000ea4:	f002 fca0 	bl	80037e8 <HAL_ADC_Stop>

#ifdef DEBUG_ADC_INPUTS
	ITM_SendString("ADC-Wert Bremsdruck:\t");
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <ADC_Bremsdruck+0x90>)
 8000eaa:	f000 fa83 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(ADC_Data);
 8000eae:	8afb      	ldrh	r3, [r7, #22]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fa89 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 8000eb6:	200a      	movs	r0, #10
 8000eb8:	f7ff ff50 	bl	8000d5c <ITM_SendChar>
#endif

	//ADC Wert zurueck geben
	return ADC_Data;
 8000ebc:	8afb      	ldrh	r3, [r7, #22]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	08008684 	.word	0x08008684
 8000ecc:	20000058 	.word	0x20000058
 8000ed0:	080086a4 	.word	0x080086a4

08000ed4 <ADC_KL15>:
//----------------------------------------------------------------------

// Spannung KL15 einlesen
//----------------------------------------------------------------------
uint16_t ADC_KL15 (void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_3;										// ADC Kanal einstellen
 8000eea:	2303      	movs	r3, #3
 8000eec:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000eee:	2301      	movs	r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4811      	ldr	r0, [pc, #68]	; (8000f40 <ADC_KL15+0x6c>)
 8000efc:	f002 fd40 	bl	8003980 <HAL_ADC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <ADC_KL15+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000f06:	f002 f8c9 	bl	800309c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <ADC_KL15+0x6c>)
 8000f0c:	f002 fb9e 	bl	800364c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000f10:	2164      	movs	r1, #100	; 0x64
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <ADC_KL15+0x6c>)
 8000f14:	f002 fc9c 	bl	8003850 <HAL_ADC_PollForConversion>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d105      	bne.n	8000f2a <ADC_KL15+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000f1e:	4808      	ldr	r0, [pc, #32]	; (8000f40 <ADC_KL15+0x6c>)
 8000f20:	f002 fd21 	bl	8003966 <HAL_ADC_GetValue>
 8000f24:	4603      	mov	r3, r0
 8000f26:	82fb      	strh	r3, [r7, #22]
 8000f28:	e002      	b.n	8000f30 <ADC_KL15+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000f2a:	2004      	movs	r0, #4
 8000f2c:	f000 f9a0 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <ADC_KL15+0x6c>)
 8000f32:	f002 fc59 	bl	80037e8 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000f36:	8afb      	ldrh	r3, [r7, #22]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000058 	.word	0x20000058

08000f44 <ADC_Kuhlwassertemperatur>:
//----------------------------------------------------------------------

// Kuehlwassertemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Kuhlwassertemperatur (void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;										// ADC Kanal einstellen
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000f5e:	2301      	movs	r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000f62:	2301      	movs	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f6c:	f002 fd08 	bl	8003980 <HAL_ADC_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <ADC_Kuhlwassertemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000f76:	f002 f891 	bl	800309c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f7c:	f002 fb66 	bl	800364c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000f80:	2164      	movs	r1, #100	; 0x64
 8000f82:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f84:	f002 fc64 	bl	8003850 <HAL_ADC_PollForConversion>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d105      	bne.n	8000f9a <ADC_Kuhlwassertemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <ADC_Kuhlwassertemperatur+0x6c>)
 8000f90:	f002 fce9 	bl	8003966 <HAL_ADC_GetValue>
 8000f94:	4603      	mov	r3, r0
 8000f96:	82fb      	strh	r3, [r7, #22]
 8000f98:	e002      	b.n	8000fa0 <ADC_Kuhlwassertemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000f9a:	2004      	movs	r0, #4
 8000f9c:	f000 f968 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <ADC_Kuhlwassertemperatur+0x6c>)
 8000fa2:	f002 fc21 	bl	80037e8 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000fa6:	8afb      	ldrh	r3, [r7, #22]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000058 	.word	0x20000058

08000fb4 <ADC_Klimaflap>:
//----------------------------------------------------------------------

// Klimaflapstellung einlesen (Position ueber Poti)
//----------------------------------------------------------------------
uint16_t ADC_Klimaflap (void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;										// ADC Kanal einstellen
 8000fca:	2305      	movs	r3, #5
 8000fcc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000fce:	2301      	movs	r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <ADC_Klimaflap+0x6c>)
 8000fdc:	f002 fcd0 	bl	8003980 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <ADC_Klimaflap+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000fe6:	f002 f859 	bl	800309c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <ADC_Klimaflap+0x6c>)
 8000fec:	f002 fb2e 	bl	800364c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000ff0:	2164      	movs	r1, #100	; 0x64
 8000ff2:	480b      	ldr	r0, [pc, #44]	; (8001020 <ADC_Klimaflap+0x6c>)
 8000ff4:	f002 fc2c 	bl	8003850 <HAL_ADC_PollForConversion>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d105      	bne.n	800100a <ADC_Klimaflap+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000ffe:	4808      	ldr	r0, [pc, #32]	; (8001020 <ADC_Klimaflap+0x6c>)
 8001000:	f002 fcb1 	bl	8003966 <HAL_ADC_GetValue>
 8001004:	4603      	mov	r3, r0
 8001006:	82fb      	strh	r3, [r7, #22]
 8001008:	e002      	b.n	8001010 <ADC_Klimaflap+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800100a:	2004      	movs	r0, #4
 800100c:	f000 f930 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <ADC_Klimaflap+0x6c>)
 8001012:	f002 fbe9 	bl	80037e8 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001016:	8afb      	ldrh	r3, [r7, #22]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000058 	.word	0x20000058

08001024 <ADC_PCBTemperatur>:
//----------------------------------------------------------------------

// PCB Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_PCBTemperatur (void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;										// ADC Kanal einstellen
 800103a:	2307      	movs	r3, #7
 800103c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800103e:	2301      	movs	r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001042:	2301      	movs	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4811      	ldr	r0, [pc, #68]	; (8001090 <ADC_PCBTemperatur+0x6c>)
 800104c:	f002 fc98 	bl	8003980 <HAL_ADC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <ADC_PCBTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001056:	f002 f821 	bl	800309c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800105a:	480d      	ldr	r0, [pc, #52]	; (8001090 <ADC_PCBTemperatur+0x6c>)
 800105c:	f002 faf6 	bl	800364c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001060:	2164      	movs	r1, #100	; 0x64
 8001062:	480b      	ldr	r0, [pc, #44]	; (8001090 <ADC_PCBTemperatur+0x6c>)
 8001064:	f002 fbf4 	bl	8003850 <HAL_ADC_PollForConversion>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d105      	bne.n	800107a <ADC_PCBTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800106e:	4808      	ldr	r0, [pc, #32]	; (8001090 <ADC_PCBTemperatur+0x6c>)
 8001070:	f002 fc79 	bl	8003966 <HAL_ADC_GetValue>
 8001074:	4603      	mov	r3, r0
 8001076:	82fb      	strh	r3, [r7, #22]
 8001078:	e002      	b.n	8001080 <ADC_PCBTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800107a:	2004      	movs	r0, #4
 800107c:	f000 f8f8 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <ADC_PCBTemperatur+0x6c>)
 8001082:	f002 fbb1 	bl	80037e8 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001086:	8afb      	ldrh	r3, [r7, #22]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000058 	.word	0x20000058

08001094 <ADC_Return>:
//----------------------------------------------------------------------

// Navibedienelement Return einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Return (void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;										// ADC Kanal einstellen
 80010aa:	2308      	movs	r3, #8
 80010ac:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80010ae:	2301      	movs	r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 80010b2:	2301      	movs	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4811      	ldr	r0, [pc, #68]	; (8001100 <ADC_Return+0x6c>)
 80010bc:	f002 fc60 	bl	8003980 <HAL_ADC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <ADC_Return+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80010c6:	f001 ffe9 	bl	800309c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <ADC_Return+0x6c>)
 80010cc:	f002 fabe 	bl	800364c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80010d0:	2164      	movs	r1, #100	; 0x64
 80010d2:	480b      	ldr	r0, [pc, #44]	; (8001100 <ADC_Return+0x6c>)
 80010d4:	f002 fbbc 	bl	8003850 <HAL_ADC_PollForConversion>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d105      	bne.n	80010ea <ADC_Return+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <ADC_Return+0x6c>)
 80010e0:	f002 fc41 	bl	8003966 <HAL_ADC_GetValue>
 80010e4:	4603      	mov	r3, r0
 80010e6:	82fb      	strh	r3, [r7, #22]
 80010e8:	e002      	b.n	80010f0 <ADC_Return+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80010ea:	2004      	movs	r0, #4
 80010ec:	f000 f8c0 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <ADC_Return+0x6c>)
 80010f2:	f002 fb79 	bl	80037e8 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80010f6:	8afb      	ldrh	r3, [r7, #22]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000058 	.word	0x20000058

08001104 <ADC_Info>:
//----------------------------------------------------------------------

// Navibedienelement Info einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Info (void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;										// ADC Kanal einstellen
 800111a:	2309      	movs	r3, #9
 800111c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800111e:	2301      	movs	r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001122:	2301      	movs	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4811      	ldr	r0, [pc, #68]	; (8001170 <ADC_Info+0x6c>)
 800112c:	f002 fc28 	bl	8003980 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <ADC_Info+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001136:	f001 ffb1 	bl	800309c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <ADC_Info+0x6c>)
 800113c:	f002 fa86 	bl	800364c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001140:	2164      	movs	r1, #100	; 0x64
 8001142:	480b      	ldr	r0, [pc, #44]	; (8001170 <ADC_Info+0x6c>)
 8001144:	f002 fb84 	bl	8003850 <HAL_ADC_PollForConversion>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d105      	bne.n	800115a <ADC_Info+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <ADC_Info+0x6c>)
 8001150:	f002 fc09 	bl	8003966 <HAL_ADC_GetValue>
 8001154:	4603      	mov	r3, r0
 8001156:	82fb      	strh	r3, [r7, #22]
 8001158:	e002      	b.n	8001160 <ADC_Info+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800115a:	2004      	movs	r0, #4
 800115c:	f000 f888 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <ADC_Info+0x6c>)
 8001162:	f002 fb41 	bl	80037e8 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001166:	8afb      	ldrh	r3, [r7, #22]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000058 	.word	0x20000058

08001174 <ADC_Bremsdrucktemperatur>:
//----------------------------------------------------------------------

// Bremsdrucktemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdrucktemperatur (void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_15;										// ADC Kanal einstellen
 800118a:	230f      	movs	r3, #15
 800118c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 800118e:	2301      	movs	r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001192:	2301      	movs	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4811      	ldr	r0, [pc, #68]	; (80011e0 <ADC_Bremsdrucktemperatur+0x6c>)
 800119c:	f002 fbf0 	bl	8003980 <HAL_ADC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <ADC_Bremsdrucktemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80011a6:	f001 ff79 	bl	800309c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <ADC_Bremsdrucktemperatur+0x6c>)
 80011ac:	f002 fa4e 	bl	800364c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80011b0:	2164      	movs	r1, #100	; 0x64
 80011b2:	480b      	ldr	r0, [pc, #44]	; (80011e0 <ADC_Bremsdrucktemperatur+0x6c>)
 80011b4:	f002 fb4c 	bl	8003850 <HAL_ADC_PollForConversion>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <ADC_Bremsdrucktemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <ADC_Bremsdrucktemperatur+0x6c>)
 80011c0:	f002 fbd1 	bl	8003966 <HAL_ADC_GetValue>
 80011c4:	4603      	mov	r3, r0
 80011c6:	82fb      	strh	r3, [r7, #22]
 80011c8:	e002      	b.n	80011d0 <ADC_Bremsdrucktemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 80011ca:	2004      	movs	r0, #4
 80011cc:	f000 f850 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 80011d0:	4803      	ldr	r0, [pc, #12]	; (80011e0 <ADC_Bremsdrucktemperatur+0x6c>)
 80011d2:	f002 fb09 	bl	80037e8 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 80011d6:	8afb      	ldrh	r3, [r7, #22]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000058 	.word	0x20000058

080011e4 <ADC_STMTemperatur>:
//----------------------------------------------------------------------

// STM32 Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_STMTemperatur (void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;								// ADC Kanal einstellen
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <ADC_STMTemperatur+0x6c>)
 80011fc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80011fe:	2301      	movs	r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;							// ADC Sampletime einstellen
 8001202:	2301      	movs	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4812      	ldr	r0, [pc, #72]	; (8001254 <ADC_STMTemperatur+0x70>)
 800120c:	f002 fbb8 	bl	8003980 <HAL_ADC_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <ADC_STMTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8001216:	f001 ff41 	bl	800309c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <ADC_STMTemperatur+0x70>)
 800121c:	f002 fa16 	bl	800364c <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8001220:	2164      	movs	r1, #100	; 0x64
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <ADC_STMTemperatur+0x70>)
 8001224:	f002 fb14 	bl	8003850 <HAL_ADC_PollForConversion>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d105      	bne.n	800123a <ADC_STMTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <ADC_STMTemperatur+0x70>)
 8001230:	f002 fb99 	bl	8003966 <HAL_ADC_GetValue>
 8001234:	4603      	mov	r3, r0
 8001236:	82fb      	strh	r3, [r7, #22]
 8001238:	e002      	b.n	8001240 <ADC_STMTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 800123a:	2004      	movs	r0, #4
 800123c:	f000 f818 	bl	8001270 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <ADC_STMTemperatur+0x70>)
 8001242:	f002 fad1 	bl	80037e8 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8001246:	8afb      	ldrh	r3, [r7, #22]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	10000012 	.word	0x10000012
 8001254:	20000058 	.word	0x20000058

08001258 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127a:	b672      	cpsid	i
}
 800127c:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 800127e:	4a1e      	ldr	r2, [pc, #120]	; (80012f8 <software_error+0x88>)
 8001280:	7853      	ldrb	r3, [r2, #1]
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <software_error+0x88>)
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	2104      	movs	r1, #4
 8001296:	4819      	ldr	r0, [pc, #100]	; (80012fc <software_error+0x8c>)
 8001298:	f003 ffa8 	bl	80051ec <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 800129c:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <software_error+0x88>)
 800129e:	7853      	ldrb	r3, [r2, #1]
 80012a0:	f36f 1304 	bfc	r3, #4, #1
 80012a4:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <software_error+0x88>)
 80012a8:	785b      	ldrb	r3, [r3, #1]
 80012aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <software_error+0x8c>)
 80012b8:	f003 ff98 	bl	80051ec <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 80012bc:	4a10      	ldr	r2, [pc, #64]	; (8001300 <software_error+0x90>)
 80012be:	7813      	ldrb	r3, [r2, #0]
 80012c0:	f36f 1345 	bfc	r3, #5, #1
 80012c4:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <software_error+0x90>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d6:	480b      	ldr	r0, [pc, #44]	; (8001304 <software_error+0x94>)
 80012d8:	f003 ff88 	bl	80051ec <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 80012dc:	2124      	movs	r1, #36	; 0x24
 80012de:	480a      	ldr	r0, [pc, #40]	; (8001308 <software_error+0x98>)
 80012e0:	f7ff fa6e 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 80012e4:	210d      	movs	r1, #13
 80012e6:	4809      	ldr	r0, [pc, #36]	; (800130c <software_error+0x9c>)
 80012e8:	f7ff fa6a 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	210a      	movs	r1, #10
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fa79 	bl	80007e8 <uartTransmitNumber>
#endif
	while (1);																// Endlosschleife
 80012f6:	e7fe      	b.n	80012f6 <software_error+0x86>
 80012f8:	20000050 	.word	0x20000050
 80012fc:	40020400 	.word	0x40020400
 8001300:	20000048 	.word	0x20000048
 8001304:	40021000 	.word	0x40021000
 8001308:	080086bc 	.word	0x080086bc
 800130c:	080086e0 	.word	0x080086e0

08001310 <software_error_debug>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt (Nur Debugzwecke)
//----------------------------------------------------------------------
void software_error_debug(uint8_t errorcode)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 800131a:	4a20      	ldr	r2, [pc, #128]	; (800139c <software_error_debug+0x8c>)
 800131c:	7853      	ldrb	r3, [r2, #1]
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <software_error_debug+0x8c>)
 8001326:	785b      	ldrb	r3, [r3, #1]
 8001328:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	2104      	movs	r1, #4
 8001332:	481b      	ldr	r0, [pc, #108]	; (80013a0 <software_error_debug+0x90>)
 8001334:	f003 ff5a 	bl	80051ec <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001338:	4a18      	ldr	r2, [pc, #96]	; (800139c <software_error_debug+0x8c>)
 800133a:	7853      	ldrb	r3, [r2, #1]
 800133c:	f36f 1304 	bfc	r3, #4, #1
 8001340:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// OK LED ausschalten
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <software_error_debug+0x8c>)
 8001344:	785b      	ldrb	r3, [r3, #1]
 8001346:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001352:	4813      	ldr	r0, [pc, #76]	; (80013a0 <software_error_debug+0x90>)
 8001354:	f003 ff4a 	bl	80051ec <HAL_GPIO_WritePin>

	// Schalte SDC_Motor aus
	system_out.MotorSDC = 0;												// Zuruecksetzen Variable
 8001358:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <software_error_debug+0x94>)
 800135a:	7813      	ldrb	r3, [r2, #0]
 800135c:	f36f 1345 	bfc	r3, #5, #1
 8001360:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, system_out.MotorSDC);// SDC oeffnen
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <software_error_debug+0x94>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001372:	480d      	ldr	r0, [pc, #52]	; (80013a8 <software_error_debug+0x98>)
 8001374:	f003 ff3a 	bl	80051ec <HAL_GPIO_WritePin>
#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8001378:	2124      	movs	r1, #36	; 0x24
 800137a:	480c      	ldr	r0, [pc, #48]	; (80013ac <software_error_debug+0x9c>)
 800137c:	f7ff fa20 	bl	80007c0 <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8001380:	210d      	movs	r1, #13
 8001382:	480b      	ldr	r0, [pc, #44]	; (80013b0 <software_error_debug+0xa0>)
 8001384:	f7ff fa1c 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	210a      	movs	r1, #10
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fa2b 	bl	80007e8 <uartTransmitNumber>
#endif
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000050 	.word	0x20000050
 80013a0:	40020400 	.word	0x40020400
 80013a4:	20000048 	.word	0x20000048
 80013a8:	40021000 	.word	0x40021000
 80013ac:	080086bc 	.word	0x080086bc
 80013b0:	080086e0 	.word	0x080086e0

080013b4 <ITM_SendString>:
// Nachricht SWO ITM Data Console
// Core Clock := Maximalfrequenz ; HCLK fuer Serial Wire Viewer
// Im String #GRN# oder #RED# oder #ORG# erscheint die Nachricht in einer Farbe
//----------------------------------------------------------------------
void ITM_SendString(char *text)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	{
		ITM_SendChar(*text);												// Sende ITM Zeichen
		text++;																// Pointer hochzaehlen
	}
#endif
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <ITM_SendNumber>:
//----------------------------------------------------------------------

// Debug Nummer ueber SWO senden
//----------------------------------------------------------------------
void ITM_SendNumber(long number)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	for(; i > 0; i--)
	{
		ITM_SendChar('0' + buf[i-1]);
	}
#endif
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <ITM_SendChar>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80013fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00b      	beq.n	800141c <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8001404:	e000      	b.n	8001408 <ITM_SendChar+0x2c>
      __NOP();
 8001406:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001408:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f9      	beq.n	8001406 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001412:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	701a      	strb	r2, [r3, #0]
  return (ch);
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <readall_inputs>:
//----------------------------------------------------------------------

// Alle Eingaenge einlesen und speichern
//----------------------------------------------------------------------
void readall_inputs(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
#ifdef DEBUG_INPUT
	ITM_SendString("Lese Inputs ein\n");
 8001430:	48cf      	ldr	r0, [pc, #828]	; (8001770 <readall_inputs+0x344>)
 8001432:	f7ff ffbf 	bl	80013b4 <ITM_SendString>
#endif

	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8001436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143a:	48ce      	ldr	r0, [pc, #824]	; (8001774 <readall_inputs+0x348>)
 800143c:	f003 febe 	bl	80051bc <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	b2d9      	uxtb	r1, r3
 8001448:	4acb      	ldr	r2, [pc, #812]	; (8001778 <readall_inputs+0x34c>)
 800144a:	7813      	ldrb	r3, [r2, #0]
 800144c:	f361 0300 	bfi	r3, r1, #0, #1
 8001450:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 8001452:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001456:	48c7      	ldr	r0, [pc, #796]	; (8001774 <readall_inputs+0x348>)
 8001458:	f003 feb0 	bl	80051bc <HAL_GPIO_ReadPin>
 800145c:	4603      	mov	r3, r0
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	b2d9      	uxtb	r1, r3
 8001464:	4ac4      	ldr	r2, [pc, #784]	; (8001778 <readall_inputs+0x34c>)
 8001466:	7813      	ldrb	r3, [r2, #0]
 8001468:	f361 0341 	bfi	r3, r1, #1, #1
 800146c:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 800146e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001472:	48c0      	ldr	r0, [pc, #768]	; (8001774 <readall_inputs+0x348>)
 8001474:	f003 fea2 	bl	80051bc <HAL_GPIO_ReadPin>
 8001478:	4603      	mov	r3, r0
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	b2d9      	uxtb	r1, r3
 8001480:	4abd      	ldr	r2, [pc, #756]	; (8001778 <readall_inputs+0x34c>)
 8001482:	7813      	ldrb	r3, [r2, #0]
 8001484:	f361 0382 	bfi	r3, r1, #2, #1
 8001488:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 800148a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800148e:	48b9      	ldr	r0, [pc, #740]	; (8001774 <readall_inputs+0x348>)
 8001490:	f003 fe94 	bl	80051bc <HAL_GPIO_ReadPin>
 8001494:	4603      	mov	r3, r0
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	b2d9      	uxtb	r1, r3
 800149c:	4ab6      	ldr	r2, [pc, #728]	; (8001778 <readall_inputs+0x34c>)
 800149e:	7813      	ldrb	r3, [r2, #0]
 80014a0:	f361 03c3 	bfi	r3, r1, #3, #1
 80014a4:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 80014a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014aa:	48b2      	ldr	r0, [pc, #712]	; (8001774 <readall_inputs+0x348>)
 80014ac:	f003 fe86 	bl	80051bc <HAL_GPIO_ReadPin>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	b2d9      	uxtb	r1, r3
 80014b8:	4aaf      	ldr	r2, [pc, #700]	; (8001778 <readall_inputs+0x34c>)
 80014ba:	7813      	ldrb	r3, [r2, #0]
 80014bc:	f361 1304 	bfi	r3, r1, #4, #1
 80014c0:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 80014c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c6:	48ad      	ldr	r0, [pc, #692]	; (800177c <readall_inputs+0x350>)
 80014c8:	f003 fe78 	bl	80051bc <HAL_GPIO_ReadPin>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	b2d9      	uxtb	r1, r3
 80014d4:	4aa8      	ldr	r2, [pc, #672]	; (8001778 <readall_inputs+0x34c>)
 80014d6:	7813      	ldrb	r3, [r2, #0]
 80014d8:	f361 1345 	bfi	r3, r1, #5, #1
 80014dc:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 80014de:	2102      	movs	r1, #2
 80014e0:	48a6      	ldr	r0, [pc, #664]	; (800177c <readall_inputs+0x350>)
 80014e2:	f003 fe6b 	bl	80051bc <HAL_GPIO_ReadPin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	b2d9      	uxtb	r1, r3
 80014ee:	4aa2      	ldr	r2, [pc, #648]	; (8001778 <readall_inputs+0x34c>)
 80014f0:	7813      	ldrb	r3, [r2, #0]
 80014f2:	f361 1386 	bfi	r3, r1, #6, #1
 80014f6:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 80014f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fc:	48a0      	ldr	r0, [pc, #640]	; (8001780 <readall_inputs+0x354>)
 80014fe:	f003 fe5d 	bl	80051bc <HAL_GPIO_ReadPin>
 8001502:	4603      	mov	r3, r0
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	b2d9      	uxtb	r1, r3
 800150a:	4a9b      	ldr	r2, [pc, #620]	; (8001778 <readall_inputs+0x34c>)
 800150c:	7813      	ldrb	r3, [r2, #0]
 800150e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001512:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8001514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001518:	4899      	ldr	r0, [pc, #612]	; (8001780 <readall_inputs+0x354>)
 800151a:	f003 fe4f 	bl	80051bc <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	b2d9      	uxtb	r1, r3
 8001526:	4a94      	ldr	r2, [pc, #592]	; (8001778 <readall_inputs+0x34c>)
 8001528:	7853      	ldrb	r3, [r2, #1]
 800152a:	f361 0300 	bfi	r3, r1, #0, #1
 800152e:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 8001530:	2101      	movs	r1, #1
 8001532:	4894      	ldr	r0, [pc, #592]	; (8001784 <readall_inputs+0x358>)
 8001534:	f003 fe42 	bl	80051bc <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	b2d9      	uxtb	r1, r3
 8001540:	4a8d      	ldr	r2, [pc, #564]	; (8001778 <readall_inputs+0x34c>)
 8001542:	7853      	ldrb	r3, [r2, #1]
 8001544:	f361 0341 	bfi	r3, r1, #1, #1
 8001548:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 800154a:	2101      	movs	r1, #1
 800154c:	488b      	ldr	r0, [pc, #556]	; (800177c <readall_inputs+0x350>)
 800154e:	f003 fe35 	bl	80051bc <HAL_GPIO_ReadPin>
 8001552:	4603      	mov	r3, r0
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	b2d9      	uxtb	r1, r3
 800155a:	4a87      	ldr	r2, [pc, #540]	; (8001778 <readall_inputs+0x34c>)
 800155c:	7853      	ldrb	r3, [r2, #1]
 800155e:	f361 0382 	bfi	r3, r1, #2, #1
 8001562:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001564:	2140      	movs	r1, #64	; 0x40
 8001566:	4883      	ldr	r0, [pc, #524]	; (8001774 <readall_inputs+0x348>)
 8001568:	f003 fe28 	bl	80051bc <HAL_GPIO_ReadPin>
 800156c:	4603      	mov	r3, r0
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	b2d9      	uxtb	r1, r3
 8001574:	4a80      	ldr	r2, [pc, #512]	; (8001778 <readall_inputs+0x34c>)
 8001576:	7853      	ldrb	r3, [r2, #1]
 8001578:	f361 03c3 	bfi	r3, r1, #3, #1
 800157c:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 800157e:	2101      	movs	r1, #1
 8001580:	4881      	ldr	r0, [pc, #516]	; (8001788 <readall_inputs+0x35c>)
 8001582:	f003 fe1b 	bl	80051bc <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	b2d9      	uxtb	r1, r3
 800158e:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <readall_inputs+0x34c>)
 8001590:	7853      	ldrb	r3, [r2, #1]
 8001592:	f361 1304 	bfi	r3, r1, #4, #1
 8001596:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8001598:	2104      	movs	r1, #4
 800159a:	487b      	ldr	r0, [pc, #492]	; (8001788 <readall_inputs+0x35c>)
 800159c:	f003 fe0e 	bl	80051bc <HAL_GPIO_ReadPin>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	b2d9      	uxtb	r1, r3
 80015a8:	4a73      	ldr	r2, [pc, #460]	; (8001778 <readall_inputs+0x34c>)
 80015aa:	7853      	ldrb	r3, [r2, #1]
 80015ac:	f361 1345 	bfi	r3, r1, #5, #1
 80015b0:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 80015b2:	2102      	movs	r1, #2
 80015b4:	4874      	ldr	r0, [pc, #464]	; (8001788 <readall_inputs+0x35c>)
 80015b6:	f003 fe01 	bl	80051bc <HAL_GPIO_ReadPin>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	b2d9      	uxtb	r1, r3
 80015c2:	4a72      	ldr	r2, [pc, #456]	; (800178c <readall_inputs+0x360>)
 80015c4:	7813      	ldrb	r3, [r2, #0]
 80015c6:	f361 0300 	bfi	r3, r1, #0, #1
 80015ca:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 80015cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d0:	4868      	ldr	r0, [pc, #416]	; (8001774 <readall_inputs+0x348>)
 80015d2:	f003 fdf3 	bl	80051bc <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	b2d9      	uxtb	r1, r3
 80015de:	4a6b      	ldr	r2, [pc, #428]	; (800178c <readall_inputs+0x360>)
 80015e0:	7813      	ldrb	r3, [r2, #0]
 80015e2:	f361 0341 	bfi	r3, r1, #1, #1
 80015e6:	7013      	strb	r3, [r2, #0]
	sdc_in.Akku1SDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 80015e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ec:	4861      	ldr	r0, [pc, #388]	; (8001774 <readall_inputs+0x348>)
 80015ee:	f003 fde5 	bl	80051bc <HAL_GPIO_ReadPin>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	b2d9      	uxtb	r1, r3
 80015fa:	4a64      	ldr	r2, [pc, #400]	; (800178c <readall_inputs+0x360>)
 80015fc:	7813      	ldrb	r3, [r2, #0]
 80015fe:	f361 0382 	bfi	r3, r1, #2, #1
 8001602:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8001604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001608:	4861      	ldr	r0, [pc, #388]	; (8001790 <readall_inputs+0x364>)
 800160a:	f003 fdd7 	bl	80051bc <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	b2d9      	uxtb	r1, r3
 8001616:	4a5d      	ldr	r2, [pc, #372]	; (800178c <readall_inputs+0x360>)
 8001618:	7813      	ldrb	r3, [r2, #0]
 800161a:	f361 03c3 	bfi	r3, r1, #3, #1
 800161e:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 8001620:	2102      	movs	r1, #2
 8001622:	4858      	ldr	r0, [pc, #352]	; (8001784 <readall_inputs+0x358>)
 8001624:	f003 fdca 	bl	80051bc <HAL_GPIO_ReadPin>
 8001628:	4603      	mov	r3, r0
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	b2d9      	uxtb	r1, r3
 8001630:	4a56      	ldr	r2, [pc, #344]	; (800178c <readall_inputs+0x360>)
 8001632:	7813      	ldrb	r3, [r2, #0]
 8001634:	f361 1304 	bfi	r3, r1, #4, #1
 8001638:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 800163a:	2110      	movs	r1, #16
 800163c:	4851      	ldr	r0, [pc, #324]	; (8001784 <readall_inputs+0x358>)
 800163e:	f003 fdbd 	bl	80051bc <HAL_GPIO_ReadPin>
 8001642:	4603      	mov	r3, r0
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	b2d9      	uxtb	r1, r3
 800164a:	4a52      	ldr	r2, [pc, #328]	; (8001794 <readall_inputs+0x368>)
 800164c:	7813      	ldrb	r3, [r2, #0]
 800164e:	f361 0300 	bfi	r3, r1, #0, #1
 8001652:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8001654:	2110      	movs	r1, #16
 8001656:	484a      	ldr	r0, [pc, #296]	; (8001780 <readall_inputs+0x354>)
 8001658:	f003 fdb0 	bl	80051bc <HAL_GPIO_ReadPin>
 800165c:	4603      	mov	r3, r0
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	b2d9      	uxtb	r1, r3
 8001664:	4a4b      	ldr	r2, [pc, #300]	; (8001794 <readall_inputs+0x368>)
 8001666:	7813      	ldrb	r3, [r2, #0]
 8001668:	f361 0341 	bfi	r3, r1, #1, #1
 800166c:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 800166e:	2108      	movs	r1, #8
 8001670:	4840      	ldr	r0, [pc, #256]	; (8001774 <readall_inputs+0x348>)
 8001672:	f003 fda3 	bl	80051bc <HAL_GPIO_ReadPin>
 8001676:	4603      	mov	r3, r0
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	b2d9      	uxtb	r1, r3
 800167e:	4a45      	ldr	r2, [pc, #276]	; (8001794 <readall_inputs+0x368>)
 8001680:	7813      	ldrb	r3, [r2, #0]
 8001682:	f361 0382 	bfi	r3, r1, #2, #1
 8001686:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8001688:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800168c:	483d      	ldr	r0, [pc, #244]	; (8001784 <readall_inputs+0x358>)
 800168e:	f003 fd95 	bl	80051bc <HAL_GPIO_ReadPin>
 8001692:	4603      	mov	r3, r0
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	b2d9      	uxtb	r1, r3
 800169a:	4a3e      	ldr	r2, [pc, #248]	; (8001794 <readall_inputs+0x368>)
 800169c:	7813      	ldrb	r3, [r2, #0]
 800169e:	f361 03c3 	bfi	r3, r1, #3, #1
 80016a2:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 80016a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a8:	4837      	ldr	r0, [pc, #220]	; (8001788 <readall_inputs+0x35c>)
 80016aa:	f003 fd87 	bl	80051bc <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	b2d9      	uxtb	r1, r3
 80016b6:	4a37      	ldr	r2, [pc, #220]	; (8001794 <readall_inputs+0x368>)
 80016b8:	7813      	ldrb	r3, [r2, #0]
 80016ba:	f361 1304 	bfi	r3, r1, #4, #1
 80016be:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 80016c0:	2110      	movs	r1, #16
 80016c2:	482c      	ldr	r0, [pc, #176]	; (8001774 <readall_inputs+0x348>)
 80016c4:	f003 fd7a 	bl	80051bc <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	b2d9      	uxtb	r1, r3
 80016d0:	4a30      	ldr	r2, [pc, #192]	; (8001794 <readall_inputs+0x368>)
 80016d2:	7813      	ldrb	r3, [r2, #0]
 80016d4:	f361 1345 	bfi	r3, r1, #5, #1
 80016d8:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 80016da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016de:	4828      	ldr	r0, [pc, #160]	; (8001780 <readall_inputs+0x354>)
 80016e0:	f003 fd6c 	bl	80051bc <HAL_GPIO_ReadPin>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	b2d9      	uxtb	r1, r3
 80016ec:	4a29      	ldr	r2, [pc, #164]	; (8001794 <readall_inputs+0x368>)
 80016ee:	7813      	ldrb	r3, [r2, #0]
 80016f0:	f361 1386 	bfi	r3, r1, #6, #1
 80016f4:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 80016f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016fa:	4825      	ldr	r0, [pc, #148]	; (8001790 <readall_inputs+0x364>)
 80016fc:	f003 fd5e 	bl	80051bc <HAL_GPIO_ReadPin>
 8001700:	4603      	mov	r3, r0
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	b2d9      	uxtb	r1, r3
 8001708:	4a22      	ldr	r2, [pc, #136]	; (8001794 <readall_inputs+0x368>)
 800170a:	7813      	ldrb	r3, [r2, #0]
 800170c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001710:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	4820      	ldr	r0, [pc, #128]	; (8001798 <readall_inputs+0x36c>)
 8001716:	f003 fd51 	bl	80051bc <HAL_GPIO_ReadPin>
 800171a:	4603      	mov	r3, r0
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	b2d9      	uxtb	r1, r3
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <readall_inputs+0x368>)
 8001724:	7853      	ldrb	r3, [r2, #1]
 8001726:	f361 0300 	bfi	r3, r1, #0, #1
 800172a:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 800172c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001730:	4815      	ldr	r0, [pc, #84]	; (8001788 <readall_inputs+0x35c>)
 8001732:	f003 fd43 	bl	80051bc <HAL_GPIO_ReadPin>
 8001736:	4603      	mov	r3, r0
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	b2d9      	uxtb	r1, r3
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <readall_inputs+0x368>)
 8001740:	7853      	ldrb	r3, [r2, #1]
 8001742:	f361 0341 	bfi	r3, r1, #1, #1
 8001746:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 8001748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800174c:	480e      	ldr	r0, [pc, #56]	; (8001788 <readall_inputs+0x35c>)
 800174e:	f003 fd35 	bl	80051bc <HAL_GPIO_ReadPin>
 8001752:	4603      	mov	r3, r0
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	b2d9      	uxtb	r1, r3
 800175a:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <readall_inputs+0x368>)
 800175c:	7853      	ldrb	r3, [r2, #1]
 800175e:	f361 0382 	bfi	r3, r1, #2, #1
 8001762:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 8001764:	2120      	movs	r1, #32
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <readall_inputs+0x358>)
 8001768:	f003 fd28 	bl	80051bc <HAL_GPIO_ReadPin>
 800176c:	4603      	mov	r3, r0
 800176e:	e015      	b.n	800179c <readall_inputs+0x370>
 8001770:	080086f0 	.word	0x080086f0
 8001774:	40021000 	.word	0x40021000
 8001778:	2000003c 	.word	0x2000003c
 800177c:	40021400 	.word	0x40021400
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40021800 	.word	0x40021800
 8001788:	40020000 	.word	0x40020000
 800178c:	20000040 	.word	0x20000040
 8001790:	40020400 	.word	0x40020400
 8001794:	20000044 	.word	0x20000044
 8001798:	40020800 	.word	0x40020800
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	4a30      	ldr	r2, [pc, #192]	; (8001864 <readall_inputs+0x438>)
 80017a4:	7853      	ldrb	r3, [r2, #1]
 80017a6:	f361 03c3 	bfi	r3, r1, #3, #1
 80017aa:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 80017ac:	2140      	movs	r1, #64	; 0x40
 80017ae:	482e      	ldr	r0, [pc, #184]	; (8001868 <readall_inputs+0x43c>)
 80017b0:	f003 fd04 	bl	80051bc <HAL_GPIO_ReadPin>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	b2d9      	uxtb	r1, r3
 80017bc:	4a29      	ldr	r2, [pc, #164]	; (8001864 <readall_inputs+0x438>)
 80017be:	7853      	ldrb	r3, [r2, #1]
 80017c0:	f361 1304 	bfi	r3, r1, #4, #1
 80017c4:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	4827      	ldr	r0, [pc, #156]	; (8001868 <readall_inputs+0x43c>)
 80017ca:	f003 fcf7 	bl	80051bc <HAL_GPIO_ReadPin>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	b2d9      	uxtb	r1, r3
 80017d6:	4a23      	ldr	r2, [pc, #140]	; (8001864 <readall_inputs+0x438>)
 80017d8:	7853      	ldrb	r3, [r2, #1]
 80017da:	f361 1345 	bfi	r3, r1, #5, #1
 80017de:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 80017e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e4:	4820      	ldr	r0, [pc, #128]	; (8001868 <readall_inputs+0x43c>)
 80017e6:	f003 fce9 	bl	80051bc <HAL_GPIO_ReadPin>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	b2d9      	uxtb	r1, r3
 80017f2:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <readall_inputs+0x438>)
 80017f4:	7853      	ldrb	r3, [r2, #1]
 80017f6:	f361 1386 	bfi	r3, r1, #6, #1
 80017fa:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 80017fc:	2120      	movs	r1, #32
 80017fe:	481b      	ldr	r0, [pc, #108]	; (800186c <readall_inputs+0x440>)
 8001800:	f003 fcdc 	bl	80051bc <HAL_GPIO_ReadPin>
 8001804:	4603      	mov	r3, r0
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	b2d9      	uxtb	r1, r3
 800180c:	4a15      	ldr	r2, [pc, #84]	; (8001864 <readall_inputs+0x438>)
 800180e:	7853      	ldrb	r3, [r2, #1]
 8001810:	f361 13c7 	bfi	r3, r1, #7, #1
 8001814:	7053      	strb	r3, [r2, #1]

#ifdef DEBUG_INPUT
	ITM_SendString("Eingaenge gelesen.\n");
 8001816:	4816      	ldr	r0, [pc, #88]	; (8001870 <readall_inputs+0x444>)
 8001818:	f7ff fdcc 	bl	80013b4 <ITM_SendString>
	ITM_SendString("system_in:\t");
 800181c:	4815      	ldr	r0, [pc, #84]	; (8001874 <readall_inputs+0x448>)
 800181e:	f7ff fdc9 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(system_in.systeminput);
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <readall_inputs+0x44c>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fdce 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 800182c:	200a      	movs	r0, #10
 800182e:	f7ff fdd5 	bl	80013dc <ITM_SendChar>
	ITM_SendString("sdc_in:\t");
 8001832:	4812      	ldr	r0, [pc, #72]	; (800187c <readall_inputs+0x450>)
 8001834:	f7ff fdbe 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(sdc_in.sdcinput);
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <readall_inputs+0x454>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fdc3 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001842:	200a      	movs	r0, #10
 8001844:	f7ff fdca 	bl	80013dc <ITM_SendChar>
	ITM_SendString("komfort_in:\t");
 8001848:	480e      	ldr	r0, [pc, #56]	; (8001884 <readall_inputs+0x458>)
 800184a:	f7ff fdb3 	bl	80013b4 <ITM_SendString>
	ITM_SendNumber(komfort_in.komfortinput);
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <readall_inputs+0x438>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fdb8 	bl	80013c8 <ITM_SendNumber>
	ITM_SendChar('\n');
 8001858:	200a      	movs	r0, #10
 800185a:	f7ff fdbf 	bl	80013dc <ITM_SendChar>
#endif
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000044 	.word	0x20000044
 8001868:	40021800 	.word	0x40021800
 800186c:	40021000 	.word	0x40021000
 8001870:	08008704 	.word	0x08008704
 8001874:	08008718 	.word	0x08008718
 8001878:	2000003c 	.word	0x2000003c
 800187c:	08008724 	.word	0x08008724
 8001880:	20000040 	.word	0x20000040
 8001884:	08008730 	.word	0x08008730

08001888 <readAnlasser>:
//----------------------------------------------------------------------

// Anlasser einlesen, Wert in Variable speichern, bis KL15 abfaellt
//----------------------------------------------------------------------
void readAnlasser(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
	if (system_in.Anlasser != 1)
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <readAnlasser+0x50>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <readAnlasser+0x1e>
	{
		sdc_in.Anlasser = 1;
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <readAnlasser+0x54>)
 800189c:	7813      	ldrb	r3, [r2, #0]
 800189e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a2:	7013      	strb	r3, [r2, #0]
	}
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
	{
		sdc_in.Anlasser = 0;
	}
}
 80018a4:	e012      	b.n	80018cc <readAnlasser+0x44>
	else if ((sdc_in.Anlasser == 1) && (system_in.KL15 == 1))
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <readAnlasser+0x54>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00b      	beq.n	80018cc <readAnlasser+0x44>
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <readAnlasser+0x50>)
 80018b6:	785b      	ldrb	r3, [r3, #1]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <readAnlasser+0x44>
		sdc_in.Anlasser = 0;
 80018c2:	4a06      	ldr	r2, [pc, #24]	; (80018dc <readAnlasser+0x54>)
 80018c4:	7813      	ldrb	r3, [r2, #0]
 80018c6:	f36f 1386 	bfc	r3, #6, #1
 80018ca:	7013      	strb	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	2000003c 	.word	0x2000003c
 80018dc:	20000040 	.word	0x20000040

080018e0 <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80018e4:	f001 fdf6 	bl	80034d4 <HAL_GetTick>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <pwm_oelstand>:
//----------------------------------------------------------------------

// PWM fuer Oelstandsensor am Kombiinstrument
//----------------------------------------------------------------------
void pwm_oelstand(uint16_t time)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
	// Auswahl wie viele Sekunden vergangen
	switch (time)																					// Zeit wird uebergeben
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	2b4b      	cmp	r3, #75	; 0x4b
 80018fe:	d01f      	beq.n	8001940 <pwm_oelstand+0x50>
 8001900:	2b4b      	cmp	r3, #75	; 0x4b
 8001902:	dc24      	bgt.n	800194e <pwm_oelstand+0x5e>
 8001904:	2b2d      	cmp	r3, #45	; 0x2d
 8001906:	d014      	beq.n	8001932 <pwm_oelstand+0x42>
 8001908:	2b2d      	cmp	r3, #45	; 0x2d
 800190a:	dc20      	bgt.n	800194e <pwm_oelstand+0x5e>
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <pwm_oelstand+0x26>
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d007      	beq.n	8001924 <pwm_oelstand+0x34>
			break;
		case 75: // 5x15 ms = 75 ms
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
			break;
		default:
			break;
 8001914:	e01b      	b.n	800194e <pwm_oelstand+0x5e>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 0ms Oelstandsensor Ausgang low
 8001916:	2200      	movs	r2, #0
 8001918:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800191c:	480e      	ldr	r0, [pc, #56]	; (8001958 <pwm_oelstand+0x68>)
 800191e:	f003 fc65 	bl	80051ec <HAL_GPIO_WritePin>
			break;
 8001922:	e015      	b.n	8001950 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 15ms Oelstandsensor Ausgang high
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800192a:	480b      	ldr	r0, [pc, #44]	; (8001958 <pwm_oelstand+0x68>)
 800192c:	f003 fc5e 	bl	80051ec <HAL_GPIO_WritePin>
			break;
 8001930:	e00e      	b.n	8001950 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);			// Bei 45ms Oelstandsensor Ausgang low
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <pwm_oelstand+0x68>)
 800193a:	f003 fc57 	bl	80051ec <HAL_GPIO_WritePin>
			break;
 800193e:	e007      	b.n	8001950 <pwm_oelstand+0x60>
			HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_SET);			// Bei 75ms Oelstandsensor Ausgang high
 8001940:	2201      	movs	r2, #1
 8001942:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001946:	4804      	ldr	r0, [pc, #16]	; (8001958 <pwm_oelstand+0x68>)
 8001948:	f003 fc50 	bl	80051ec <HAL_GPIO_WritePin>
			break;
 800194c:	e000      	b.n	8001950 <pwm_oelstand+0x60>
			break;
 800194e:	bf00      	nop
	}
	// Nach 405ms wird das ganze wiederholt
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40020000 	.word	0x40020000

0800195c <cockpit_default>:
//----------------------------------------------------------------------

// Setze Cockpit auf default, alle Fehler OK
//----------------------------------------------------------------------
void cockpit_default(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	leuchten_out.Rueckwarn = 1;																		// Ruecklichtwarnung setzen
 8001960:	4a1f      	ldr	r2, [pc, #124]	; (80019e0 <cockpit_default+0x84>)
 8001962:	7813      	ldrb	r3, [r2, #0]
 8001964:	f043 0310 	orr.w	r3, r3, #16
 8001968:	7013      	strb	r3, [r2, #0]
	leuchten_out.Wischwarn = 1;																		// Wischwasserwarnung setzen
 800196a:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <cockpit_default+0x84>)
 800196c:	7813      	ldrb	r3, [r2, #0]
 800196e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001972:	7013      	strb	r3, [r2, #0]
	leuchten_out.Bremswarn = 1;																		// Bremslichtwarnung setzen
 8001974:	4a1a      	ldr	r2, [pc, #104]	; (80019e0 <cockpit_default+0x84>)
 8001976:	7813      	ldrb	r3, [r2, #0]
 8001978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800197c:	7013      	strb	r3, [r2, #0]
	leuchten_out.Oeldruck = 1;																		// Oeldruckwarnung setzen
 800197e:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <cockpit_default+0x84>)
 8001980:	7853      	ldrb	r3, [r2, #1]
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, leuchten_out.Rueckwarn);			// Fehlermeldung fuer Ruecklichtwarnung einschalten
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <cockpit_default+0x84>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001990:	b2db      	uxtb	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	4813      	ldr	r0, [pc, #76]	; (80019e4 <cockpit_default+0x88>)
 8001998:	f003 fc28 	bl	80051ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WISCHWARNUNG_GPIO_Port, WISCHWARNUNG_Pin, leuchten_out.Wischwarn);			// Fehlermeldung fuer Wischwasserwarnung einschalten
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <cockpit_default+0x84>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ac:	480e      	ldr	r0, [pc, #56]	; (80019e8 <cockpit_default+0x8c>)
 80019ae:	f003 fc1d 	bl	80051ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BREMSWARNUNG_GPIO_Port, BREMSWARNUNG_Pin, leuchten_out.Bremswarn);			// Fehlermeldung fuer Bremslichtwarnung einschalten
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <cockpit_default+0x84>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c2:	4809      	ldr	r0, [pc, #36]	; (80019e8 <cockpit_default+0x8c>)
 80019c4:	f003 fc12 	bl	80051ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OELDRUCK_GPIO_Port, OELDRUCK_Pin, leuchten_out.Oeldruck);						// Fehlermeldung fuer Oeldruckwarnung einschalten
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <cockpit_default+0x84>)
 80019ca:	785b      	ldrb	r3, [r3, #1]
 80019cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	2104      	movs	r1, #4
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <cockpit_default+0x90>)
 80019d8:	f003 fc08 	bl	80051ec <HAL_GPIO_WritePin>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000050 	.word	0x20000050
 80019e4:	40020c00 	.word	0x40020c00
 80019e8:	40021800 	.word	0x40021800
 80019ec:	40021400 	.word	0x40021400

080019f0 <testSDC>:
//----------------------------------------------------------------------

// Testen der Spannung am Shutdown-Circuit, Signal 1 = offen, Signal = 0 geschlossen
//----------------------------------------------------------------------
void testSDC(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_SET);					// Einschalten von Shutdown-Circuit zum testen
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019fa:	4811      	ldr	r0, [pc, #68]	; (8001a40 <testSDC+0x50>)
 80019fc:	f003 fbf6 	bl	80051ec <HAL_GPIO_WritePin>
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001a00:	2064      	movs	r0, #100	; 0x64
 8001a02:	f001 fd73 	bl	80034ec <HAL_Delay>
	if (HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin) == 1)								// Einlesen von SDC0 Eingang
 8001a06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <testSDC+0x50>)
 8001a0c:	f003 fbd6 	bl	80051bc <HAL_GPIO_ReadPin>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d103      	bne.n	8001a1e <testSDC+0x2e>
	{
#ifndef DEBUG_SDC
		software_error(ERROR_SDC_SPANNUNG);															// Sollte Sicherung kaputt oder Kurzschluss, dann Fehlerausgeben
#else
#warning Das Abschalten des Softwarefehlers kann unter Umstaenden zu Beschaedigung der HW fuehren.
		software_error_debug(ERROR_SDC_SPANNUNG);													// Errorfunktion stoppt Programm nicht
 8001a16:	2003      	movs	r0, #3
 8001a18:	f7ff fc7a 	bl	8001310 <software_error_debug>
 8001a1c:	e004      	b.n	8001a28 <testSDC+0x38>
#endif
	}
	else
	{
	  	sdc_in.SDC12V = 1;																			// SDC Spannungsversorgung OK
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <testSDC+0x54>)
 8001a20:	7813      	ldrb	r3, [r2, #0]
 8001a22:	f043 0320 	orr.w	r3, r3, #32
 8001a26:	7013      	strb	r3, [r2, #0]
	}
	HAL_Delay(100);																					// Wartezeit zum setzen
 8001a28:	2064      	movs	r0, #100	; 0x64
 8001a2a:	f001 fd5f 	bl	80034ec <HAL_Delay>
	HAL_GPIO_WritePin(MOTOR_SDC_OUT_GPIO_Port, MOTOR_SDC_OUT_Pin, GPIO_PIN_RESET);					// Auschalten von Shutdown-Circuit
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <testSDC+0x50>)
 8001a36:	f003 fbd9 	bl	80051ec <HAL_GPIO_WritePin>
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	20000040 	.word	0x20000040

08001a48 <readTrottle>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readTrottle(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	80fb      	strh	r3, [r7, #6]

	// Pruefen ob Variable Anlasser aktiv ist
	if (sdc_in.Anlasser == 1)												// Nur aktiv, wenn KL15 an und Anlasser einmal betaetigt.
 8001a52:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <readTrottle+0x104>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d070      	beq.n	8001b42 <readTrottle+0xfa>
	{
		// Gaspedal einlesen
		ADC_Gas = ADC_Gaspedal();
 8001a60:	f7ff f9a4 	bl	8000dac <ADC_Gaspedal>
 8001a64:	4603      	mov	r3, r0
 8001a66:	80fb      	strh	r3, [r7, #6]

		// Pruefen ob Kupplung getreten wurde
		if (system_in.Kupplung == 1)										// Wenn Kupplung nicht getreten wurde == 1
 8001a68:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <readTrottle+0x108>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d063      	beq.n	8001b3e <readTrottle+0xf6>
		{
			// Wenn Leerlauf und Kickdown aktiv Plausibilitaetsfehler
			if ((system_in.Leerlauf == 1) && (system_in.Kickdown == 1))
 8001a76:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <readTrottle+0x108>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00d      	beq.n	8001aa0 <readTrottle+0x58>
 8001a84:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <readTrottle+0x108>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <readTrottle+0x58>
			{
				// Fehlermeldung auf Uart ausgeben
				uartTransmitString("Error_Gaspedal_1 Plausibilitaetsfehler: Kickdown und Leerlauf");
 8001a92:	4830      	ldr	r0, [pc, #192]	; (8001b54 <readTrottle+0x10c>)
 8001a94:	f7fe fec8 	bl	8000828 <uartTransmitString>
				// Gaspedal invalide
				software_error(ERROR_GASPEDAL);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff fbe9 	bl	8001270 <software_error>
 8001a9e:	e050      	b.n	8001b42 <readTrottle+0xfa>
			}
			// Threshold Wert vergleichen / Threshold Wert >= THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf == 1) && (ADC_Gas >= GAS_THRESHOLD))
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <readTrottle+0x108>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <readTrottle+0x78>
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ab4:	d304      	bcc.n	8001ac0 <readTrottle+0x78>
			{
				// Wenn Wert groesser THRESHOLD ist, dann THRESHOLD vom ADC-Wert abziehen
				ADC_Gas -= GAS_THRESHOLD;
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001abc:	80fb      	strh	r3, [r7, #6]
 8001abe:	e040      	b.n	8001b42 <readTrottle+0xfa>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Leerlauf aktiv
			else if ((system_in.Leerlauf != 1) || ((system_in.Leerlauf == 1) && (ADC_Gas < GAS_THRESHOLD)))
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <readTrottle+0x108>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00a      	beq.n	8001ae4 <readTrottle+0x9c>
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <readTrottle+0x108>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <readTrottle+0xa2>
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ae2:	d202      	bcs.n	8001aea <readTrottle+0xa2>
			{
				// Wenn der Wert kleine als THRESHOLD ist, dann ADC ignorieren, alle Werte sind 0
				ADC_Gas = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	80fb      	strh	r3, [r7, #6]
 8001ae8:	e02b      	b.n	8001b42 <readTrottle+0xfa>
			}
			// Threshold Wert vergleichen / Threshold Wert < THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas < (GAS_MAX_ADC - GAS_THRESHOLD)))
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <readTrottle+0x108>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <readTrottle+0xba>
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d91f      	bls.n	8001b42 <readTrottle+0xfa>
			{
				// Wenn Wert kleiner THRESHOLD ist

			}
			// Threshold Wert vergleichen / Threshold Wert > THRESHOLD und Kickdown aktiv
			else if ((system_in.Kickdown == 1) && (ADC_Gas >= (GAS_MAX_ADC - GAS_THRESHOLD)))
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <readTrottle+0x108>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <readTrottle+0xda>
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	f640 62d2 	movw	r2, #3794	; 0xed2
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d903      	bls.n	8001b22 <readTrottle+0xda>
			{
				// Wenn Wert gleich THRESHOLD ist
				ADC_Gas = GAS_MAX_ADC;
 8001b1a:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001b1e:	80fb      	strh	r3, [r7, #6]
 8001b20:	e00f      	b.n	8001b42 <readTrottle+0xfa>
			}
			// Wenn Kickdown betaetigt, Gaspedal Error
			else if (system_in.Kickdown != 1)
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <readTrottle+0x108>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d108      	bne.n	8001b42 <readTrottle+0xfa>
			{
				// Fehlermeldung ausgeben
				uartTransmitString("Error_Gaspedal_1 Plausibilitaetsfehler: Kickdown");
 8001b30:	4809      	ldr	r0, [pc, #36]	; (8001b58 <readTrottle+0x110>)
 8001b32:	f7fe fe79 	bl	8000828 <uartTransmitString>
				// Gaspedal invalide
				software_error(ERROR_GASPEDAL);
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff fb9a 	bl	8001270 <software_error>
 8001b3c:	e001      	b.n	8001b42 <readTrottle+0xfa>
		}
		// Wenn Kupplung getreten == 0
		else
		{
			// Wenn Kupplung oder Bremse getreten
			ADC_Gas = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	80fb      	strh	r3, [r7, #6]
		}
	}

	return ADC_Gas;
 8001b42:	88fb      	ldrh	r3, [r7, #6]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000040 	.word	0x20000040
 8001b50:	2000003c 	.word	0x2000003c
 8001b54:	08008740 	.word	0x08008740
 8001b58:	08008780 	.word	0x08008780

08001b5c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b62:	463b      	mov	r3, r7
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001b70:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <MX_ADC1_Init+0x9c>)
 8001b72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b74:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001b76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b8e:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001b9e:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <MX_ADC1_Init+0xa0>)
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001bbe:	f001 fd01 	bl	80035c4 <HAL_ADC_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001bc8:	f001 fa68 	bl	800309c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001bcc:	230e      	movs	r3, #14
 8001bce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bd8:	463b      	mov	r3, r7
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_ADC1_Init+0x98>)
 8001bde:	f001 fecf 	bl	8003980 <HAL_ADC_ConfigChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001be8:	f001 fa58 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000058 	.word	0x20000058
 8001bf8:	40012000 	.word	0x40012000
 8001bfc:	0f000001 	.word	0x0f000001

08001c00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	; 0x30
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a2d      	ldr	r2, [pc, #180]	; (8001cd4 <HAL_ADC_MspInit+0xd4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d153      	bne.n	8001cca <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_ADC_MspInit+0xd8>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <HAL_ADC_MspInit+0xd8>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_ADC_MspInit+0xd8>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_ADC_MspInit+0xd8>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a26      	ldr	r2, [pc, #152]	; (8001cd8 <HAL_ADC_MspInit+0xd8>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <HAL_ADC_MspInit+0xd8>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_ADC_MspInit+0xd8>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a20      	ldr	r2, [pc, #128]	; (8001cd8 <HAL_ADC_MspInit+0xd8>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <HAL_ADC_MspInit+0xd8>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_ADC_MspInit+0xd8>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <HAL_ADC_MspInit+0xd8>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <HAL_ADC_MspInit+0xd8>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 8001c82:	23f8      	movs	r3, #248	; 0xf8
 8001c84:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c86:	2303      	movs	r3, #3
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	4811      	ldr	r0, [pc, #68]	; (8001cdc <HAL_ADC_MspInit+0xdc>)
 8001c96:	f003 f8e5 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8001c9a:	2330      	movs	r3, #48	; 0x30
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <HAL_ADC_MspInit+0xe0>)
 8001cae:	f003 f8d9 	bl	8004e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <HAL_ADC_MspInit+0xe4>)
 8001cc6:	f003 f8cd 	bl	8004e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3730      	adds	r7, #48	; 0x30
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40012000 	.word	0x40012000
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020400 	.word	0x40020400

08001ce8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <MX_CAN1_Init+0x64>)
 8001cee:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <MX_CAN1_Init+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 30;
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <MX_CAN1_Init+0x64>)
 8001cf4:	221e      	movs	r2, #30
 8001cf6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <MX_CAN1_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <MX_CAN1_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_CAN1_Init+0x64>)
 8001d06:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d0a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <MX_CAN1_Init+0x64>)
 8001d0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d12:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <MX_CAN1_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <MX_CAN1_Init+0x64>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <MX_CAN1_Init+0x64>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <MX_CAN1_Init+0x64>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <MX_CAN1_Init+0x64>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <MX_CAN1_Init+0x64>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d38:	4804      	ldr	r0, [pc, #16]	; (8001d4c <MX_CAN1_Init+0x64>)
 8001d3a:	f002 f871 	bl	8003e20 <HAL_CAN_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001d44:	f001 f9aa 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200000c8 	.word	0x200000c8
 8001d50:	40006400 	.word	0x40006400

08001d54 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001d58:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001d5a:	4a34      	ldr	r2, [pc, #208]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001d5e:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001d60:	2206      	movs	r2, #6
 8001d62:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001d64:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d6a:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001d72:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d76:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d78:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001d7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d7e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001d80:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001d86:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001d98:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001da4:	4820      	ldr	r0, [pc, #128]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001da6:	f002 f83b 	bl	8003e20 <HAL_CAN_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001db0:	f001 f974 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001db4:	481c      	ldr	r0, [pc, #112]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001db6:	f002 fa1b 	bl	80041f0 <HAL_CAN_Start>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 8001dc0:	f001 f96c 	bl	800309c <Error_Handler>
	}

	// Aktiviere Interrupts fuer CAN Bus
	if((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_FULL)) != HAL_OK)
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	4818      	ldr	r0, [pc, #96]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001dc8:	f002 fc5c 	bl	8004684 <HAL_CAN_ActivateNotification>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN Interrupts
		Error_Handler();
 8001dd2:	f001 f963 	bl	800309c <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <MX_CAN3_Init+0xdc>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_CAN3_Init+0xdc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <MX_CAN3_Init+0xdc>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0111 << 5;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_CAN3_Init+0xdc>)
 8001dea:	f242 2220 	movw	r2, #8736	; 0x2220
 8001dee:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_CAN3_Init+0xdc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0111 << 5;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_CAN3_Init+0xdc>)
 8001df8:	f242 2220 	movw	r2, #8736	; 0x2220
 8001dfc:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0;
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_CAN3_Init+0xdc>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <MX_CAN3_Init+0xdc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_CAN3_Init+0xdc>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001e10:	4907      	ldr	r1, [pc, #28]	; (8001e30 <MX_CAN3_Init+0xdc>)
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <MX_CAN3_Init+0xd4>)
 8001e14:	f002 f900 	bl	8004018 <HAL_CAN_ConfigFilter>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_CAN3_Init+0xce>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 8001e1e:	f001 f93d 	bl	800309c <Error_Handler>
	}

  /* USER CODE END CAN3_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200000f0 	.word	0x200000f0
 8001e2c:	40003400 	.word	0x40003400
 8001e30:	200000a0 	.word	0x200000a0

08001e34 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	; 0x30
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a32      	ldr	r2, [pc, #200]	; (8001f1c <HAL_CAN_MspInit+0xe8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d128      	bne.n	8001ea8 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e56:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <HAL_CAN_MspInit+0xec>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a31      	ldr	r2, [pc, #196]	; (8001f20 <HAL_CAN_MspInit+0xec>)
 8001e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <HAL_CAN_MspInit+0xec>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <HAL_CAN_MspInit+0xec>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a2b      	ldr	r2, [pc, #172]	; (8001f20 <HAL_CAN_MspInit+0xec>)
 8001e74:	f043 0308 	orr.w	r3, r3, #8
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_CAN_MspInit+0xec>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e86:	2303      	movs	r3, #3
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e96:	2309      	movs	r3, #9
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4820      	ldr	r0, [pc, #128]	; (8001f24 <HAL_CAN_MspInit+0xf0>)
 8001ea2:	f002 ffdf 	bl	8004e64 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001ea6:	e035      	b.n	8001f14 <HAL_CAN_MspInit+0xe0>
  else if(canHandle->Instance==CAN3)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <HAL_CAN_MspInit+0xf4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d130      	bne.n	8001f14 <HAL_CAN_MspInit+0xe0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_CAN_MspInit+0xec>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <HAL_CAN_MspInit+0xec>)
 8001eb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_CAN_MspInit+0xec>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_CAN_MspInit+0xec>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <HAL_CAN_MspInit+0xec>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_CAN_MspInit+0xec>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8001ee2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001ef4:	230b      	movs	r3, #11
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	480b      	ldr	r0, [pc, #44]	; (8001f2c <HAL_CAN_MspInit+0xf8>)
 8001f00:	f002 ffb0 	bl	8004e64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2100      	movs	r1, #0
 8001f08:	2069      	movs	r0, #105	; 0x69
 8001f0a:	f002 fee2 	bl	8004cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8001f0e:	2069      	movs	r0, #105	; 0x69
 8001f10:	f002 fefb 	bl	8004d0a <HAL_NVIC_EnableIRQ>
}
 8001f14:	bf00      	nop
 8001f16:	3730      	adds	r7, #48	; 0x30
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40006400 	.word	0x40006400
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020c00 	.word	0x40020c00
 8001f28:	40003400 	.word	0x40003400
 8001f2c:	40020000 	.word	0x40020000

08001f30 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08e      	sub	sp, #56	; 0x38
 8001f34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f46:	4bb6      	ldr	r3, [pc, #728]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4ab5      	ldr	r2, [pc, #724]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001f4c:	f043 0310 	orr.w	r3, r3, #16
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4bb3      	ldr	r3, [pc, #716]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5e:	4bb0      	ldr	r3, [pc, #704]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4aaf      	ldr	r2, [pc, #700]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4bad      	ldr	r3, [pc, #692]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f76:	4baa      	ldr	r3, [pc, #680]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4aa9      	ldr	r2, [pc, #676]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001f7c:	f043 0320 	orr.w	r3, r3, #32
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4ba7      	ldr	r3, [pc, #668]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f8e:	4ba4      	ldr	r3, [pc, #656]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4aa3      	ldr	r2, [pc, #652]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4ba1      	ldr	r3, [pc, #644]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	4b9e      	ldr	r3, [pc, #632]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a9d      	ldr	r2, [pc, #628]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b9b      	ldr	r3, [pc, #620]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	4b98      	ldr	r3, [pc, #608]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a97      	ldr	r2, [pc, #604]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b95      	ldr	r3, [pc, #596]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fd6:	4b92      	ldr	r3, [pc, #584]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a91      	ldr	r2, [pc, #580]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b8f      	ldr	r3, [pc, #572]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fee:	4b8c      	ldr	r3, [pc, #560]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a8b      	ldr	r2, [pc, #556]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001ff4:	f043 0308 	orr.w	r3, r3, #8
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b89      	ldr	r3, [pc, #548]	; (8002220 <MX_GPIO_Init+0x2f0>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8002006:	2200      	movs	r2, #0
 8002008:	f248 0187 	movw	r1, #32903	; 0x8087
 800200c:	4885      	ldr	r0, [pc, #532]	; (8002224 <MX_GPIO_Init+0x2f4>)
 800200e:	f003 f8ed 	bl	80051ec <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f242 0108 	movw	r1, #8200	; 0x2008
 8002018:	4883      	ldr	r0, [pc, #524]	; (8002228 <MX_GPIO_Init+0x2f8>)
 800201a:	f003 f8e7 	bl	80051ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 800201e:	2200      	movs	r2, #0
 8002020:	f24f 013c 	movw	r1, #61500	; 0xf03c
 8002024:	4881      	ldr	r0, [pc, #516]	; (800222c <MX_GPIO_Init+0x2fc>)
 8002026:	f003 f8e1 	bl	80051ec <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 800202a:	2200      	movs	r2, #0
 800202c:	f647 0194 	movw	r1, #30868	; 0x7894
 8002030:	487f      	ldr	r0, [pc, #508]	; (8002230 <MX_GPIO_Init+0x300>)
 8002032:	f003 f8db 	bl	80051ec <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8002036:	2200      	movs	r2, #0
 8002038:	f64e 2188 	movw	r1, #60040	; 0xea88
 800203c:	487d      	ldr	r0, [pc, #500]	; (8002234 <MX_GPIO_Init+0x304>)
 800203e:	f003 f8d5 	bl	80051ec <HAL_GPIO_WritePin>
                          |NIVEAU_OUT_Pin|LADELEUCHTE_Pin|RUECKWARNUNG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8002042:	2200      	movs	r2, #0
 8002044:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8002048:	487b      	ldr	r0, [pc, #492]	; (8002238 <MX_GPIO_Init+0x308>)
 800204a:	f003 f8cf 	bl	80051ec <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OELSTAND_TEMP_GPIO_Port, OELSTAND_TEMP_Pin, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002054:	4879      	ldr	r0, [pc, #484]	; (800223c <MX_GPIO_Init+0x30c>)
 8002056:	f003 f8c9 	bl	80051ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 800205a:	f248 0387 	movw	r3, #32903	; 0x8087
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002060:	2301      	movs	r3, #1
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800206c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002070:	4619      	mov	r1, r3
 8002072:	486c      	ldr	r0, [pc, #432]	; (8002224 <MX_GPIO_Init+0x2f4>)
 8002074:	f002 fef6 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8002078:	f647 7378 	movw	r3, #32632	; 0x7f78
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207e:	2300      	movs	r3, #0
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208a:	4619      	mov	r1, r3
 800208c:	4865      	ldr	r0, [pc, #404]	; (8002224 <MX_GPIO_Init+0x2f4>)
 800208e:	f002 fee9 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8002092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002098:	2301      	movs	r3, #1
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a8:	4619      	mov	r1, r3
 80020aa:	485f      	ldr	r0, [pc, #380]	; (8002228 <MX_GPIO_Init+0x2f8>)
 80020ac:	f002 feda 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80020b0:	f64d 7347 	movw	r3, #57159	; 0xdf47
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b6:	2303      	movs	r3, #3
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c2:	4619      	mov	r1, r3
 80020c4:	4858      	ldr	r0, [pc, #352]	; (8002228 <MX_GPIO_Init+0x2f8>)
 80020c6:	f002 fecd 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 80020ca:	f640 0303 	movw	r3, #2051	; 0x803
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	4619      	mov	r1, r3
 80020de:	4853      	ldr	r0, [pc, #332]	; (800222c <MX_GPIO_Init+0x2fc>)
 80020e0:	f002 fec0 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80020e4:	f24f 033c 	movw	r3, #61500	; 0xf03c
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ea:	2301      	movs	r3, #1
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fa:	4619      	mov	r1, r3
 80020fc:	484b      	ldr	r0, [pc, #300]	; (800222c <MX_GPIO_Init+0x2fc>)
 80020fe:	f002 feb1 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 8002102:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002108:	2303      	movs	r3, #3
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	4619      	mov	r1, r3
 8002116:	4845      	ldr	r0, [pc, #276]	; (800222c <MX_GPIO_Init+0x2fc>)
 8002118:	f002 fea4 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 800211c:	2308      	movs	r3, #8
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002120:	2301      	movs	r3, #1
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002128:	2302      	movs	r3, #2
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002130:	4619      	mov	r1, r3
 8002132:	483d      	ldr	r0, [pc, #244]	; (8002228 <MX_GPIO_Init+0x2f8>)
 8002134:	f002 fe96 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 8002138:	f640 6307 	movw	r3, #3591	; 0xe07
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213e:	2300      	movs	r3, #0
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	483b      	ldr	r0, [pc, #236]	; (800223c <MX_GPIO_Init+0x30c>)
 800214e:	f002 fe89 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8002152:	f647 0394 	movw	r3, #30868	; 0x7894
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	2301      	movs	r3, #1
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002168:	4619      	mov	r1, r3
 800216a:	4831      	ldr	r0, [pc, #196]	; (8002230 <MX_GPIO_Init+0x300>)
 800216c:	f002 fe7a 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 8002170:	f241 13f3 	movw	r3, #4595	; 0x11f3
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002176:	2300      	movs	r3, #0
 8002178:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800217e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002182:	4619      	mov	r1, r3
 8002184:	482c      	ldr	r0, [pc, #176]	; (8002238 <MX_GPIO_Init+0x308>)
 8002186:	f002 fe6d 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|BAMOCAR_IN2_Pin;
 800218a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002190:	2300      	movs	r3, #0
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219c:	4619      	mov	r1, r3
 800219e:	4824      	ldr	r0, [pc, #144]	; (8002230 <MX_GPIO_Init+0x300>)
 80021a0:	f002 fe60 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|ANLASSER_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 80021a4:	f241 5310 	movw	r3, #5392	; 0x1510
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b6:	4619      	mov	r1, r3
 80021b8:	481e      	ldr	r0, [pc, #120]	; (8002234 <MX_GPIO_Init+0x304>)
 80021ba:	f002 fe53 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80021be:	f64e 2388 	movw	r3, #60040	; 0xea88
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |NIVEAU_OUT_Pin|LADELEUCHTE_Pin|RUECKWARNUNG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d4:	4619      	mov	r1, r3
 80021d6:	4817      	ldr	r0, [pc, #92]	; (8002234 <MX_GPIO_Init+0x304>)
 80021d8:	f002 fe44 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80021dc:	f64e 630c 	movw	r3, #60940	; 0xee0c
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4810      	ldr	r0, [pc, #64]	; (8002238 <MX_GPIO_Init+0x308>)
 80021f6:	f002 fe35 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fe:	2300      	movs	r3, #0
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8002206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220a:	4619      	mov	r1, r3
 800220c:	4806      	ldr	r0, [pc, #24]	; (8002228 <MX_GPIO_Init+0x2f8>)
 800220e:	f002 fe29 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OELSTAND_TEMP_Pin;
 8002212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002218:	2301      	movs	r3, #1
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	e00f      	b.n	8002240 <MX_GPIO_Init+0x310>
 8002220:	40023800 	.word	0x40023800
 8002224:	40021000 	.word	0x40021000
 8002228:	40020800 	.word	0x40020800
 800222c:	40021400 	.word	0x40021400
 8002230:	40020400 	.word	0x40020400
 8002234:	40020c00 	.word	0x40020c00
 8002238:	40021800 	.word	0x40021800
 800223c:	40020000 	.word	0x40020000
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OELSTAND_TEMP_GPIO_Port, &GPIO_InitStruct);
 8002246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224a:	4619      	mov	r1, r3
 800224c:	480f      	ldr	r0, [pc, #60]	; (800228c <MX_GPIO_Init+0x35c>)
 800224e:	f002 fe09 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8002252:	2304      	movs	r3, #4
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002256:	2303      	movs	r3, #3
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 800225e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002262:	4619      	mov	r1, r3
 8002264:	480a      	ldr	r0, [pc, #40]	; (8002290 <MX_GPIO_Init+0x360>)
 8002266:	f002 fdfd 	bl	8004e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 800226a:	f44f 7358 	mov.w	r3, #864	; 0x360
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002270:	2303      	movs	r3, #3
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227c:	4619      	mov	r1, r3
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_GPIO_Init+0x364>)
 8002280:	f002 fdf0 	bl	8004e64 <HAL_GPIO_Init>

}
 8002284:	bf00      	nop
 8002286:	3738      	adds	r7, #56	; 0x38
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40020000 	.word	0x40020000
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40020400 	.word	0x40020400

08002298 <__NVIC_SystemReset>:
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800229c:	f3bf 8f4f 	dsb	sy
}
 80022a0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <__NVIC_SystemReset+0x24>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80022aa:	4904      	ldr	r1, [pc, #16]	; (80022bc <__NVIC_SystemReset+0x24>)
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_SystemReset+0x28>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80022b2:	f3bf 8f4f 	dsb	sy
}
 80022b6:	bf00      	nop
    __NOP();
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <__NVIC_SystemReset+0x20>
 80022bc:	e000ed00 	.word	0xe000ed00
 80022c0:	05fa0004 	.word	0x05fa0004

080022c4 <ITM_SendChar>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80022cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80022dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80022e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00b      	beq.n	8002304 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 80022ec:	e000      	b.n	80022f0 <ITM_SendChar+0x2c>
      __NOP();
 80022ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80022f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f9      	beq.n	80022ee <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80022fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]
  return (ch);
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002314:	b5b0      	push	{r4, r5, r7, lr}
 8002316:	b0cc      	sub	sp, #304	; 0x130
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t ADC_VAL[10] = {0};
 800231a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800232a:	f001 f882 	bl	8003432 <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[6] = {0}, InData[6] = {0}, AnalogData[8] = {0}, TempData[8] = {0};
 800232e:	2300      	movs	r3, #0
 8002330:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002334:	2300      	movs	r3, #0
 8002336:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800233a:	2300      	movs	r3, #0
 800233c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002340:	2300      	movs	r3, #0
 8002342:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	uint8_t status, tmp[4], task = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	uint16_t count = 0, gas_adc = 0, gas_mean = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
 800236a:	2300      	movs	r3, #0
 800236c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
 8002370:	2300      	movs	r3, #0
 8002372:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
  	uint32_t lastcan = 0, lastsendcan = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

  	// Erstelle Can-Nachrichten
    // Sendenachricht erstellen
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002382:	4bb7      	ldr	r3, [pc, #732]	; (8002660 <main+0x34c>)
 8002384:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8002388:	461d      	mov	r5, r3
 800238a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800238c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800238e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002392:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Ausgaenge erstellen
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 8002396:	4bb3      	ldr	r3, [pc, #716]	; (8002664 <main+0x350>)
 8002398:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800239c:	461d      	mov	r5, r3
 800239e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023a6:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet digitale Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 6, DISABLE};
 80023aa:	4baf      	ldr	r3, [pc, #700]	; (8002668 <main+0x354>)
 80023ac:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80023b0:	461d      	mov	r5, r3
 80023b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023ba:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet Motor1 erstellen
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80023be:	4bab      	ldr	r3, [pc, #684]	; (800266c <main+0x358>)
 80023c0:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80023c4:	461d      	mov	r5, r3
 80023c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023ce:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet an Bamocar erstellen
  	CAN_TxHeaderTypeDef TxBamocar = {BAMOCAR_TX_ID, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80023d2:	4ba7      	ldr	r3, [pc, #668]	; (8002670 <main+0x35c>)
 80023d4:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80023d8:	461d      	mov	r5, r3
 80023da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023e2:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet an Bamocar erstellen
  	CAN_TxHeaderTypeDef TxLenkung = {LENKUNG1_CAN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 80023e6:	4ba3      	ldr	r3, [pc, #652]	; (8002674 <main+0x360>)
 80023e8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80023ec:	461d      	mov	r5, r3
 80023ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023f6:	e884 0003 	stmia.w	r4, {r0, r1}
	// Sendenachricht Motorsteuergeraet analoge Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxAnalog = {MOTOR_CAN_ANALOG_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80023fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002402:	4a9d      	ldr	r2, [pc, #628]	; (8002678 <main+0x364>)
 8002404:	461c      	mov	r4, r3
 8002406:	4615      	mov	r5, r2
 8002408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800240a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800240c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002410:	e884 0003 	stmia.w	r4, {r0, r1}
  	// Sendenachricht Motorsteuergeraet Temperatur Eingaenge erstellen
  	CAN_TxHeaderTypeDef TxTemperatur = {MOTOR_CAN_TEMPERATUR, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8002414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002418:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800241c:	4a97      	ldr	r2, [pc, #604]	; (800267c <main+0x368>)
 800241e:	461c      	mov	r4, r3
 8002420:	4615      	mov	r5, r2
 8002422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002426:	e895 0003 	ldmia.w	r5, {r0, r1}
 800242a:	e884 0003 	stmia.w	r4, {r0, r1}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800242e:	f000 fd29 	bl	8002e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002432:	f7ff fd7d 	bl	8001f30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002436:	f000 ff3d 	bl	80032b4 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 800243a:	f7ff fc8b 	bl	8001d54 <MX_CAN3_Init>
  MX_ADC1_Init();
 800243e:	f7ff fb8d 	bl	8001b5c <MX_ADC1_Init>
  MX_TIM6_Init();
 8002442:	f000 fedb 	bl	80031fc <MX_TIM6_Init>
  MX_CAN1_Init();
 8002446:	f7ff fc4f 	bl	8001ce8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // ITM HCLK
  ITM_SendChar('H');
 800244a:	2048      	movs	r0, #72	; 0x48
 800244c:	f7ff ff3a 	bl	80022c4 <ITM_SendChar>
  ITM_SendChar('a');
 8002450:	2061      	movs	r0, #97	; 0x61
 8002452:	f7ff ff37 	bl	80022c4 <ITM_SendChar>
  ITM_SendChar('l');
 8002456:	206c      	movs	r0, #108	; 0x6c
 8002458:	f7ff ff34 	bl	80022c4 <ITM_SendChar>
  ITM_SendChar('l');
 800245c:	206c      	movs	r0, #108	; 0x6c
 800245e:	f7ff ff31 	bl	80022c4 <ITM_SendChar>
  ITM_SendChar('o');
 8002462:	206f      	movs	r0, #111	; 0x6f
 8002464:	f7ff ff2e 	bl	80022c4 <ITM_SendChar>
  ITM_SendChar(' ');
 8002468:	2020      	movs	r0, #32
 800246a:	f7ff ff2b 	bl	80022c4 <ITM_SendChar>
  	// Start Timer 6 Interrupt
  	HAL_TIM_Base_Start_IT(&htim6);
 800246e:	4884      	ldr	r0, [pc, #528]	; (8002680 <main+0x36c>)
 8002470:	f004 f854 	bl	800651c <HAL_TIM_Base_Start_IT>
  	HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 8002474:	4b83      	ldr	r3, [pc, #524]	; (8002684 <main+0x370>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	4b83      	ldr	r3, [pc, #524]	; (8002688 <main+0x374>)
 800247c:	4413      	add	r3, r2
 800247e:	2201      	movs	r2, #1
 8002480:	4619      	mov	r1, r3
 8002482:	4882      	ldr	r0, [pc, #520]	; (800268c <main+0x378>)
 8002484:	f004 fc27 	bl	8006cd6 <HAL_UART_Receive_IT>

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 8002488:	f7fe fba6 	bl	8000bd8 <readResetSource>
 800248c:	4603      	mov	r3, r0
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fbf4 	bl	8000c7c <printResetSource>

  	// Teste serielle Schnittstelle
  	#define WILLKOMM_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(WILLKOMM_STRING_UART, sizeof(WILLKOMM_STRING_UART));
 8002494:	213a      	movs	r1, #58	; 0x3a
 8002496:	487e      	ldr	r0, [pc, #504]	; (8002690 <main+0x37c>)
 8002498:	f7fe f992 	bl	80007c0 <uartTransmit>
	#define VERSION_STRING_UART		"Starting Application "
	uartTransmit(VERSION_STRING_UART, sizeof(VERSION_STRING_UART));
 800249c:	2116      	movs	r1, #22
 800249e:	487d      	ldr	r0, [pc, #500]	; (8002694 <main+0x380>)
 80024a0:	f7fe f98e 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(MAJOR, 10);
 80024a4:	210a      	movs	r1, #10
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe f99e 	bl	80007e8 <uartTransmitNumber>
	uartTransmit(".", 1);
 80024ac:	2101      	movs	r1, #1
 80024ae:	487a      	ldr	r0, [pc, #488]	; (8002698 <main+0x384>)
 80024b0:	f7fe f986 	bl	80007c0 <uartTransmit>
	uartTransmitNumber(MINOR, 10);
 80024b4:	210a      	movs	r1, #10
 80024b6:	2001      	movs	r0, #1
 80024b8:	f7fe f996 	bl	80007e8 <uartTransmitNumber>
	uartTransmit("\n", 1);
 80024bc:	2101      	movs	r1, #1
 80024be:	4877      	ldr	r0, [pc, #476]	; (800269c <main+0x388>)
 80024c0:	f7fe f97e 	bl	80007c0 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 80024c4:	f7fe fb5e 	bl	8000b84 <collectSystemInfo>
	// Leds Testen
//  testPCB_Leds();
//	testCockpit_Leds();

  	// Testen der Versorgungsspannung am Shutdown-Circuit
  	testSDC();
 80024c8:	f7ff fa92 	bl	80019f0 <testSDC>

  	// Alle Fehler Cockpit loeschen
  	cockpit_default();
 80024cc:	f7ff fa46 	bl	800195c <cockpit_default>
  	// Setze LED Green
  	leuchten_out.GreenLed = 1;
 80024d0:	4a73      	ldr	r2, [pc, #460]	; (80026a0 <main+0x38c>)
 80024d2:	7853      	ldrb	r3, [r2, #1]
 80024d4:	f043 0310 	orr.w	r3, r3, #16
 80024d8:	7053      	strb	r3, [r2, #1]
  	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 80024da:	4b71      	ldr	r3, [pc, #452]	; (80026a0 <main+0x38c>)
 80024dc:	785b      	ldrb	r3, [r3, #1]
 80024de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024ea:	486e      	ldr	r0, [pc, #440]	; (80026a4 <main+0x390>)
 80024ec:	f002 fe7e 	bl	80051ec <HAL_GPIO_WritePin>

  	// Lese alle Eingaenge
  	readall_inputs();
 80024f0:	f7fe ff9c 	bl	800142c <readall_inputs>

    // Sendenachricht 0x123 mit Dummy-Daten fuellen
  	for (uint8_t j = 0; j < 8; j++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80024fa:	e00f      	b.n	800251c <main+0x208>
  		TxData[j] = (j + 1);
 80024fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002500:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8002504:	3201      	adds	r2, #1
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800250c:	443b      	add	r3, r7
 800250e:	f803 2c34 	strb.w	r2, [r3, #-52]
  	for (uint8_t j = 0; j < 8; j++)
 8002512:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002516:	3301      	adds	r3, #1
 8002518:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 800251c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002520:	2b07      	cmp	r3, #7
 8002522:	d9eb      	bls.n	80024fc <main+0x1e8>

  	// Starte While-Schleife
#define MAINWHILE				"\nStarte While Schleife\n"
  	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 8002524:	2118      	movs	r1, #24
 8002526:	4860      	ldr	r0, [pc, #384]	; (80026a8 <main+0x394>)
 8002528:	f7fe f94a 	bl	80007c0 <uartTransmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (UART2_rxBuffer[uart_count-1] == '\r')
 800252c:	4b55      	ldr	r3, [pc, #340]	; (8002684 <main+0x370>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	3b01      	subs	r3, #1
 8002532:	4a55      	ldr	r2, [pc, #340]	; (8002688 <main+0x374>)
 8002534:	5cd3      	ldrb	r3, [r2, r3]
 8002536:	2b0d      	cmp	r3, #13
 8002538:	f040 8129 	bne.w	800278e <main+0x47a>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"\nEingabe OK\r\n", 13, 100);
 800253c:	2364      	movs	r3, #100	; 0x64
 800253e:	220d      	movs	r2, #13
 8002540:	495a      	ldr	r1, [pc, #360]	; (80026ac <main+0x398>)
 8002542:	4852      	ldr	r0, [pc, #328]	; (800268c <main+0x378>)
 8002544:	f004 fb44 	bl	8006bd0 <HAL_UART_Transmit>
			if (UART2_rxBuffer[0] == 'R' && UART2_rxBuffer[1] == 'E' && UART2_rxBuffer[2] == 'S')
 8002548:	4b4f      	ldr	r3, [pc, #316]	; (8002688 <main+0x374>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b52      	cmp	r3, #82	; 0x52
 800254e:	d120      	bne.n	8002592 <main+0x27e>
 8002550:	4b4d      	ldr	r3, [pc, #308]	; (8002688 <main+0x374>)
 8002552:	785b      	ldrb	r3, [r3, #1]
 8002554:	2b45      	cmp	r3, #69	; 0x45
 8002556:	d11c      	bne.n	8002592 <main+0x27e>
 8002558:	4b4b      	ldr	r3, [pc, #300]	; (8002688 <main+0x374>)
 800255a:	789b      	ldrb	r3, [r3, #2]
 800255c:	2b53      	cmp	r3, #83	; 0x53
 800255e:	d118      	bne.n	8002592 <main+0x27e>
			{
				uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 8002560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002564:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002568:	4a51      	ldr	r2, [pc, #324]	; (80026b0 <main+0x39c>)
 800256a:	ca07      	ldmia	r2, {r0, r1, r2}
 800256c:	c303      	stmia	r3!, {r0, r1}
 800256e:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 8002570:	2364      	movs	r3, #100	; 0x64
 8002572:	2201      	movs	r2, #1
 8002574:	494f      	ldr	r1, [pc, #316]	; (80026b4 <main+0x3a0>)
 8002576:	4845      	ldr	r0, [pc, #276]	; (800268c <main+0x378>)
 8002578:	f004 fb2a 	bl	8006bd0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, c, 10, 100);
 800257c:	f107 010c 	add.w	r1, r7, #12
 8002580:	2364      	movs	r3, #100	; 0x64
 8002582:	220a      	movs	r2, #10
 8002584:	4841      	ldr	r0, [pc, #260]	; (800268c <main+0x378>)
 8002586:	f004 fb23 	bl	8006bd0 <HAL_UART_Transmit>
				UART2_msg[0] = 1;
 800258a:	4b4b      	ldr	r3, [pc, #300]	; (80026b8 <main+0x3a4>)
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
			{
 8002590:	e0fa      	b.n	8002788 <main+0x474>
			}
			else if (UART2_rxBuffer[0] == 'O' && UART2_rxBuffer[1] == 'E' && UART2_rxBuffer[2] == 'L')
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <main+0x374>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b4f      	cmp	r3, #79	; 0x4f
 8002598:	d125      	bne.n	80025e6 <main+0x2d2>
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <main+0x374>)
 800259c:	785b      	ldrb	r3, [r3, #1]
 800259e:	2b45      	cmp	r3, #69	; 0x45
 80025a0:	d121      	bne.n	80025e6 <main+0x2d2>
 80025a2:	4b39      	ldr	r3, [pc, #228]	; (8002688 <main+0x374>)
 80025a4:	789b      	ldrb	r3, [r3, #2]
 80025a6:	2b4c      	cmp	r3, #76	; 0x4c
 80025a8:	d11d      	bne.n	80025e6 <main+0x2d2>
			{
				uartTransmit("Display Oel\r\n", 13);
 80025aa:	210d      	movs	r1, #13
 80025ac:	4843      	ldr	r0, [pc, #268]	; (80026bc <main+0x3a8>)
 80025ae:	f7fe f907 	bl	80007c0 <uartTransmit>
				leuchten_out.Oeldruck = !leuchten_out.Oeldruck;
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <main+0x38c>)
 80025b4:	785b      	ldrb	r3, [r3, #1]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2d9      	uxtb	r1, r3
 80025c6:	4a36      	ldr	r2, [pc, #216]	; (80026a0 <main+0x38c>)
 80025c8:	7853      	ldrb	r3, [r2, #1]
 80025ca:	f361 0300 	bfi	r3, r1, #0, #1
 80025ce:	7053      	strb	r3, [r2, #1]
				leuchten_out.GreenLed = leuchten_out.Oeldruck;
 80025d0:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <main+0x38c>)
 80025d2:	785b      	ldrb	r3, [r3, #1]
 80025d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80025d8:	b2d9      	uxtb	r1, r3
 80025da:	4a31      	ldr	r2, [pc, #196]	; (80026a0 <main+0x38c>)
 80025dc:	7853      	ldrb	r3, [r2, #1]
 80025de:	f361 1304 	bfi	r3, r1, #4, #1
 80025e2:	7053      	strb	r3, [r2, #1]
 80025e4:	e0d0      	b.n	8002788 <main+0x474>
			}
			else if (UART2_rxBuffer[0] == 'W' && UART2_rxBuffer[1] == 'I' && UART2_rxBuffer[2] == 'S')
 80025e6:	4b28      	ldr	r3, [pc, #160]	; (8002688 <main+0x374>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b57      	cmp	r3, #87	; 0x57
 80025ec:	d11b      	bne.n	8002626 <main+0x312>
 80025ee:	4b26      	ldr	r3, [pc, #152]	; (8002688 <main+0x374>)
 80025f0:	785b      	ldrb	r3, [r3, #1]
 80025f2:	2b49      	cmp	r3, #73	; 0x49
 80025f4:	d117      	bne.n	8002626 <main+0x312>
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <main+0x374>)
 80025f8:	789b      	ldrb	r3, [r3, #2]
 80025fa:	2b53      	cmp	r3, #83	; 0x53
 80025fc:	d113      	bne.n	8002626 <main+0x312>
			{
				uartTransmit("Display Wisch\r\n", 15);
 80025fe:	210f      	movs	r1, #15
 8002600:	482f      	ldr	r0, [pc, #188]	; (80026c0 <main+0x3ac>)
 8002602:	f7fe f8dd 	bl	80007c0 <uartTransmit>
				leuchten_out.Wischwarn = !leuchten_out.Wischwarn;
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <main+0x38c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2d9      	uxtb	r1, r3
 800261a:	4a21      	ldr	r2, [pc, #132]	; (80026a0 <main+0x38c>)
 800261c:	7813      	ldrb	r3, [r2, #0]
 800261e:	f361 1386 	bfi	r3, r1, #6, #1
 8002622:	7013      	strb	r3, [r2, #0]
 8002624:	e0b0      	b.n	8002788 <main+0x474>
			}
			else if (UART2_rxBuffer[0] == 'B' && UART2_rxBuffer[1] == 'R' && UART2_rxBuffer[2] == 'E')
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <main+0x374>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b42      	cmp	r3, #66	; 0x42
 800262c:	d14c      	bne.n	80026c8 <main+0x3b4>
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <main+0x374>)
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	2b52      	cmp	r3, #82	; 0x52
 8002634:	d148      	bne.n	80026c8 <main+0x3b4>
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <main+0x374>)
 8002638:	789b      	ldrb	r3, [r3, #2]
 800263a:	2b45      	cmp	r3, #69	; 0x45
 800263c:	d144      	bne.n	80026c8 <main+0x3b4>
			{
				uartTransmit("Display Brems\r\n", 15);
 800263e:	210f      	movs	r1, #15
 8002640:	4820      	ldr	r0, [pc, #128]	; (80026c4 <main+0x3b0>)
 8002642:	f7fe f8bd 	bl	80007c0 <uartTransmit>
				leuchten_out.Bremswarn = !leuchten_out.Bremswarn;
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <main+0x38c>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b25b      	sxtb	r3, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	09db      	lsrs	r3, r3, #7
 8002652:	b2d9      	uxtb	r1, r3
 8002654:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <main+0x38c>)
 8002656:	7813      	ldrb	r3, [r2, #0]
 8002658:	f361 13c7 	bfi	r3, r1, #7, #1
 800265c:	7013      	strb	r3, [r2, #0]
 800265e:	e093      	b.n	8002788 <main+0x474>
 8002660:	080088ec 	.word	0x080088ec
 8002664:	08008904 	.word	0x08008904
 8002668:	0800891c 	.word	0x0800891c
 800266c:	08008934 	.word	0x08008934
 8002670:	0800894c 	.word	0x0800894c
 8002674:	08008964 	.word	0x08008964
 8002678:	0800897c 	.word	0x0800897c
 800267c:	08008994 	.word	0x08008994
 8002680:	20000164 	.word	0x20000164
 8002684:	2000014c 	.word	0x2000014c
 8002688:	20000134 	.word	0x20000134
 800268c:	200001b0 	.word	0x200001b0
 8002690:	080087b4 	.word	0x080087b4
 8002694:	080087f0 	.word	0x080087f0
 8002698:	08008808 	.word	0x08008808
 800269c:	0800880c 	.word	0x0800880c
 80026a0:	20000050 	.word	0x20000050
 80026a4:	40020400 	.word	0x40020400
 80026a8:	08008810 	.word	0x08008810
 80026ac:	08008828 	.word	0x08008828
 80026b0:	080089ac 	.word	0x080089ac
 80026b4:	08008838 	.word	0x08008838
 80026b8:	20000140 	.word	0x20000140
 80026bc:	0800883c 	.word	0x0800883c
 80026c0:	0800884c 	.word	0x0800884c
 80026c4:	0800885c 	.word	0x0800885c
			}
			else if (UART2_rxBuffer[0] == 'R' && UART2_rxBuffer[1] == 'U' && UART2_rxBuffer[2] == 'C')
 80026c8:	4ba9      	ldr	r3, [pc, #676]	; (8002970 <main+0x65c>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b52      	cmp	r3, #82	; 0x52
 80026ce:	d11b      	bne.n	8002708 <main+0x3f4>
 80026d0:	4ba7      	ldr	r3, [pc, #668]	; (8002970 <main+0x65c>)
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	2b55      	cmp	r3, #85	; 0x55
 80026d6:	d117      	bne.n	8002708 <main+0x3f4>
 80026d8:	4ba5      	ldr	r3, [pc, #660]	; (8002970 <main+0x65c>)
 80026da:	789b      	ldrb	r3, [r3, #2]
 80026dc:	2b43      	cmp	r3, #67	; 0x43
 80026de:	d113      	bne.n	8002708 <main+0x3f4>
			{
				uartTransmit("Display Rueck\r\n", 15);
 80026e0:	210f      	movs	r1, #15
 80026e2:	48a4      	ldr	r0, [pc, #656]	; (8002974 <main+0x660>)
 80026e4:	f7fe f86c 	bl	80007c0 <uartTransmit>
				leuchten_out.Rueckwarn = !leuchten_out.Rueckwarn;
 80026e8:	4ba3      	ldr	r3, [pc, #652]	; (8002978 <main+0x664>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2d9      	uxtb	r1, r3
 80026fc:	4a9e      	ldr	r2, [pc, #632]	; (8002978 <main+0x664>)
 80026fe:	7813      	ldrb	r3, [r2, #0]
 8002700:	f361 1304 	bfi	r3, r1, #4, #1
 8002704:	7013      	strb	r3, [r2, #0]
 8002706:	e03f      	b.n	8002788 <main+0x474>
			}
			else if (UART2_rxBuffer[0] == 'B' && UART2_rxBuffer[1] == 'U' && UART2_rxBuffer[2] == 'P')
 8002708:	4b99      	ldr	r3, [pc, #612]	; (8002970 <main+0x65c>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b42      	cmp	r3, #66	; 0x42
 800270e:	d10f      	bne.n	8002730 <main+0x41c>
 8002710:	4b97      	ldr	r3, [pc, #604]	; (8002970 <main+0x65c>)
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	2b55      	cmp	r3, #85	; 0x55
 8002716:	d10b      	bne.n	8002730 <main+0x41c>
 8002718:	4b95      	ldr	r3, [pc, #596]	; (8002970 <main+0x65c>)
 800271a:	789b      	ldrb	r3, [r3, #2]
 800271c:	2b50      	cmp	r3, #80	; 0x50
 800271e:	d107      	bne.n	8002730 <main+0x41c>
			{
				uartTransmit("BC Up\r\n", 7);
 8002720:	2107      	movs	r1, #7
 8002722:	4896      	ldr	r0, [pc, #600]	; (800297c <main+0x668>)
 8002724:	f7fe f84c 	bl	80007c0 <uartTransmit>
				UART2_msg[0] = 2;
 8002728:	4b95      	ldr	r3, [pc, #596]	; (8002980 <main+0x66c>)
 800272a:	2202      	movs	r2, #2
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e02b      	b.n	8002788 <main+0x474>
			}
			else if (UART2_rxBuffer[0] == 'B' && UART2_rxBuffer[1] == 'D' && UART2_rxBuffer[2] == 'O')
 8002730:	4b8f      	ldr	r3, [pc, #572]	; (8002970 <main+0x65c>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b42      	cmp	r3, #66	; 0x42
 8002736:	d10f      	bne.n	8002758 <main+0x444>
 8002738:	4b8d      	ldr	r3, [pc, #564]	; (8002970 <main+0x65c>)
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	2b44      	cmp	r3, #68	; 0x44
 800273e:	d10b      	bne.n	8002758 <main+0x444>
 8002740:	4b8b      	ldr	r3, [pc, #556]	; (8002970 <main+0x65c>)
 8002742:	789b      	ldrb	r3, [r3, #2]
 8002744:	2b4f      	cmp	r3, #79	; 0x4f
 8002746:	d107      	bne.n	8002758 <main+0x444>
			{
				uartTransmit("BC Down\r\n", 9);
 8002748:	2109      	movs	r1, #9
 800274a:	488e      	ldr	r0, [pc, #568]	; (8002984 <main+0x670>)
 800274c:	f7fe f838 	bl	80007c0 <uartTransmit>
				UART2_msg[0] = 3;
 8002750:	4b8b      	ldr	r3, [pc, #556]	; (8002980 <main+0x66c>)
 8002752:	2203      	movs	r2, #3
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e017      	b.n	8002788 <main+0x474>
			}
			else
			{
				uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 8002758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800275c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002760:	4a89      	ldr	r2, [pc, #548]	; (8002988 <main+0x674>)
 8002762:	ca07      	ldmia	r2, {r0, r1, r2}
 8002764:	c303      	stmia	r3!, {r0, r1}
 8002766:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 8002768:	2364      	movs	r3, #100	; 0x64
 800276a:	2201      	movs	r2, #1
 800276c:	4987      	ldr	r1, [pc, #540]	; (800298c <main+0x678>)
 800276e:	4888      	ldr	r0, [pc, #544]	; (8002990 <main+0x67c>)
 8002770:	f004 fa2e 	bl	8006bd0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, c, 10, 100);
 8002774:	4639      	mov	r1, r7
 8002776:	2364      	movs	r3, #100	; 0x64
 8002778:	220a      	movs	r2, #10
 800277a:	4885      	ldr	r0, [pc, #532]	; (8002990 <main+0x67c>)
 800277c:	f004 fa28 	bl	8006bd0 <HAL_UART_Transmit>
				uartTransmit("Falsche Eingabe\r\n", 17);
 8002780:	2111      	movs	r1, #17
 8002782:	4884      	ldr	r0, [pc, #528]	; (8002994 <main+0x680>)
 8002784:	f7fe f81c 	bl	80007c0 <uartTransmit>
			}
			uart_count = 0;
 8002788:	4b83      	ldr	r3, [pc, #524]	; (8002998 <main+0x684>)
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
		}

	  	switch (UART2_msg[0])
 800278e:	4b7c      	ldr	r3, [pc, #496]	; (8002980 <main+0x66c>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	3b01      	subs	r3, #1
 8002794:	2b03      	cmp	r3, #3
 8002796:	d86a      	bhi.n	800286e <main+0x55a>
 8002798:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <main+0x48c>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027c1 	.word	0x080027c1
 80027a8:	080027fb 	.word	0x080027fb
 80027ac:	08002835 	.word	0x08002835
	  	{
	  		case 1:
				HAL_UART_Transmit(&huart2, (uint8_t*)"\nSystem Reset\r\n", 15, 100);
 80027b0:	2364      	movs	r3, #100	; 0x64
 80027b2:	220f      	movs	r2, #15
 80027b4:	4979      	ldr	r1, [pc, #484]	; (800299c <main+0x688>)
 80027b6:	4876      	ldr	r0, [pc, #472]	; (8002990 <main+0x67c>)
 80027b8:	f004 fa0a 	bl	8006bd0 <HAL_UART_Transmit>
				NVIC_SystemReset();
 80027bc:	f7ff fd6c 	bl	8002298 <__NVIC_SystemReset>
			break;
	  		case 2:
	  			komfort_out.BC_Up_Out = !komfort_out.BC_Up_Out;
 80027c0:	4b77      	ldr	r3, [pc, #476]	; (80029a0 <main+0x68c>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2d9      	uxtb	r1, r3
 80027d4:	4a72      	ldr	r2, [pc, #456]	; (80029a0 <main+0x68c>)
 80027d6:	7813      	ldrb	r3, [r2, #0]
 80027d8:	f361 0341 	bfi	r3, r1, #1, #1
 80027dc:	7013      	strb	r3, [r2, #0]
	  			HAL_GPIO_WritePin(BC_UP_OUT_GPIO_Port, BC_UP_OUT_Pin, komfort_out.BC_Up_Out);
 80027de:	4b70      	ldr	r3, [pc, #448]	; (80029a0 <main+0x68c>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	2110      	movs	r1, #16
 80027ec:	486d      	ldr	r0, [pc, #436]	; (80029a4 <main+0x690>)
 80027ee:	f002 fcfd 	bl	80051ec <HAL_GPIO_WritePin>
	  			UART2_msg[0] = 0;
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <main+0x66c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
			break;
 80027f8:	e03a      	b.n	8002870 <main+0x55c>
	  		case 3:
	  			komfort_out.BC_Down_Out = !komfort_out.BC_Down_Out;
 80027fa:	4b69      	ldr	r3, [pc, #420]	; (80029a0 <main+0x68c>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf0c      	ite	eq
 8002808:	2301      	moveq	r3, #1
 800280a:	2300      	movne	r3, #0
 800280c:	b2d9      	uxtb	r1, r3
 800280e:	4a64      	ldr	r2, [pc, #400]	; (80029a0 <main+0x68c>)
 8002810:	7813      	ldrb	r3, [r2, #0]
 8002812:	f361 0382 	bfi	r3, r1, #2, #1
 8002816:	7013      	strb	r3, [r2, #0]
	  			HAL_GPIO_WritePin(BC_DOWN_OUT_GPIO_Port, BC_DOWN_OUT_Pin, komfort_out.BC_Down_Out);
 8002818:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <main+0x68c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	2108      	movs	r1, #8
 8002826:	485f      	ldr	r0, [pc, #380]	; (80029a4 <main+0x690>)
 8002828:	f002 fce0 	bl	80051ec <HAL_GPIO_WritePin>
	  			UART2_msg[0] = 0;
 800282c:	4b54      	ldr	r3, [pc, #336]	; (8002980 <main+0x66c>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
	  		break;
 8002832:	e01d      	b.n	8002870 <main+0x55c>
	  		case 4:
	  			komfort_out.BC_Rst_Out = !komfort_out.BC_Rst_Out;
 8002834:	4b5a      	ldr	r3, [pc, #360]	; (80029a0 <main+0x68c>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	bf0c      	ite	eq
 8002842:	2301      	moveq	r3, #1
 8002844:	2300      	movne	r3, #0
 8002846:	b2d9      	uxtb	r1, r3
 8002848:	4a55      	ldr	r2, [pc, #340]	; (80029a0 <main+0x68c>)
 800284a:	7813      	ldrb	r3, [r2, #0]
 800284c:	f361 0300 	bfi	r3, r1, #0, #1
 8002850:	7013      	strb	r3, [r2, #0]
	  			HAL_GPIO_WritePin(BC_RESET_OUT_GPIO_Port, BC_RESET_OUT_Pin, komfort_out.BC_Rst_Out);
 8002852:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <main+0x68c>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	2120      	movs	r1, #32
 8002860:	4850      	ldr	r0, [pc, #320]	; (80029a4 <main+0x690>)
 8002862:	f002 fcc3 	bl	80051ec <HAL_GPIO_WritePin>
	  			UART2_msg[0] = 0;
 8002866:	4b46      	ldr	r3, [pc, #280]	; (8002980 <main+0x66c>)
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
	  		break;
 800286c:	e000      	b.n	8002870 <main+0x55c>
			default:
			break;
 800286e:	bf00      	nop
		}
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8002870:	4b4d      	ldr	r3, [pc, #308]	; (80029a8 <main+0x694>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d10a      	bne.n	8002890 <main+0x57c>
		{
			count++;																	// Zaehler count hochzaehlen
 800287a:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800287e:	3301      	adds	r3, #1
 8002880:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
			millisekunden_flag_1 = 0;													// Setze Millisekunden-Flag zurueck
 8002884:	4b48      	ldr	r3, [pc, #288]	; (80029a8 <main+0x694>)
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]

			// Setze Flag start, nur wenn millisekunden Flag gesetzt war
			task = 1;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		}

		// PWM Oelstandsensor Kombiinstrument ausgeben
		pwm_oelstand(count);
 8002890:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff f82b 	bl	80018f0 <pwm_oelstand>

		// Task wird alle 20 Millisekunden ausgefuehrt
		if (((count % 20) == 0) && (task == 1))
 800289a:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 800289e:	4b43      	ldr	r3, [pc, #268]	; (80029ac <main+0x698>)
 80028a0:	fba3 1302 	umull	r1, r3, r3, r2
 80028a4:	0919      	lsrs	r1, r3, #4
 80028a6:	460b      	mov	r3, r1
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d12b      	bne.n	800290e <main+0x5fa>
 80028b6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d127      	bne.n	800290e <main+0x5fa>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 80028be:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80028c2:	2301      	movs	r3, #1
 80028c4:	4a3a      	ldr	r2, [pc, #232]	; (80029b0 <main+0x69c>)
 80028c6:	483b      	ldr	r0, [pc, #236]	; (80029b4 <main+0x6a0>)
 80028c8:	f001 fcd6 	bl	8004278 <HAL_CAN_AddTxMessage>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 80028d2:	bf00      	nop
 80028d4:	2101      	movs	r1, #1
 80028d6:	4837      	ldr	r0, [pc, #220]	; (80029b4 <main+0x6a0>)
 80028d8:	f001 fd9e 	bl	8004418 <HAL_CAN_IsTxMessagePending>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d0f8      	beq.n	80028d4 <main+0x5c0>
			tmp[0] = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
			tmp[1] = 1;
 80028e8:	2301      	movs	r3, #1
 80028ea:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9

			status = HAL_CAN_AddTxMessage(&hcan3, &TxLenkung, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 80028ee:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80028f2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80028f6:	2301      	movs	r3, #1
 80028f8:	482e      	ldr	r0, [pc, #184]	; (80029b4 <main+0x6a0>)
 80028fa:	f001 fcbd 	bl	8004278 <HAL_CAN_AddTxMessage>
 80028fe:	4603      	mov	r3, r0
 8002900:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
			hal_error(status);
 8002904:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fca5 	bl	8001258 <hal_error>
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if (((count % 100) == 0) && (task == 1))
 800290e:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8002912:	4a29      	ldr	r2, [pc, #164]	; (80029b8 <main+0x6a4>)
 8002914:	fba2 1203 	umull	r1, r2, r2, r3
 8002918:	0952      	lsrs	r2, r2, #5
 800291a:	2164      	movs	r1, #100	; 0x64
 800291c:	fb01 f202 	mul.w	r2, r1, r2
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d168      	bne.n	80029fa <main+0x6e6>
 8002928:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800292c:	2b01      	cmp	r3, #1
 800292e:	d164      	bne.n	80029fa <main+0x6e6>
		{
			// alle Inputs einlesen
			readall_inputs();
 8002930:	f7fe fd7c 	bl	800142c <readall_inputs>

			// Anlasser abfragen
			readAnlasser();
 8002934:	f7fe ffa8 	bl	8001888 <readAnlasser>

			// Bremse pruefen
			//readBrake();

			// Gaspedal pruefen
			gas_adc = readTrottle();
 8002938:	f7ff f886 	bl	8001a48 <readTrottle>
 800293c:	4603      	mov	r3, r0
 800293e:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

			// Abfrage ob Mittelwertbildung
			if (gas_adc > 0)															// Wenn Gaspedal Plausible dann Mittelwertbildung
 8002942:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d03a      	beq.n	80029c0 <main+0x6ac>
			{
				// Mittelwert bilden (https://nestedsoftware.com/2018/03/20/calculating-a-moving-average-on-streaming-data-5a7k.22879.html)
				// Mittelwertbildung aus 10 Werten (Weniger die 10 verkleineren, Mehr die 10 vergroeßern)
				gas_mean = (gas_mean + ((gas_adc - gas_mean)/10));
 800294a:	f8b7 211c 	ldrh.w	r2, [r7, #284]	; 0x11c
 800294e:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <main+0x6a8>)
 8002956:	fb82 1203 	smull	r1, r2, r2, r3
 800295a:	1092      	asrs	r2, r2, #2
 800295c:	17db      	asrs	r3, r3, #31
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	b29a      	uxth	r2, r3
 8002962:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8002966:	4413      	add	r3, r2
 8002968:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
 800296c:	e02b      	b.n	80029c6 <main+0x6b2>
 800296e:	bf00      	nop
 8002970:	20000134 	.word	0x20000134
 8002974:	0800886c 	.word	0x0800886c
 8002978:	20000050 	.word	0x20000050
 800297c:	0800887c 	.word	0x0800887c
 8002980:	20000140 	.word	0x20000140
 8002984:	08008884 	.word	0x08008884
 8002988:	080089ac 	.word	0x080089ac
 800298c:	08008838 	.word	0x08008838
 8002990:	200001b0 	.word	0x200001b0
 8002994:	08008890 	.word	0x08008890
 8002998:	2000014c 	.word	0x2000014c
 800299c:	080088a4 	.word	0x080088a4
 80029a0:	20000054 	.word	0x20000054
 80029a4:	40021400 	.word	0x40021400
 80029a8:	20000158 	.word	0x20000158
 80029ac:	cccccccd 	.word	0xcccccccd
 80029b0:	2000015c 	.word	0x2000015c
 80029b4:	200000f0 	.word	0x200000f0
 80029b8:	51eb851f 	.word	0x51eb851f
 80029bc:	66666667 	.word	0x66666667
			}
			else																		// Wenn Gaspedal unplausible oder Kupplung getreten
			{
				gas_mean = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
			}

			// Daten in Bamocarformat umwandeln
			tmp[0] = 0x90;
 80029c6:	2390      	movs	r3, #144	; 0x90
 80029c8:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
			tmp[1] = (gas_mean);
 80029cc:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
			tmp[2] = ((gas_mean) >> 8);
 80029d6:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	b29b      	uxth	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

			// Drehmoment an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 80029e4:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80029e8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80029ec:	2301      	movs	r3, #1
 80029ee:	48c7      	ldr	r0, [pc, #796]	; (8002d0c <main+0x9f8>)
 80029f0:	f001 fc42 	bl	8004278 <HAL_CAN_AddTxMessage>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
			//hal_error(status);
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (task == 1))
 80029fa:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 80029fe:	4ac4      	ldr	r2, [pc, #784]	; (8002d10 <main+0x9fc>)
 8002a00:	fba2 1203 	umull	r1, r2, r2, r3
 8002a04:	0992      	lsrs	r2, r2, #6
 8002a06:	21c8      	movs	r1, #200	; 0xc8
 8002a08:	fb01 f202 	mul.w	r2, r1, r2
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 816b 	bne.w	8002cec <main+0x9d8>
 8002a16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	f040 8166 	bne.w	8002cec <main+0x9d8>
		{
			HAL_GPIO_WritePin(OELDRUCK_GPIO_Port, OELDRUCK_Pin, leuchten_out.Oeldruck);
 8002a20:	4bbc      	ldr	r3, [pc, #752]	; (8002d14 <main+0xa00>)
 8002a22:	785b      	ldrb	r3, [r3, #1]
 8002a24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2104      	movs	r1, #4
 8002a2e:	48ba      	ldr	r0, [pc, #744]	; (8002d18 <main+0xa04>)
 8002a30:	f002 fbdc 	bl	80051ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WISCHWARNUNG_GPIO_Port, WISCHWARNUNG_Pin, leuchten_out.Wischwarn);
 8002a34:	4bb7      	ldr	r3, [pc, #732]	; (8002d14 <main+0xa00>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a44:	48b5      	ldr	r0, [pc, #724]	; (8002d1c <main+0xa08>)
 8002a46:	f002 fbd1 	bl	80051ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, leuchten_out.Rueckwarn);
 8002a4a:	4bb2      	ldr	r3, [pc, #712]	; (8002d14 <main+0xa00>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	2180      	movs	r1, #128	; 0x80
 8002a58:	48b1      	ldr	r0, [pc, #708]	; (8002d20 <main+0xa0c>)
 8002a5a:	f002 fbc7 	bl	80051ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BREMSWARNUNG_GPIO_Port, BREMSWARNUNG_Pin, leuchten_out.Bremswarn);
 8002a5e:	4bad      	ldr	r3, [pc, #692]	; (8002d14 <main+0xa00>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a6e:	48ab      	ldr	r0, [pc, #684]	; (8002d1c <main+0xa08>)
 8002a70:	f002 fbbc 	bl	80051ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8002a74:	4ba7      	ldr	r3, [pc, #668]	; (8002d14 <main+0xa00>)
 8002a76:	785b      	ldrb	r3, [r3, #1]
 8002a78:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a84:	48a7      	ldr	r0, [pc, #668]	; (8002d24 <main+0xa10>)
 8002a86:	f002 fbb1 	bl	80051ec <HAL_GPIO_WritePin>

			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8002a8a:	4ba7      	ldr	r3, [pc, #668]	; (8002d28 <main+0xa14>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
			OutData[1] = highcurrent_out.high_out;
 8002a92:	4ba6      	ldr	r3, [pc, #664]	; (8002d2c <main+0xa18>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
			OutData[2] = (leuchten_out.ledoutput >> 8);
 8002a9a:	4b9e      	ldr	r3, [pc, #632]	; (8002d14 <main+0xa00>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
			OutData[3] = leuchten_out.ledoutput;
 8002aa8:	4b9a      	ldr	r3, [pc, #616]	; (8002d14 <main+0xa00>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			OutData[4] = komfort_out.komfortoutput;
 8002ab2:	4b9f      	ldr	r3, [pc, #636]	; (8002d30 <main+0xa1c>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	f887 30f8 	strb.w	r3, [r7, #248]	; 0xf8
			OutData[5] ++;
 8002aba:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 8002abe:	3301      	adds	r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 8002ac6:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8002aca:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002ace:	2301      	movs	r3, #1
 8002ad0:	488e      	ldr	r0, [pc, #568]	; (8002d0c <main+0x9f8>)
 8002ad2:	f001 fbd1 	bl	8004278 <HAL_CAN_AddTxMessage>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
			//hal_error(status);

			// ADC-Werte einlesen Bremse und Temperaturen
			ADC_VAL[0] = ADC_Bremsdruck();
 8002adc:	f7fe f9b0 	bl	8000e40 <ADC_Bremsdruck>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
			ADC_VAL[1] = ADC_Bremsdrucktemperatur();
 8002ae6:	f7fe fb45 	bl	8001174 <ADC_Bremsdrucktemperatur>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
			ADC_VAL[2] = ADC_STMTemperatur();
 8002af0:	f7fe fb78 	bl	80011e4 <ADC_STMTemperatur>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
			ADC_VAL[3] = ADC_PCBTemperatur();
 8002afa:	f7fe fa93 	bl	8001024 <ADC_PCBTemperatur>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] ++;
 8002b04:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8002b08:	3301      	adds	r3, #1
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
			InData[1] = (system_in.systeminput >> 8);
 8002b10:	4b88      	ldr	r3, [pc, #544]	; (8002d34 <main+0xa20>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
			InData[2] = system_in.systeminput;
 8002b1e:	4b85      	ldr	r3, [pc, #532]	; (8002d34 <main+0xa20>)
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
			InData[3] = sdc_in.sdcinput;
 8002b28:	4b83      	ldr	r3, [pc, #524]	; (8002d38 <main+0xa24>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			InData[4] = (komfort_in.komfortinput >> 8);
 8002b30:	4b82      	ldr	r3, [pc, #520]	; (8002d3c <main+0xa28>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
			InData[5] = komfort_in.komfortinput;
 8002b3e:	4b7f      	ldr	r3, [pc, #508]	; (8002d3c <main+0xa28>)
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 8002b48:	bf00      	nop
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	486f      	ldr	r0, [pc, #444]	; (8002d0c <main+0x9f8>)
 8002b4e:	f001 fc63 	bl	8004418 <HAL_CAN_IsTxMessagePending>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d0f8      	beq.n	8002b4a <main+0x836>
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 8002b58:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8002b5c:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002b60:	2301      	movs	r3, #1
 8002b62:	486a      	ldr	r0, [pc, #424]	; (8002d0c <main+0x9f8>)
 8002b64:	f001 fb88 	bl	8004278 <HAL_CAN_AddTxMessage>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
			//hal_error(status);

			// ADC-Werte einlesen Navi, Klima, KL15
			ADC_VAL[4] = ADC_KL15();
 8002b6e:	f7fe f9b1 	bl	8000ed4 <ADC_KL15>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			ADC_VAL[5] = ADC_Klimaflap();
 8002b78:	f7fe fa1c 	bl	8000fb4 <ADC_Klimaflap>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			ADC_VAL[6] = ADC_Info();
 8002b82:	f7fe fabf 	bl	8001104 <ADC_Info>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			ADC_VAL[7] = ADC_Return();
 8002b8c:	f7fe fa82 	bl	8001094 <ADC_Return>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112

			// ADC-Werte umwandeln
			AnalogData[0] = ADC_VAL[4];
 8002b96:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			AnalogData[1] = (ADC_VAL[4] >> 8) | (ADC_VAL[0] << 4);
 8002ba0:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	b25a      	sxtb	r2, r3
 8002baa:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
			AnalogData[2] = (ADC_VAL[0] >> 4);
 8002bbc:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			AnalogData[3] = gas_mean;
 8002bca:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			AnalogData[4] = (gas_mean >> 8) | (ADC_VAL[6] << 4);
 8002bd4:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	b25a      	sxtb	r2, r3
 8002bde:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	b25b      	sxtb	r3, r3
 8002be6:	4313      	orrs	r3, r2
 8002be8:	b25b      	sxtb	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8
			AnalogData[5] = (ADC_VAL[6] >> 4);
 8002bf0:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
			AnalogData[6] = ADC_VAL[7];
 8002bfe:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
			AnalogData[7] = (ADC_VAL[7] >> 8);
 8002c08:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
//			// Befehl Fehler auslesen an Bamocar senden
//			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
			//hal_error(status);

			// ADC-Werte einlesen Kuehlwassertemperatur
			ADC_VAL[8] = ADC_Kuhlwassertemperatur();
 8002c16:	f7fe f995 	bl	8000f44 <ADC_Kuhlwassertemperatur>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114

			// ADC-Werte umwandeln
			TempData[0] = ADC_VAL[2];
 8002c20:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
			TempData[1] = (ADC_VAL[2] >> 8) | (ADC_VAL[3] << 4);
 8002c2a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	b25a      	sxtb	r2, r3
 8002c34:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	b25b      	sxtb	r3, r3
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	b25b      	sxtb	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
			TempData[2] = (ADC_VAL[3] >> 4);
 8002c46:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
			TempData[3] = ADC_VAL[8];
 8002c54:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
			TempData[4] = (ADC_VAL[8] >> 8) | (ADC_VAL[1] << 4);
 8002c5e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b25a      	sxtb	r2, r3
 8002c68:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	b25b      	sxtb	r3, r3
 8002c70:	4313      	orrs	r3, r2
 8002c72:	b25b      	sxtb	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
			TempData[5] = (ADC_VAL[1] >> 4);
 8002c7a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
			TempData[6] = ADC_VAL[8];
 8002c88:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
			TempData[7] = (ADC_VAL[8] >> 8);
 8002c92:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3

			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 8002ca0:	bf00      	nop
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	4819      	ldr	r0, [pc, #100]	; (8002d0c <main+0x9f8>)
 8002ca6:	f001 fbb7 	bl	8004418 <HAL_CAN_IsTxMessagePending>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d0f8      	beq.n	8002ca2 <main+0x98e>
			// Befehl Fehler auslesen an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxTemperatur, TempData, (uint32_t *)CAN_TX_MAILBOX0);
 8002cb0:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8002cb4:	f107 0118 	add.w	r1, r7, #24
 8002cb8:	2301      	movs	r3, #1
 8002cba:	4814      	ldr	r0, [pc, #80]	; (8002d0c <main+0x9f8>)
 8002cbc:	f001 fadc 	bl	8004278 <HAL_CAN_AddTxMessage>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
			while (HAL_CAN_IsTxMessagePending(&hcan3, CAN_TX_MAILBOX0) == 1);
 8002cc6:	bf00      	nop
 8002cc8:	2101      	movs	r1, #1
 8002cca:	4810      	ldr	r0, [pc, #64]	; (8002d0c <main+0x9f8>)
 8002ccc:	f001 fba4 	bl	8004418 <HAL_CAN_IsTxMessagePending>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d0f8      	beq.n	8002cc8 <main+0x9b4>
			status = HAL_CAN_AddTxMessage(&hcan3, &TxAnalog, AnalogData, (uint32_t *)CAN_TX_MAILBOX0);
 8002cd6:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8002cda:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002cde:	2301      	movs	r3, #1
 8002ce0:	480a      	ldr	r0, [pc, #40]	; (8002d0c <main+0x9f8>)
 8002ce2:	f001 fac9 	bl	8004278 <HAL_CAN_AddTxMessage>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
		}

		if (((count % 400) == 0) && (task == 1))
 8002cec:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8002cf0:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <main+0x9fc>)
 8002cf2:	fba2 1203 	umull	r1, r2, r2, r3
 8002cf6:	09d2      	lsrs	r2, r2, #7
 8002cf8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002cfc:	fb01 f202 	mul.w	r2, r1, r2
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d122      	bne.n	8002d4e <main+0xa3a>
 8002d08:	e01a      	b.n	8002d40 <main+0xa2c>
 8002d0a:	bf00      	nop
 8002d0c:	200000f0 	.word	0x200000f0
 8002d10:	51eb851f 	.word	0x51eb851f
 8002d14:	20000050 	.word	0x20000050
 8002d18:	40021400 	.word	0x40021400
 8002d1c:	40021800 	.word	0x40021800
 8002d20:	40020c00 	.word	0x40020c00
 8002d24:	40020400 	.word	0x40020400
 8002d28:	20000048 	.word	0x20000048
 8002d2c:	2000004c 	.word	0x2000004c
 8002d30:	20000054 	.word	0x20000054
 8002d34:	2000003c 	.word	0x2000003c
 8002d38:	20000040 	.word	0x20000040
 8002d3c:	20000044 	.word	0x20000044
 8002d40:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d102      	bne.n	8002d4e <main+0xa3a>
		{
			// Variable count auf 0 zuruecksetzen
			count = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
		}

		// Zuruecksetzen Flag start
		task = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f


	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 8002d54:	f7fe fdc4 	bl	80018e0 <millis>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d95b      	bls.n	8002e1c <main+0xb08>
		{
	  		HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &RxMessage, TxData);
 8002d64:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002d68:	4a3c      	ldr	r2, [pc, #240]	; (8002e5c <main+0xb48>)
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	483c      	ldr	r0, [pc, #240]	; (8002e60 <main+0xb4c>)
 8002d6e:	f001 fb77 	bl	8004460 <HAL_CAN_GetRxMessage>

			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 8002d72:	4b3c      	ldr	r3, [pc, #240]	; (8002e64 <main+0xb50>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d14f      	bne.n	8002e1c <main+0xb08>
			{
				// Nachricht ID ueber UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 8002d7c:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <main+0xb48>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2110      	movs	r1, #16
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fd30 	bl	80007e8 <uartTransmitNumber>
				uartTransmit("\t", 1);
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4837      	ldr	r0, [pc, #220]	; (8002e68 <main+0xb54>)
 8002d8c:	f7fd fd18 	bl	80007c0 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002d96:	e00c      	b.n	8002db2 <main+0xa9e>
				{
					uartTransmitNumber(RxData[i], 16);
 8002d98:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002d9c:	4a33      	ldr	r2, [pc, #204]	; (8002e6c <main+0xb58>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	2110      	movs	r1, #16
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fd20 	bl	80007e8 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8002da8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002dac:	3301      	adds	r3, #1
 8002dae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002db2:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 8002db6:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <main+0xb48>)
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d3ec      	bcc.n	8002d98 <main+0xa84>
				}
				uartTransmit("\n", 1);
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	482b      	ldr	r0, [pc, #172]	; (8002e70 <main+0xb5c>)
 8002dc2:	f7fd fcfd 	bl	80007c0 <uartTransmit>

				// Sortieren der IDs nach Geraeten
				switch (RxMessage.StdId)
 8002dc6:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <main+0xb48>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f240 1211 	movw	r2, #273	; 0x111
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00b      	beq.n	8002dea <main+0xad6>
 8002dd2:	f240 1281 	movw	r2, #385	; 0x181
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d10c      	bne.n	8002df4 <main+0xae0>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0], RxMessage.DLC);
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <main+0xb48>)
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4619      	mov	r1, r3
 8002de2:	4822      	ldr	r0, [pc, #136]	; (8002e6c <main+0xb58>)
 8002de4:	f7fd fbb2 	bl	800054c <BAMOCAN_ID>
						break;
 8002de8:	e009      	b.n	8002dfe <main+0xaea>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 8002dea:	2117      	movs	r1, #23
 8002dec:	4821      	ldr	r0, [pc, #132]	; (8002e74 <main+0xb60>)
 8002dee:	f7fd fce7 	bl	80007c0 <uartTransmit>
						break;
 8002df2:	e004      	b.n	8002dfe <main+0xaea>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 8002df4:	2118      	movs	r1, #24
 8002df6:	4820      	ldr	r0, [pc, #128]	; (8002e78 <main+0xb64>)
 8002df8:	f7fd fce2 	bl	80007c0 <uartTransmit>
						break;
 8002dfc:	bf00      	nop
				}

				// Drehzahl ausgeben
				TxData[2] = motor1.output[2];
 8002dfe:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <main+0xb68>)
 8002e00:	789b      	ldrb	r3, [r3, #2]
 8002e02:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
				TxData[3] = motor1.output[3];
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <main+0xb68>)
 8002e08:	78db      	ldrb	r3, [r3, #3]
 8002e0a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
				lastcan = millis();
 8002e0e:	f7fe fd67 	bl	80018e0 <millis>
 8002e12:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

				can_change = 0;
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <main+0xb50>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
			}
		}

#ifdef DEBUG
		// Sende CAN Nachricht auf CAN-Bus / Teste CAN-BUS
		if (millis() - lastsendcan >= 1000)
 8002e1c:	f7fe fd60 	bl	80018e0 <millis>
 8002e20:	4602      	mov	r2, r0
 8002e22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e2c:	f4ff ab7e 	bcc.w	800252c <main+0x218>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8002e30:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8002e34:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8002e38:	2301      	movs	r3, #1
 8002e3a:	4809      	ldr	r0, [pc, #36]	; (8002e60 <main+0xb4c>)
 8002e3c:	f001 fa1c 	bl	8004278 <HAL_CAN_AddTxMessage>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
			//hal_error(status);
			lastsendcan = millis();
 8002e46:	f7fe fd4b 	bl	80018e0 <millis>
 8002e4a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

			HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	480b      	ldr	r0, [pc, #44]	; (8002e80 <main+0xb6c>)
 8002e52:	f002 f9e4 	bl	800521e <HAL_GPIO_TogglePin>
		if (UART2_rxBuffer[uart_count-1] == '\r')
 8002e56:	f7ff bb69 	b.w	800252c <main+0x218>
 8002e5a:	bf00      	nop
 8002e5c:	20000118 	.word	0x20000118
 8002e60:	200000f0 	.word	0x200000f0
 8002e64:	20000159 	.word	0x20000159
 8002e68:	080088b4 	.word	0x080088b4
 8002e6c:	20000150 	.word	0x20000150
 8002e70:	0800880c 	.word	0x0800880c
 8002e74:	080088b8 	.word	0x080088b8
 8002e78:	080088d0 	.word	0x080088d0
 8002e7c:	2000015c 	.word	0x2000015c
 8002e80:	40020400 	.word	0x40020400

08002e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b094      	sub	sp, #80	; 0x50
 8002e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e8a:	f107 031c 	add.w	r3, r7, #28
 8002e8e:	2234      	movs	r2, #52	; 0x34
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f005 f984 	bl	80081a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea8:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <SystemClock_Config+0xd8>)
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <SystemClock_Config+0xd8>)
 8002eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb4:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <SystemClock_Config+0xd8>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <SystemClock_Config+0xdc>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <SystemClock_Config+0xdc>)
 8002ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <SystemClock_Config+0xdc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002edc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ee0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ee6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002eea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002eec:	2319      	movs	r3, #25
 8002eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002ef0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002ef4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002efa:	2302      	movs	r3, #2
 8002efc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002efe:	2302      	movs	r3, #2
 8002f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 f9f4 	bl	80052f4 <HAL_RCC_OscConfig>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002f12:	f000 f8c3 	bl	800309c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f16:	f002 f99d 	bl	8005254 <HAL_PWREx_EnableOverDrive>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002f20:	f000 f8bc 	bl	800309c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f24:	230f      	movs	r3, #15
 8002f26:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002f3c:	f107 0308 	add.w	r3, r7, #8
 8002f40:	2107      	movs	r1, #7
 8002f42:	4618      	mov	r0, r3
 8002f44:	f002 fc84 	bl	8005850 <HAL_RCC_ClockConfig>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002f4e:	f000 f8a5 	bl	800309c <Error_Handler>
  }
}
 8002f52:	bf00      	nop
 8002f54:	3750      	adds	r7, #80	; 0x50
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40007000 	.word	0x40007000

08002f64 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2, &UART2_rxBuffer[uart_count], 1, 100);

	if (UART2_rxBuffer[uart_count] == 0x7F)
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <HAL_UART_RxCpltCallback+0xa8>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b27      	ldr	r3, [pc, #156]	; (8003010 <HAL_UART_RxCpltCallback+0xac>)
 8002f74:	5c9b      	ldrb	r3, [r3, r2]
 8002f76:	2b7f      	cmp	r3, #127	; 0x7f
 8002f78:	d10a      	bne.n	8002f90 <HAL_UART_RxCpltCallback+0x2c>
	{
		if (uart_count >= 1)
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_UART_RxCpltCallback+0xa8>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00c      	beq.n	8002f9c <HAL_UART_RxCpltCallback+0x38>
		{
			uart_count--;
 8002f82:	4b22      	ldr	r3, [pc, #136]	; (800300c <HAL_UART_RxCpltCallback+0xa8>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <HAL_UART_RxCpltCallback+0xa8>)
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	e005      	b.n	8002f9c <HAL_UART_RxCpltCallback+0x38>
		}
	}
	else
	{
		uart_count++;
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_UART_RxCpltCallback+0xa8>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	4b1c      	ldr	r3, [pc, #112]	; (800300c <HAL_UART_RxCpltCallback+0xa8>)
 8002f9a:	701a      	strb	r2, [r3, #0]
	}

	if (uart_count == 12)
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <HAL_UART_RxCpltCallback+0xa8>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b0c      	cmp	r3, #12
 8002fa2:	d117      	bne.n	8002fd4 <HAL_UART_RxCpltCallback+0x70>
	{
		uint8_t tmp = 0x81;
 8002fa4:	2381      	movs	r3, #129	; 0x81
 8002fa6:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\nEingabe Ung", 13, 100);
 8002fa8:	2364      	movs	r3, #100	; 0x64
 8002faa:	220d      	movs	r2, #13
 8002fac:	4919      	ldr	r1, [pc, #100]	; (8003014 <HAL_UART_RxCpltCallback+0xb0>)
 8002fae:	481a      	ldr	r0, [pc, #104]	; (8003018 <HAL_UART_RxCpltCallback+0xb4>)
 8002fb0:	f003 fe0e 	bl	8006bd0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &tmp, 1, 100);
 8002fb4:	f107 010f 	add.w	r1, r7, #15
 8002fb8:	2364      	movs	r3, #100	; 0x64
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4816      	ldr	r0, [pc, #88]	; (8003018 <HAL_UART_RxCpltCallback+0xb4>)
 8002fbe:	f003 fe07 	bl	8006bd0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "ltig\r\n", 6, 100);
 8002fc2:	2364      	movs	r3, #100	; 0x64
 8002fc4:	2206      	movs	r2, #6
 8002fc6:	4915      	ldr	r1, [pc, #84]	; (800301c <HAL_UART_RxCpltCallback+0xb8>)
 8002fc8:	4813      	ldr	r0, [pc, #76]	; (8003018 <HAL_UART_RxCpltCallback+0xb4>)
 8002fca:	f003 fe01 	bl	8006bd0 <HAL_UART_Transmit>
		uart_count = 0;
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <HAL_UART_RxCpltCallback+0xa8>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
	}

	if (UART2_rxBuffer[uart_count-1] == '\r')
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_UART_RxCpltCallback+0xa8>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <HAL_UART_RxCpltCallback+0xac>)
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	2b0d      	cmp	r3, #13
 8002fe0:	d105      	bne.n	8002fee <HAL_UART_RxCpltCallback+0x8a>
	{
	    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[0], 1);
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	490a      	ldr	r1, [pc, #40]	; (8003010 <HAL_UART_RxCpltCallback+0xac>)
 8002fe6:	480c      	ldr	r0, [pc, #48]	; (8003018 <HAL_UART_RxCpltCallback+0xb4>)
 8002fe8:	f003 fe75 	bl	8006cd6 <HAL_UART_Receive_IT>
	}
	else
	{
	    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
	}
}
 8002fec:	e009      	b.n	8003002 <HAL_UART_RxCpltCallback+0x9e>
	    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_UART_RxCpltCallback+0xa8>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_UART_RxCpltCallback+0xac>)
 8002ff6:	4413      	add	r3, r2
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4806      	ldr	r0, [pc, #24]	; (8003018 <HAL_UART_RxCpltCallback+0xb4>)
 8002ffe:	f003 fe6a 	bl	8006cd6 <HAL_UART_Receive_IT>
}
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000014c 	.word	0x2000014c
 8003010:	20000134 	.word	0x20000134
 8003014:	080089b8 	.word	0x080089b8
 8003018:	200001b0 	.word	0x200001b0
 800301c:	080089c8 	.word	0x080089c8

08003020 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	// Nachricht aus Speicher auslesen
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800302a:	4a07      	ldr	r2, [pc, #28]	; (8003048 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800302c:	2100      	movs	r1, #0
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f001 fa16 	bl	8004460 <HAL_CAN_GetRxMessage>
	can_change = 1;
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20000150 	.word	0x20000150
 8003048:	20000118 	.word	0x20000118
 800304c:	20000159 	.word	0x20000159

08003050 <HAL_CAN_RxFifo0FullCallback>:

// Can-Interrupt: Fifo0 ist voll
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	// Fifo0 voll
	uartTransmit("Fifo0 von CAN3 ist voll\n", 24);
 8003058:	2118      	movs	r1, #24
 800305a:	4804      	ldr	r0, [pc, #16]	; (800306c <HAL_CAN_RxFifo0FullCallback+0x1c>)
 800305c:	f7fd fbb0 	bl	80007c0 <uartTransmit>

	Error_Handler();
 8003060:	f000 f81c 	bl	800309c <Error_Handler>
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	080089d0 	.word	0x080089d0

08003070 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)																	// Wenn Timer 6 den ueberlauf ausgeloest hat
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a06      	ldr	r2, [pc, #24]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d102      	bne.n	8003086 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;														// Setze Millisekunden Flag
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
	}
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000164 	.word	0x20000164
 8003098:	20000158 	.word	0x20000158

0800309c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80030a0:	b672      	cpsid	i
}
 80030a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 80030a4:	4a11      	ldr	r2, [pc, #68]	; (80030ec <Error_Handler+0x50>)
 80030a6:	7853      	ldrb	r3, [r2, #1]
 80030a8:	f043 0308 	orr.w	r3, r3, #8
 80030ac:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 80030ae:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <Error_Handler+0x50>)
 80030b0:	785b      	ldrb	r3, [r3, #1]
 80030b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	2104      	movs	r1, #4
 80030bc:	480c      	ldr	r0, [pc, #48]	; (80030f0 <Error_Handler+0x54>)
 80030be:	f002 f895 	bl	80051ec <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <Error_Handler+0x50>)
 80030c4:	7853      	ldrb	r3, [r2, #1]
 80030c6:	f36f 1304 	bfc	r3, #4, #1
 80030ca:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <Error_Handler+0x50>)
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030dc:	4804      	ldr	r0, [pc, #16]	; (80030f0 <Error_Handler+0x54>)
 80030de:	f002 f885 	bl	80051ec <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 80030e2:	2122      	movs	r1, #34	; 0x22
 80030e4:	4803      	ldr	r0, [pc, #12]	; (80030f4 <Error_Handler+0x58>)
 80030e6:	f7fd fb6b 	bl	80007c0 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 80030ea:	e7fe      	b.n	80030ea <Error_Handler+0x4e>
 80030ec:	20000050 	.word	0x20000050
 80030f0:	40020400 	.word	0x40020400
 80030f4:	080089ec 	.word	0x080089ec

080030f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	4b0f      	ldr	r3, [pc, #60]	; (800313c <HAL_MspInit+0x44>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a0e      	ldr	r2, [pc, #56]	; (800313c <HAL_MspInit+0x44>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b0c      	ldr	r3, [pc, #48]	; (800313c <HAL_MspInit+0x44>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_MspInit+0x44>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	4a08      	ldr	r2, [pc, #32]	; (800313c <HAL_MspInit+0x44>)
 800311c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003120:	6453      	str	r3, [r2, #68]	; 0x44
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_MspInit+0x44>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800

08003140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003144:	e7fe      	b.n	8003144 <NMI_Handler+0x4>

08003146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800314a:	e7fe      	b.n	800314a <HardFault_Handler+0x4>

0800314c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003150:	e7fe      	b.n	8003150 <MemManage_Handler+0x4>

08003152 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003156:	e7fe      	b.n	8003156 <BusFault_Handler+0x4>

08003158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800315c:	e7fe      	b.n	800315c <UsageFault_Handler+0x4>

0800315e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800318c:	f000 f98e 	bl	80034ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}

08003194 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <USART2_IRQHandler+0x10>)
 800319a:	f003 fde1 	bl	8006d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200001b0 	.word	0x200001b0

080031a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <TIM6_DAC_IRQHandler+0x10>)
 80031ae:	f003 fa2d 	bl	800660c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000164 	.word	0x20000164

080031bc <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <CAN3_RX0_IRQHandler+0x10>)
 80031c2:	f001 fa85 	bl	80046d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200000f0 	.word	0x200000f0

080031d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <SystemInit+0x28>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <SystemInit+0x28>)
 80031dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <SystemInit+0x28>)
 80031e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031ea:	609a      	str	r2, [r3, #8]
#endif
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800320c:	4b14      	ldr	r3, [pc, #80]	; (8003260 <MX_TIM6_Init+0x64>)
 800320e:	4a15      	ldr	r2, [pc, #84]	; (8003264 <MX_TIM6_Init+0x68>)
 8003210:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27-1;
 8003212:	4b13      	ldr	r3, [pc, #76]	; (8003260 <MX_TIM6_Init+0x64>)
 8003214:	221a      	movs	r2, #26
 8003216:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <MX_TIM6_Init+0x64>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000-1;
 800321e:	4b10      	ldr	r3, [pc, #64]	; (8003260 <MX_TIM6_Init+0x64>)
 8003220:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003224:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <MX_TIM6_Init+0x64>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800322c:	480c      	ldr	r0, [pc, #48]	; (8003260 <MX_TIM6_Init+0x64>)
 800322e:	f003 f91d 	bl	800646c <HAL_TIM_Base_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003238:	f7ff ff30 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800323c:	2300      	movs	r3, #0
 800323e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003244:	1d3b      	adds	r3, r7, #4
 8003246:	4619      	mov	r1, r3
 8003248:	4805      	ldr	r0, [pc, #20]	; (8003260 <MX_TIM6_Init+0x64>)
 800324a:	f003 fbc7 	bl	80069dc <HAL_TIMEx_MasterConfigSynchronization>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003254:	f7ff ff22 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000164 	.word	0x20000164
 8003264:	40001000 	.word	0x40001000

08003268 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <HAL_TIM_Base_MspInit+0x44>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d113      	bne.n	80032a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800327a:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <HAL_TIM_Base_MspInit+0x48>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a0c      	ldr	r2, [pc, #48]	; (80032b0 <HAL_TIM_Base_MspInit+0x48>)
 8003280:	f043 0310 	orr.w	r3, r3, #16
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_TIM_Base_MspInit+0x48>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	2036      	movs	r0, #54	; 0x36
 8003298:	f001 fd1b 	bl	8004cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800329c:	2036      	movs	r0, #54	; 0x36
 800329e:	f001 fd34 	bl	8004d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40001000 	.word	0x40001000
 80032b0:	40023800 	.word	0x40023800

080032b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032b8:	4b14      	ldr	r3, [pc, #80]	; (800330c <MX_USART2_UART_Init+0x58>)
 80032ba:	4a15      	ldr	r2, [pc, #84]	; (8003310 <MX_USART2_UART_Init+0x5c>)
 80032bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <MX_USART2_UART_Init+0x58>)
 80032c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80032c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032c6:	4b11      	ldr	r3, [pc, #68]	; (800330c <MX_USART2_UART_Init+0x58>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032cc:	4b0f      	ldr	r3, [pc, #60]	; (800330c <MX_USART2_UART_Init+0x58>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032d2:	4b0e      	ldr	r3, [pc, #56]	; (800330c <MX_USART2_UART_Init+0x58>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <MX_USART2_UART_Init+0x58>)
 80032da:	220c      	movs	r2, #12
 80032dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <MX_USART2_UART_Init+0x58>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <MX_USART2_UART_Init+0x58>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032ea:	4b08      	ldr	r3, [pc, #32]	; (800330c <MX_USART2_UART_Init+0x58>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <MX_USART2_UART_Init+0x58>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032f6:	4805      	ldr	r0, [pc, #20]	; (800330c <MX_USART2_UART_Init+0x58>)
 80032f8:	f003 fc1c 	bl	8006b34 <HAL_UART_Init>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003302:	f7ff fecb 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	200001b0 	.word	0x200001b0
 8003310:	40004400 	.word	0x40004400

08003314 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b0ae      	sub	sp, #184	; 0xb8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	2290      	movs	r2, #144	; 0x90
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f004 ff33 	bl	80081a0 <memset>
  if(uartHandle->Instance==USART2)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <HAL_UART_MspInit+0xc0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d142      	bne.n	80033ca <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003348:	2300      	movs	r3, #0
 800334a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	4618      	mov	r0, r3
 8003352:	f002 fc63 	bl	8005c1c <HAL_RCCEx_PeriphCLKConfig>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800335c:	f7ff fe9e 	bl	800309c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003360:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_UART_MspInit+0xc4>)
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <HAL_UART_MspInit+0xc4>)
 8003366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336a:	6413      	str	r3, [r2, #64]	; 0x40
 800336c:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <HAL_UART_MspInit+0xc4>)
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003378:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <HAL_UART_MspInit+0xc4>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <HAL_UART_MspInit+0xc4>)
 800337e:	f043 0308 	orr.w	r3, r3, #8
 8003382:	6313      	str	r3, [r2, #48]	; 0x30
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_UART_MspInit+0xc4>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8003390:	2360      	movs	r3, #96	; 0x60
 8003392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	2302      	movs	r3, #2
 8003398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a2:	2303      	movs	r3, #3
 80033a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033a8:	2307      	movs	r3, #7
 80033aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80033b2:	4619      	mov	r1, r3
 80033b4:	4809      	ldr	r0, [pc, #36]	; (80033dc <HAL_UART_MspInit+0xc8>)
 80033b6:	f001 fd55 	bl	8004e64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	2026      	movs	r0, #38	; 0x26
 80033c0:	f001 fc87 	bl	8004cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033c4:	2026      	movs	r0, #38	; 0x26
 80033c6:	f001 fca0 	bl	8004d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80033ca:	bf00      	nop
 80033cc:	37b8      	adds	r7, #184	; 0xb8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40004400 	.word	0x40004400
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40020c00 	.word	0x40020c00

080033e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003418 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80033e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80033e6:	e003      	b.n	80033f0 <LoopCopyDataInit>

080033e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80033ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80033ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80033ee:	3104      	adds	r1, #4

080033f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80033f0:	480b      	ldr	r0, [pc, #44]	; (8003420 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80033f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80033f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80033f8:	d3f6      	bcc.n	80033e8 <CopyDataInit>
  ldr  r2, =_sbss
 80033fa:	4a0b      	ldr	r2, [pc, #44]	; (8003428 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80033fc:	e002      	b.n	8003404 <LoopFillZerobss>

080033fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80033fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003400:	f842 3b04 	str.w	r3, [r2], #4

08003404 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003404:	4b09      	ldr	r3, [pc, #36]	; (800342c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003406:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003408:	d3f9      	bcc.n	80033fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800340a:	f7ff fee1 	bl	80031d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800340e:	f004 fea3 	bl	8008158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003412:	f7fe ff7f 	bl	8002314 <main>
  bx  lr    
 8003416:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003418:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800341c:	08008a60 	.word	0x08008a60
  ldr  r0, =_sdata
 8003420:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003424:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003428:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800342c:	2000023c 	.word	0x2000023c

08003430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003430:	e7fe      	b.n	8003430 <ADC_IRQHandler>

08003432 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003436:	2003      	movs	r0, #3
 8003438:	f001 fc40 	bl	8004cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800343c:	2000      	movs	r0, #0
 800343e:	f000 f805 	bl	800344c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003442:	f7ff fe59 	bl	80030f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <HAL_InitTick+0x54>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <HAL_InitTick+0x58>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	4619      	mov	r1, r3
 800345e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003462:	fbb3 f3f1 	udiv	r3, r3, r1
 8003466:	fbb2 f3f3 	udiv	r3, r2, r3
 800346a:	4618      	mov	r0, r3
 800346c:	f001 fc5b 	bl	8004d26 <HAL_SYSTICK_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e00e      	b.n	8003498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b0f      	cmp	r3, #15
 800347e:	d80a      	bhi.n	8003496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003480:	2200      	movs	r2, #0
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	f001 fc23 	bl	8004cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800348c:	4a06      	ldr	r2, [pc, #24]	; (80034a8 <HAL_InitTick+0x5c>)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000000 	.word	0x20000000
 80034a4:	20000008 	.word	0x20000008
 80034a8:	20000004 	.word	0x20000004

080034ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_IncTick+0x20>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <HAL_IncTick+0x24>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4413      	add	r3, r2
 80034bc:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <HAL_IncTick+0x24>)
 80034be:	6013      	str	r3, [r2, #0]
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000008 	.word	0x20000008
 80034d0:	20000238 	.word	0x20000238

080034d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return uwTick;
 80034d8:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <HAL_GetTick+0x14>)
 80034da:	681b      	ldr	r3, [r3, #0]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000238 	.word	0x20000238

080034ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034f4:	f7ff ffee 	bl	80034d4 <HAL_GetTick>
 80034f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d005      	beq.n	8003512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <HAL_Delay+0x44>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003512:	bf00      	nop
 8003514:	f7ff ffde 	bl	80034d4 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	429a      	cmp	r2, r3
 8003522:	d8f7      	bhi.n	8003514 <HAL_Delay+0x28>
  {
  }
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000008 	.word	0x20000008

08003534 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8003538:	4b02      	ldr	r3, [pc, #8]	; (8003544 <HAL_GetHalVersion+0x10>)
}
 800353a:	4618      	mov	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	01030000 	.word	0x01030000

08003548 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_GetREVID+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	0c1b      	lsrs	r3, r3, #16
}
 8003552:	4618      	mov	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e0042000 	.word	0xe0042000

08003560 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003564:	4b04      	ldr	r3, [pc, #16]	; (8003578 <HAL_GetDEVID+0x18>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	e0042000 	.word	0xe0042000

0800357c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_GetUIDw0+0x14>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	1ff0f420 	.word	0x1ff0f420

08003594 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_GetUIDw1+0x14>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	1ff0f424 	.word	0x1ff0f424

080035ac <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <HAL_GetUIDw2+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	1ff0f428 	.word	0x1ff0f428

080035c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e031      	b.n	800363e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fe fb0c 	bl	8001c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d116      	bne.n	8003630 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <HAL_ADC_Init+0x84>)
 8003608:	4013      	ands	r3, r2
 800360a:	f043 0202 	orr.w	r2, r3, #2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fb0a 	bl	8003c2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f023 0303 	bic.w	r3, r3, #3
 8003626:	f043 0201 	orr.w	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
 800362e:	e001      	b.n	8003634 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	ffffeefd 	.word	0xffffeefd

0800364c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_ADC_Start+0x1a>
 8003662:	2302      	movs	r3, #2
 8003664:	e0ad      	b.n	80037c2 <HAL_ADC_Start+0x176>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b01      	cmp	r3, #1
 800367a:	d018      	beq.n	80036ae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800368c:	4b50      	ldr	r3, [pc, #320]	; (80037d0 <HAL_ADC_Start+0x184>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a50      	ldr	r2, [pc, #320]	; (80037d4 <HAL_ADC_Start+0x188>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	0c9a      	lsrs	r2, r3, #18
 8003698:	4613      	mov	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	4413      	add	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80036a0:	e002      	b.n	80036a8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f9      	bne.n	80036a2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d175      	bne.n	80037a8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c0:	4b45      	ldr	r3, [pc, #276]	; (80037d8 <HAL_ADC_Start+0x18c>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f6:	d106      	bne.n	8003706 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	f023 0206 	bic.w	r2, r3, #6
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	645a      	str	r2, [r3, #68]	; 0x44
 8003704:	e002      	b.n	800370c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800371c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800371e:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <HAL_ADC_Start+0x190>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10f      	bne.n	800374a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d143      	bne.n	80037c0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	e03a      	b.n	80037c0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a24      	ldr	r2, [pc, #144]	; (80037e0 <HAL_ADC_Start+0x194>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d10e      	bne.n	8003772 <HAL_ADC_Start+0x126>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d107      	bne.n	8003772 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003770:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003772:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <HAL_ADC_Start+0x190>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b00      	cmp	r3, #0
 800377c:	d120      	bne.n	80037c0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_ADC_Start+0x198>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d11b      	bne.n	80037c0 <HAL_ADC_Start+0x174>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d114      	bne.n	80037c0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037a4:	609a      	str	r2, [r3, #8]
 80037a6:	e00b      	b.n	80037c0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f043 0210 	orr.w	r2, r3, #16
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b8:	f043 0201 	orr.w	r2, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000000 	.word	0x20000000
 80037d4:	431bde83 	.word	0x431bde83
 80037d8:	fffff8fe 	.word	0xfffff8fe
 80037dc:	40012300 	.word	0x40012300
 80037e0:	40012000 	.word	0x40012000
 80037e4:	40012200 	.word	0x40012200

080037e8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_ADC_Stop+0x16>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e01f      	b.n	800383e <HAL_ADC_Stop+0x56>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0201 	bic.w	r2, r2, #1
 8003814:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d107      	bne.n	8003834 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003828:	4b08      	ldr	r3, [pc, #32]	; (800384c <HAL_ADC_Stop+0x64>)
 800382a:	4013      	ands	r3, r2
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	ffffeefe 	.word	0xffffeefe

08003850 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386c:	d113      	bne.n	8003896 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387c:	d10b      	bne.n	8003896 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f043 0220 	orr.w	r2, r3, #32
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e063      	b.n	800395e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003896:	f7ff fe1d 	bl	80034d4 <HAL_GetTick>
 800389a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800389c:	e021      	b.n	80038e2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d01d      	beq.n	80038e2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d007      	beq.n	80038bc <HAL_ADC_PollForConversion+0x6c>
 80038ac:	f7ff fe12 	bl	80034d4 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d212      	bcs.n	80038e2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d00b      	beq.n	80038e2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f043 0204 	orr.w	r2, r3, #4
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e03d      	b.n	800395e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d1d6      	bne.n	800389e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0212 	mvn.w	r2, #18
 80038f8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d123      	bne.n	800395c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003918:	2b00      	cmp	r3, #0
 800391a:	d11f      	bne.n	800395c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003926:	2b00      	cmp	r3, #0
 8003928:	d006      	beq.n	8003938 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003934:	2b00      	cmp	r3, #0
 8003936:	d111      	bne.n	800395c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	f043 0201 	orr.w	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_ADC_ConfigChannel+0x1c>
 8003998:	2302      	movs	r3, #2
 800399a:	e136      	b.n	8003c0a <HAL_ADC_ConfigChannel+0x28a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b09      	cmp	r3, #9
 80039aa:	d93a      	bls.n	8003a22 <HAL_ADC_ConfigChannel+0xa2>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039b4:	d035      	beq.n	8003a22 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68d9      	ldr	r1, [r3, #12]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	4613      	mov	r3, r2
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	4413      	add	r3, r2
 80039ca:	3b1e      	subs	r3, #30
 80039cc:	2207      	movs	r2, #7
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43da      	mvns	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	400a      	ands	r2, r1
 80039da:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a8d      	ldr	r2, [pc, #564]	; (8003c18 <HAL_ADC_ConfigChannel+0x298>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d10a      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68d9      	ldr	r1, [r3, #12]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	061a      	lsls	r2, r3, #24
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039fa:	e035      	b.n	8003a68 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68d9      	ldr	r1, [r3, #12]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	4603      	mov	r3, r0
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4403      	add	r3, r0
 8003a14:	3b1e      	subs	r3, #30
 8003a16:	409a      	lsls	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a20:	e022      	b.n	8003a68 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6919      	ldr	r1, [r3, #16]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	2207      	movs	r2, #7
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43da      	mvns	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	400a      	ands	r2, r1
 8003a44:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6919      	ldr	r1, [r3, #16]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	4618      	mov	r0, r3
 8003a58:	4603      	mov	r3, r0
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4403      	add	r3, r0
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b06      	cmp	r3, #6
 8003a6e:	d824      	bhi.n	8003aba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	3b05      	subs	r3, #5
 8003a82:	221f      	movs	r2, #31
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43da      	mvns	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	400a      	ands	r2, r1
 8003a90:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3b05      	subs	r3, #5
 8003aac:	fa00 f203 	lsl.w	r2, r0, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	635a      	str	r2, [r3, #52]	; 0x34
 8003ab8:	e04c      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d824      	bhi.n	8003b0c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3b23      	subs	r3, #35	; 0x23
 8003ad4:	221f      	movs	r2, #31
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43da      	mvns	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	400a      	ands	r2, r1
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	4618      	mov	r0, r3
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	3b23      	subs	r3, #35	; 0x23
 8003afe:	fa00 f203 	lsl.w	r2, r0, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
 8003b0a:	e023      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3b41      	subs	r3, #65	; 0x41
 8003b1e:	221f      	movs	r2, #31
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43da      	mvns	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	400a      	ands	r2, r1
 8003b2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	3b41      	subs	r3, #65	; 0x41
 8003b48:	fa00 f203 	lsl.w	r2, r0, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a30      	ldr	r2, [pc, #192]	; (8003c1c <HAL_ADC_ConfigChannel+0x29c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d10a      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x1f4>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b66:	d105      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	4a2c      	ldr	r2, [pc, #176]	; (8003c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b6e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b72:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a28      	ldr	r2, [pc, #160]	; (8003c1c <HAL_ADC_ConfigChannel+0x29c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d10f      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x21e>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b12      	cmp	r3, #18
 8003b84:	d10b      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003b86:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4a25      	ldr	r2, [pc, #148]	; (8003c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b90:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b9c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1e      	ldr	r2, [pc, #120]	; (8003c1c <HAL_ADC_ConfigChannel+0x29c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d12b      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x280>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1a      	ldr	r2, [pc, #104]	; (8003c18 <HAL_ADC_ConfigChannel+0x298>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d003      	beq.n	8003bba <HAL_ADC_ConfigChannel+0x23a>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b11      	cmp	r3, #17
 8003bb8:	d122      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003bba:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4a18      	ldr	r2, [pc, #96]	; (8003c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8003bc0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003bc4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <HAL_ADC_ConfigChannel+0x2a0>)
 8003bcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bd0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <HAL_ADC_ConfigChannel+0x298>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d111      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003bdc:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_ADC_ConfigChannel+0x2a4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <HAL_ADC_ConfigChannel+0x2a8>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	0c9a      	lsrs	r2, r3, #18
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003bf2:	e002      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1f9      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	10000012 	.word	0x10000012
 8003c1c:	40012000 	.word	0x40012000
 8003c20:	40012300 	.word	0x40012300
 8003c24:	20000000 	.word	0x20000000
 8003c28:	431bde83 	.word	0x431bde83

08003c2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003c34:	4b78      	ldr	r3, [pc, #480]	; (8003e18 <ADC_Init+0x1ec>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4a77      	ldr	r2, [pc, #476]	; (8003e18 <ADC_Init+0x1ec>)
 8003c3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c3e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003c40:	4b75      	ldr	r3, [pc, #468]	; (8003e18 <ADC_Init+0x1ec>)
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4973      	ldr	r1, [pc, #460]	; (8003e18 <ADC_Init+0x1ec>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	021a      	lsls	r2, r3, #8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6859      	ldr	r1, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6899      	ldr	r1, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	4a58      	ldr	r2, [pc, #352]	; (8003e1c <ADC_Init+0x1f0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d022      	beq.n	8003d06 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6899      	ldr	r1, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6899      	ldr	r1, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	e00f      	b.n	8003d26 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0202 	bic.w	r2, r2, #2
 8003d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6899      	ldr	r1, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	005a      	lsls	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01b      	beq.n	8003d8c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6859      	ldr	r1, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	035a      	lsls	r2, r3, #13
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	e007      	b.n	8003d9c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	051a      	lsls	r2, r3, #20
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6899      	ldr	r1, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dde:	025a      	lsls	r2, r3, #9
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6899      	ldr	r1, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	029a      	lsls	r2, r3, #10
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	609a      	str	r2, [r3, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	40012300 	.word	0x40012300
 8003e1c:	0f000001 	.word	0x0f000001

08003e20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0ed      	b.n	800400e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d102      	bne.n	8003e44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fd fff8 	bl	8001e34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e54:	f7ff fb3e 	bl	80034d4 <HAL_GetTick>
 8003e58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e5a:	e012      	b.n	8003e82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e5c:	f7ff fb3a 	bl	80034d4 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b0a      	cmp	r3, #10
 8003e68:	d90b      	bls.n	8003e82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2205      	movs	r2, #5
 8003e7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0c5      	b.n	800400e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0e5      	beq.n	8003e5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0202 	bic.w	r2, r2, #2
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ea0:	f7ff fb18 	bl	80034d4 <HAL_GetTick>
 8003ea4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ea6:	e012      	b.n	8003ece <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ea8:	f7ff fb14 	bl	80034d4 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b0a      	cmp	r3, #10
 8003eb4:	d90b      	bls.n	8003ece <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2205      	movs	r2, #5
 8003ec6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e09f      	b.n	800400e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e5      	bne.n	8003ea8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	7e1b      	ldrb	r3, [r3, #24]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d108      	bne.n	8003ef6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e007      	b.n	8003f06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7e5b      	ldrb	r3, [r3, #25]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d108      	bne.n	8003f20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e007      	b.n	8003f30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	7e9b      	ldrb	r3, [r3, #26]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d108      	bne.n	8003f4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0220 	orr.w	r2, r2, #32
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e007      	b.n	8003f5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0220 	bic.w	r2, r2, #32
 8003f58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	7edb      	ldrb	r3, [r3, #27]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d108      	bne.n	8003f74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0210 	bic.w	r2, r2, #16
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e007      	b.n	8003f84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0210 	orr.w	r2, r2, #16
 8003f82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	7f1b      	ldrb	r3, [r3, #28]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d108      	bne.n	8003f9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0208 	orr.w	r2, r2, #8
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	e007      	b.n	8003fae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0208 	bic.w	r2, r2, #8
 8003fac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	7f5b      	ldrb	r3, [r3, #29]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d108      	bne.n	8003fc8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0204 	orr.w	r2, r2, #4
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e007      	b.n	8003fd8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0204 	bic.w	r2, r2, #4
 8003fd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	ea42 0103 	orr.w	r1, r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	1e5a      	subs	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800402e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d003      	beq.n	800403e <HAL_CAN_ConfigFilter+0x26>
 8004036:	7cfb      	ldrb	r3, [r7, #19]
 8004038:	2b02      	cmp	r3, #2
 800403a:	f040 80c7 	bne.w	80041cc <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a69      	ldr	r2, [pc, #420]	; (80041e8 <HAL_CAN_ConfigFilter+0x1d0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d001      	beq.n	800404c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8004048:	4b68      	ldr	r3, [pc, #416]	; (80041ec <HAL_CAN_ConfigFilter+0x1d4>)
 800404a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004052:	f043 0201 	orr.w	r2, r3, #1
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	4a63      	ldr	r2, [pc, #396]	; (80041ec <HAL_CAN_ConfigFilter+0x1d4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d111      	bne.n	8004088 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800406a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	431a      	orrs	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	2201      	movs	r2, #1
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	401a      	ands	r2, r3
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d123      	bne.n	80040fa <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	401a      	ands	r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	3248      	adds	r2, #72	; 0x48
 80040da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040f0:	6979      	ldr	r1, [r7, #20]
 80040f2:	3348      	adds	r3, #72	; 0x48
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	440b      	add	r3, r1
 80040f8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d122      	bne.n	8004148 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	431a      	orrs	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004122:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	3248      	adds	r2, #72	; 0x48
 8004128:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800413c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800413e:	6979      	ldr	r1, [r7, #20]
 8004140:	3348      	adds	r3, #72	; 0x48
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	440b      	add	r3, r1
 8004146:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43db      	mvns	r3, r3
 800415a:	401a      	ands	r2, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004162:	e007      	b.n	8004174 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	431a      	orrs	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	43db      	mvns	r3, r3
 8004186:	401a      	ands	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800418e:	e007      	b.n	80041a0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	431a      	orrs	r2, r3
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	431a      	orrs	r2, r3
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041be:	f023 0201 	bic.w	r2, r3, #1
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e006      	b.n	80041da <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
  }
}
 80041da:	4618      	mov	r0, r3
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40003400 	.word	0x40003400
 80041ec:	40006400 	.word	0x40006400

080041f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d12e      	bne.n	8004262 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800421c:	f7ff f95a 	bl	80034d4 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004222:	e012      	b.n	800424a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004224:	f7ff f956 	bl	80034d4 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b0a      	cmp	r3, #10
 8004230:	d90b      	bls.n	800424a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2205      	movs	r2, #5
 8004242:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e012      	b.n	8004270 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e5      	bne.n	8004224 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	e006      	b.n	8004270 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
  }
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004278:	b480      	push	{r7}
 800427a:	b089      	sub	sp, #36	; 0x24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 3020 	ldrb.w	r3, [r3, #32]
 800428c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004296:	7ffb      	ldrb	r3, [r7, #31]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d003      	beq.n	80042a4 <HAL_CAN_AddTxMessage+0x2c>
 800429c:	7ffb      	ldrb	r3, [r7, #31]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	f040 80ad 	bne.w	80043fe <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8095 	beq.w	80043ee <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	0e1b      	lsrs	r3, r3, #24
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80042ce:	2201      	movs	r2, #1
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	409a      	lsls	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10d      	bne.n	80042fc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042ea:	68f9      	ldr	r1, [r7, #12]
 80042ec:	6809      	ldr	r1, [r1, #0]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	3318      	adds	r3, #24
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	440b      	add	r3, r1
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	e00f      	b.n	800431c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004306:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800430c:	68f9      	ldr	r1, [r7, #12]
 800430e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004310:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	3318      	adds	r3, #24
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	440b      	add	r3, r1
 800431a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6819      	ldr	r1, [r3, #0]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	3318      	adds	r3, #24
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	440b      	add	r3, r1
 800432c:	3304      	adds	r3, #4
 800432e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	7d1b      	ldrb	r3, [r3, #20]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d111      	bne.n	800435c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	3318      	adds	r3, #24
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	4413      	add	r3, r2
 8004344:	3304      	adds	r3, #4
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	6811      	ldr	r1, [r2, #0]
 800434c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	3318      	adds	r3, #24
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	440b      	add	r3, r1
 8004358:	3304      	adds	r3, #4
 800435a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3307      	adds	r3, #7
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	061a      	lsls	r2, r3, #24
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3306      	adds	r3, #6
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3305      	adds	r3, #5
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	4313      	orrs	r3, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	3204      	adds	r2, #4
 800437c:	7812      	ldrb	r2, [r2, #0]
 800437e:	4610      	mov	r0, r2
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	6811      	ldr	r1, [r2, #0]
 8004384:	ea43 0200 	orr.w	r2, r3, r0
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	440b      	add	r3, r1
 800438e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004392:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3303      	adds	r3, #3
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	061a      	lsls	r2, r3, #24
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3302      	adds	r3, #2
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3301      	adds	r3, #1
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	4313      	orrs	r3, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	7812      	ldrb	r2, [r2, #0]
 80043b4:	4610      	mov	r0, r2
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	6811      	ldr	r1, [r2, #0]
 80043ba:	ea43 0200 	orr.w	r2, r3, r0
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	440b      	add	r3, r1
 80043c4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80043c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	3318      	adds	r3, #24
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	4413      	add	r3, r2
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	6811      	ldr	r1, [r2, #0]
 80043dc:	f043 0201 	orr.w	r2, r3, #1
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3318      	adds	r3, #24
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	440b      	add	r3, r1
 80043e8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e00e      	b.n	800440c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e006      	b.n	800440c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
  }
}
 800440c:	4618      	mov	r0, r3
 800440e:	3724      	adds	r7, #36	; 0x24
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800442c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800442e:	7afb      	ldrb	r3, [r7, #11]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d002      	beq.n	800443a <HAL_CAN_IsTxMessagePending+0x22>
 8004434:	7afb      	ldrb	r3, [r7, #11]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d10b      	bne.n	8004452 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	069b      	lsls	r3, r3, #26
 8004444:	401a      	ands	r2, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	069b      	lsls	r3, r3, #26
 800444a:	429a      	cmp	r2, r3
 800444c:	d001      	beq.n	8004452 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800444e:	2301      	movs	r3, #1
 8004450:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004452:	68fb      	ldr	r3, [r7, #12]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004474:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d003      	beq.n	8004484 <HAL_CAN_GetRxMessage+0x24>
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	2b02      	cmp	r3, #2
 8004480:	f040 80f3 	bne.w	800466a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10e      	bne.n	80044a8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d116      	bne.n	80044c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0e7      	b.n	8004678 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d107      	bne.n	80044c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e0d8      	b.n	8004678 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	331b      	adds	r3, #27
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	4413      	add	r3, r2
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0204 	and.w	r2, r3, #4
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10c      	bne.n	80044fe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	331b      	adds	r3, #27
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	4413      	add	r3, r2
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	0d5b      	lsrs	r3, r3, #21
 80044f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e00b      	b.n	8004516 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	331b      	adds	r3, #27
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	4413      	add	r3, r2
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	08db      	lsrs	r3, r3, #3
 800450e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	331b      	adds	r3, #27
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	4413      	add	r3, r2
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0202 	and.w	r2, r3, #2
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	331b      	adds	r3, #27
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	4413      	add	r3, r2
 8004538:	3304      	adds	r3, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 020f 	and.w	r2, r3, #15
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	331b      	adds	r3, #27
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	4413      	add	r3, r2
 8004550:	3304      	adds	r3, #4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	0a1b      	lsrs	r3, r3, #8
 8004556:	b2da      	uxtb	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	331b      	adds	r3, #27
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	4413      	add	r3, r2
 8004568:	3304      	adds	r3, #4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	b29a      	uxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	4413      	add	r3, r2
 800457e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	4413      	add	r3, r2
 8004594:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	0a1a      	lsrs	r2, r3, #8
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	3301      	adds	r3, #1
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	0c1a      	lsrs	r2, r3, #16
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	3302      	adds	r3, #2
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	0e1a      	lsrs	r2, r3, #24
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	3303      	adds	r3, #3
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	3304      	adds	r3, #4
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0a1a      	lsrs	r2, r3, #8
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	3305      	adds	r3, #5
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	4413      	add	r3, r2
 8004614:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	0c1a      	lsrs	r2, r3, #16
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	3306      	adds	r3, #6
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4413      	add	r3, r2
 800462e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	0e1a      	lsrs	r2, r3, #24
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	3307      	adds	r3, #7
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d108      	bne.n	8004656 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0220 	orr.w	r2, r2, #32
 8004652:	60da      	str	r2, [r3, #12]
 8004654:	e007      	b.n	8004666 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0220 	orr.w	r2, r2, #32
 8004664:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	e006      	b.n	8004678 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
  }
}
 8004678:	4618      	mov	r0, r3
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004694:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d002      	beq.n	80046a2 <HAL_CAN_ActivateNotification+0x1e>
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d109      	bne.n	80046b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6959      	ldr	r1, [r3, #20]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e006      	b.n	80046c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80046d8:	2300      	movs	r3, #0
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d07c      	beq.n	8004810 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d023      	beq.n	8004768 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2201      	movs	r2, #1
 8004726:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f983 	bl	8004a3e <HAL_CAN_TxMailbox0CompleteCallback>
 8004738:	e016      	b.n	8004768 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
 800474c:	e00c      	b.n	8004768 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
 8004760:	e002      	b.n	8004768 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f989 	bl	8004a7a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d024      	beq.n	80047bc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800477a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f963 	bl	8004a52 <HAL_CAN_TxMailbox1CompleteCallback>
 800478c:	e016      	b.n	80047bc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
 80047a0:	e00c      	b.n	80047bc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d004      	beq.n	80047b6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
 80047b4:	e002      	b.n	80047bc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f969 	bl	8004a8e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d024      	beq.n	8004810 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80047ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f943 	bl	8004a66 <HAL_CAN_TxMailbox2CompleteCallback>
 80047e0:	e016      	b.n	8004810 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
 80047f4:	e00c      	b.n	8004810 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d004      	beq.n	800480a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
 8004808:	e002      	b.n	8004810 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f949 	bl	8004aa2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00c      	beq.n	8004834 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b00      	cmp	r3, #0
 8004822:	d007      	beq.n	8004834 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800482a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2210      	movs	r2, #16
 8004832:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d006      	beq.n	8004856 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2208      	movs	r2, #8
 800484e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7fe fbfd 	bl	8003050 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d009      	beq.n	8004874 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fe fbd6 	bl	8003020 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00c      	beq.n	8004898 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800488e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2210      	movs	r2, #16
 8004896:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2208      	movs	r2, #8
 80048b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f908 	bl	8004aca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d009      	beq.n	80048d8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8ef 	bl	8004ab6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00b      	beq.n	80048fa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d006      	beq.n	80048fa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2210      	movs	r2, #16
 80048f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f8f2 	bl	8004ade <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00b      	beq.n	800491c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d006      	beq.n	800491c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2208      	movs	r2, #8
 8004914:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f8eb 	bl	8004af2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d07b      	beq.n	8004a1e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d072      	beq.n	8004a16 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	f043 0302 	orr.w	r3, r3, #2
 8004966:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498a:	2b00      	cmp	r3, #0
 800498c:	d043      	beq.n	8004a16 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004994:	2b00      	cmp	r3, #0
 8004996:	d03e      	beq.n	8004a16 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800499e:	2b60      	cmp	r3, #96	; 0x60
 80049a0:	d02b      	beq.n	80049fa <HAL_CAN_IRQHandler+0x32a>
 80049a2:	2b60      	cmp	r3, #96	; 0x60
 80049a4:	d82e      	bhi.n	8004a04 <HAL_CAN_IRQHandler+0x334>
 80049a6:	2b50      	cmp	r3, #80	; 0x50
 80049a8:	d022      	beq.n	80049f0 <HAL_CAN_IRQHandler+0x320>
 80049aa:	2b50      	cmp	r3, #80	; 0x50
 80049ac:	d82a      	bhi.n	8004a04 <HAL_CAN_IRQHandler+0x334>
 80049ae:	2b40      	cmp	r3, #64	; 0x40
 80049b0:	d019      	beq.n	80049e6 <HAL_CAN_IRQHandler+0x316>
 80049b2:	2b40      	cmp	r3, #64	; 0x40
 80049b4:	d826      	bhi.n	8004a04 <HAL_CAN_IRQHandler+0x334>
 80049b6:	2b30      	cmp	r3, #48	; 0x30
 80049b8:	d010      	beq.n	80049dc <HAL_CAN_IRQHandler+0x30c>
 80049ba:	2b30      	cmp	r3, #48	; 0x30
 80049bc:	d822      	bhi.n	8004a04 <HAL_CAN_IRQHandler+0x334>
 80049be:	2b10      	cmp	r3, #16
 80049c0:	d002      	beq.n	80049c8 <HAL_CAN_IRQHandler+0x2f8>
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d005      	beq.n	80049d2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80049c6:	e01d      	b.n	8004a04 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	f043 0308 	orr.w	r3, r3, #8
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049d0:	e019      	b.n	8004a06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	f043 0310 	orr.w	r3, r3, #16
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049da:	e014      	b.n	8004a06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	f043 0320 	orr.w	r3, r3, #32
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049e4:	e00f      	b.n	8004a06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049ee:	e00a      	b.n	8004a06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049f8:	e005      	b.n	8004a06 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a02:	e000      	b.n	8004a06 <HAL_CAN_IRQHandler+0x336>
            break;
 8004a04:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699a      	ldr	r2, [r3, #24]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a14:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f868 	bl	8004b06 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a36:	bf00      	nop
 8004a38:	3728      	adds	r7, #40	; 0x28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <__NVIC_SetPriorityGrouping>:
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <__NVIC_SetPriorityGrouping+0x40>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <__NVIC_SetPriorityGrouping+0x44>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b4a:	4a04      	ldr	r2, [pc, #16]	; (8004b5c <__NVIC_SetPriorityGrouping+0x40>)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	60d3      	str	r3, [r2, #12]
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	e000ed00 	.word	0xe000ed00
 8004b60:	05fa0000 	.word	0x05fa0000

08004b64 <__NVIC_GetPriorityGrouping>:
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b68:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <__NVIC_GetPriorityGrouping+0x18>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	0a1b      	lsrs	r3, r3, #8
 8004b6e:	f003 0307 	and.w	r3, r3, #7
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	e000ed00 	.word	0xe000ed00

08004b80 <__NVIC_EnableIRQ>:
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	db0b      	blt.n	8004baa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	f003 021f 	and.w	r2, r3, #31
 8004b98:	4907      	ldr	r1, [pc, #28]	; (8004bb8 <__NVIC_EnableIRQ+0x38>)
 8004b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	e000e100 	.word	0xe000e100

08004bbc <__NVIC_SetPriority>:
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	6039      	str	r1, [r7, #0]
 8004bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	db0a      	blt.n	8004be6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	490c      	ldr	r1, [pc, #48]	; (8004c08 <__NVIC_SetPriority+0x4c>)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	0112      	lsls	r2, r2, #4
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	440b      	add	r3, r1
 8004be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004be4:	e00a      	b.n	8004bfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	4908      	ldr	r1, [pc, #32]	; (8004c0c <__NVIC_SetPriority+0x50>)
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	3b04      	subs	r3, #4
 8004bf4:	0112      	lsls	r2, r2, #4
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	761a      	strb	r2, [r3, #24]
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	e000e100 	.word	0xe000e100
 8004c0c:	e000ed00 	.word	0xe000ed00

08004c10 <NVIC_EncodePriority>:
{
 8004c10:	b480      	push	{r7}
 8004c12:	b089      	sub	sp, #36	; 0x24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f1c3 0307 	rsb	r3, r3, #7
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	bf28      	it	cs
 8004c2e:	2304      	movcs	r3, #4
 8004c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3304      	adds	r3, #4
 8004c36:	2b06      	cmp	r3, #6
 8004c38:	d902      	bls.n	8004c40 <NVIC_EncodePriority+0x30>
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3b03      	subs	r3, #3
 8004c3e:	e000      	b.n	8004c42 <NVIC_EncodePriority+0x32>
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c44:	f04f 32ff 	mov.w	r2, #4294967295
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	401a      	ands	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c58:	f04f 31ff 	mov.w	r1, #4294967295
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c62:	43d9      	mvns	r1, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c68:	4313      	orrs	r3, r2
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3724      	adds	r7, #36	; 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <SysTick_Config>:
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c88:	d301      	bcc.n	8004c8e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e00f      	b.n	8004cae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <SysTick_Config+0x40>)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c96:	210f      	movs	r1, #15
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	f7ff ff8e 	bl	8004bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <SysTick_Config+0x40>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ca6:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <SysTick_Config+0x40>)
 8004ca8:	2207      	movs	r2, #7
 8004caa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	e000e010 	.word	0xe000e010

08004cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff29 	bl	8004b1c <__NVIC_SetPriorityGrouping>
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	4603      	mov	r3, r0
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ce4:	f7ff ff3e 	bl	8004b64 <__NVIC_GetPriorityGrouping>
 8004ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	6978      	ldr	r0, [r7, #20]
 8004cf0:	f7ff ff8e 	bl	8004c10 <NVIC_EncodePriority>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff ff5d 	bl	8004bbc <__NVIC_SetPriority>
}
 8004d02:	bf00      	nop
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	4603      	mov	r3, r0
 8004d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff ff31 	bl	8004b80 <__NVIC_EnableIRQ>
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff ffa2 	bl	8004c78 <SysTick_Config>
 8004d34:	4603      	mov	r3, r0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d4c:	f7fe fbc2 	bl	80034d4 <HAL_GetTick>
 8004d50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d008      	beq.n	8004d70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2280      	movs	r2, #128	; 0x80
 8004d62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e052      	b.n	8004e16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0216 	bic.w	r2, r2, #22
 8004d7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d103      	bne.n	8004da0 <HAL_DMA_Abort+0x62>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0208 	bic.w	r2, r2, #8
 8004dae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dc0:	e013      	b.n	8004dea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dc2:	f7fe fb87 	bl	80034d4 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b05      	cmp	r3, #5
 8004dce:	d90c      	bls.n	8004dea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2203      	movs	r2, #3
 8004dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e015      	b.n	8004e16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e4      	bne.n	8004dc2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfc:	223f      	movs	r2, #63	; 0x3f
 8004dfe:	409a      	lsls	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d004      	beq.n	8004e3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2280      	movs	r2, #128	; 0x80
 8004e36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e00c      	b.n	8004e56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2205      	movs	r2, #5
 8004e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b089      	sub	sp, #36	; 0x24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004e76:	2300      	movs	r3, #0
 8004e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61fb      	str	r3, [r7, #28]
 8004e82:	e175      	b.n	8005170 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004e84:	2201      	movs	r2, #1
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4013      	ands	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	f040 8164 	bne.w	800516a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d005      	beq.n	8004eba <HAL_GPIO_Init+0x56>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d130      	bne.n	8004f1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	2203      	movs	r2, #3
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4013      	ands	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	f003 0201 	and.w	r2, r3, #1
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d017      	beq.n	8004f58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	2203      	movs	r2, #3
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d123      	bne.n	8004fac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	08da      	lsrs	r2, r3, #3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3208      	adds	r2, #8
 8004f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	220f      	movs	r2, #15
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	4013      	ands	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	08da      	lsrs	r2, r3, #3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3208      	adds	r2, #8
 8004fa6:	69b9      	ldr	r1, [r7, #24]
 8004fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 0203 	and.w	r2, r3, #3
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80be 	beq.w	800516a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fee:	4b66      	ldr	r3, [pc, #408]	; (8005188 <HAL_GPIO_Init+0x324>)
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff2:	4a65      	ldr	r2, [pc, #404]	; (8005188 <HAL_GPIO_Init+0x324>)
 8004ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8004ffa:	4b63      	ldr	r3, [pc, #396]	; (8005188 <HAL_GPIO_Init+0x324>)
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005006:	4a61      	ldr	r2, [pc, #388]	; (800518c <HAL_GPIO_Init+0x328>)
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	089b      	lsrs	r3, r3, #2
 800500c:	3302      	adds	r3, #2
 800500e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	220f      	movs	r2, #15
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a58      	ldr	r2, [pc, #352]	; (8005190 <HAL_GPIO_Init+0x32c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d037      	beq.n	80050a2 <HAL_GPIO_Init+0x23e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a57      	ldr	r2, [pc, #348]	; (8005194 <HAL_GPIO_Init+0x330>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d031      	beq.n	800509e <HAL_GPIO_Init+0x23a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a56      	ldr	r2, [pc, #344]	; (8005198 <HAL_GPIO_Init+0x334>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d02b      	beq.n	800509a <HAL_GPIO_Init+0x236>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a55      	ldr	r2, [pc, #340]	; (800519c <HAL_GPIO_Init+0x338>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d025      	beq.n	8005096 <HAL_GPIO_Init+0x232>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a54      	ldr	r2, [pc, #336]	; (80051a0 <HAL_GPIO_Init+0x33c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d01f      	beq.n	8005092 <HAL_GPIO_Init+0x22e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a53      	ldr	r2, [pc, #332]	; (80051a4 <HAL_GPIO_Init+0x340>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d019      	beq.n	800508e <HAL_GPIO_Init+0x22a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a52      	ldr	r2, [pc, #328]	; (80051a8 <HAL_GPIO_Init+0x344>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d013      	beq.n	800508a <HAL_GPIO_Init+0x226>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a51      	ldr	r2, [pc, #324]	; (80051ac <HAL_GPIO_Init+0x348>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00d      	beq.n	8005086 <HAL_GPIO_Init+0x222>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a50      	ldr	r2, [pc, #320]	; (80051b0 <HAL_GPIO_Init+0x34c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d007      	beq.n	8005082 <HAL_GPIO_Init+0x21e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a4f      	ldr	r2, [pc, #316]	; (80051b4 <HAL_GPIO_Init+0x350>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d101      	bne.n	800507e <HAL_GPIO_Init+0x21a>
 800507a:	2309      	movs	r3, #9
 800507c:	e012      	b.n	80050a4 <HAL_GPIO_Init+0x240>
 800507e:	230a      	movs	r3, #10
 8005080:	e010      	b.n	80050a4 <HAL_GPIO_Init+0x240>
 8005082:	2308      	movs	r3, #8
 8005084:	e00e      	b.n	80050a4 <HAL_GPIO_Init+0x240>
 8005086:	2307      	movs	r3, #7
 8005088:	e00c      	b.n	80050a4 <HAL_GPIO_Init+0x240>
 800508a:	2306      	movs	r3, #6
 800508c:	e00a      	b.n	80050a4 <HAL_GPIO_Init+0x240>
 800508e:	2305      	movs	r3, #5
 8005090:	e008      	b.n	80050a4 <HAL_GPIO_Init+0x240>
 8005092:	2304      	movs	r3, #4
 8005094:	e006      	b.n	80050a4 <HAL_GPIO_Init+0x240>
 8005096:	2303      	movs	r3, #3
 8005098:	e004      	b.n	80050a4 <HAL_GPIO_Init+0x240>
 800509a:	2302      	movs	r3, #2
 800509c:	e002      	b.n	80050a4 <HAL_GPIO_Init+0x240>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <HAL_GPIO_Init+0x240>
 80050a2:	2300      	movs	r3, #0
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	f002 0203 	and.w	r2, r2, #3
 80050aa:	0092      	lsls	r2, r2, #2
 80050ac:	4093      	lsls	r3, r2
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80050b4:	4935      	ldr	r1, [pc, #212]	; (800518c <HAL_GPIO_Init+0x328>)
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	3302      	adds	r3, #2
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050c2:	4b3d      	ldr	r3, [pc, #244]	; (80051b8 <HAL_GPIO_Init+0x354>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	43db      	mvns	r3, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050e6:	4a34      	ldr	r2, [pc, #208]	; (80051b8 <HAL_GPIO_Init+0x354>)
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050ec:	4b32      	ldr	r3, [pc, #200]	; (80051b8 <HAL_GPIO_Init+0x354>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	43db      	mvns	r3, r3
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4013      	ands	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005110:	4a29      	ldr	r2, [pc, #164]	; (80051b8 <HAL_GPIO_Init+0x354>)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005116:	4b28      	ldr	r3, [pc, #160]	; (80051b8 <HAL_GPIO_Init+0x354>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	43db      	mvns	r3, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4013      	ands	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800513a:	4a1f      	ldr	r2, [pc, #124]	; (80051b8 <HAL_GPIO_Init+0x354>)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005140:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <HAL_GPIO_Init+0x354>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	43db      	mvns	r3, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4013      	ands	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005164:	4a14      	ldr	r2, [pc, #80]	; (80051b8 <HAL_GPIO_Init+0x354>)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	3301      	adds	r3, #1
 800516e:	61fb      	str	r3, [r7, #28]
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	2b0f      	cmp	r3, #15
 8005174:	f67f ae86 	bls.w	8004e84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	3724      	adds	r7, #36	; 0x24
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40023800 	.word	0x40023800
 800518c:	40013800 	.word	0x40013800
 8005190:	40020000 	.word	0x40020000
 8005194:	40020400 	.word	0x40020400
 8005198:	40020800 	.word	0x40020800
 800519c:	40020c00 	.word	0x40020c00
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40021400 	.word	0x40021400
 80051a8:	40021800 	.word	0x40021800
 80051ac:	40021c00 	.word	0x40021c00
 80051b0:	40022000 	.word	0x40022000
 80051b4:	40022400 	.word	0x40022400
 80051b8:	40013c00 	.word	0x40013c00

080051bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	887b      	ldrh	r3, [r7, #2]
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
 80051d8:	e001      	b.n	80051de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051da:	2300      	movs	r3, #0
 80051dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051de:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	807b      	strh	r3, [r7, #2]
 80051f8:	4613      	mov	r3, r2
 80051fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051fc:	787b      	ldrb	r3, [r7, #1]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005202:	887a      	ldrh	r2, [r7, #2]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005208:	e003      	b.n	8005212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800520a:	887b      	ldrh	r3, [r7, #2]
 800520c:	041a      	lsls	r2, r3, #16
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	619a      	str	r2, [r3, #24]
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005230:	887a      	ldrh	r2, [r7, #2]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4013      	ands	r3, r2
 8005236:	041a      	lsls	r2, r3, #16
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	43d9      	mvns	r1, r3
 800523c:	887b      	ldrh	r3, [r7, #2]
 800523e:	400b      	ands	r3, r1
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	619a      	str	r2, [r3, #24]
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800525e:	4b23      	ldr	r3, [pc, #140]	; (80052ec <HAL_PWREx_EnableOverDrive+0x98>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	4a22      	ldr	r2, [pc, #136]	; (80052ec <HAL_PWREx_EnableOverDrive+0x98>)
 8005264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005268:	6413      	str	r3, [r2, #64]	; 0x40
 800526a:	4b20      	ldr	r3, [pc, #128]	; (80052ec <HAL_PWREx_EnableOverDrive+0x98>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005276:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1d      	ldr	r2, [pc, #116]	; (80052f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800527c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005280:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005282:	f7fe f927 	bl	80034d4 <HAL_GetTick>
 8005286:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005288:	e009      	b.n	800529e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800528a:	f7fe f923 	bl	80034d4 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005298:	d901      	bls.n	800529e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e022      	b.n	80052e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800529e:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052aa:	d1ee      	bne.n	800528a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80052ac:	4b10      	ldr	r3, [pc, #64]	; (80052f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0f      	ldr	r2, [pc, #60]	; (80052f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052b8:	f7fe f90c 	bl	80034d4 <HAL_GetTick>
 80052bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052be:	e009      	b.n	80052d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052c0:	f7fe f908 	bl	80034d4 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ce:	d901      	bls.n	80052d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e007      	b.n	80052e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052d4:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052e0:	d1ee      	bne.n	80052c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40023800 	.word	0x40023800
 80052f0:	40007000 	.word	0x40007000

080052f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80052fc:	2300      	movs	r3, #0
 80052fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e29b      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 8087 	beq.w	8005426 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005318:	4b96      	ldr	r3, [pc, #600]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 030c 	and.w	r3, r3, #12
 8005320:	2b04      	cmp	r3, #4
 8005322:	d00c      	beq.n	800533e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005324:	4b93      	ldr	r3, [pc, #588]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 030c 	and.w	r3, r3, #12
 800532c:	2b08      	cmp	r3, #8
 800532e:	d112      	bne.n	8005356 <HAL_RCC_OscConfig+0x62>
 8005330:	4b90      	ldr	r3, [pc, #576]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800533c:	d10b      	bne.n	8005356 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800533e:	4b8d      	ldr	r3, [pc, #564]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d06c      	beq.n	8005424 <HAL_RCC_OscConfig+0x130>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d168      	bne.n	8005424 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e275      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800535e:	d106      	bne.n	800536e <HAL_RCC_OscConfig+0x7a>
 8005360:	4b84      	ldr	r3, [pc, #528]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a83      	ldr	r2, [pc, #524]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	e02e      	b.n	80053cc <HAL_RCC_OscConfig+0xd8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10c      	bne.n	8005390 <HAL_RCC_OscConfig+0x9c>
 8005376:	4b7f      	ldr	r3, [pc, #508]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a7e      	ldr	r2, [pc, #504]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 800537c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	4b7c      	ldr	r3, [pc, #496]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a7b      	ldr	r2, [pc, #492]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005388:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e01d      	b.n	80053cc <HAL_RCC_OscConfig+0xd8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005398:	d10c      	bne.n	80053b4 <HAL_RCC_OscConfig+0xc0>
 800539a:	4b76      	ldr	r3, [pc, #472]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a75      	ldr	r2, [pc, #468]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80053a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	4b73      	ldr	r3, [pc, #460]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a72      	ldr	r2, [pc, #456]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80053ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	e00b      	b.n	80053cc <HAL_RCC_OscConfig+0xd8>
 80053b4:	4b6f      	ldr	r3, [pc, #444]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a6e      	ldr	r2, [pc, #440]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80053ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b6c      	ldr	r3, [pc, #432]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a6b      	ldr	r2, [pc, #428]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80053c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d013      	beq.n	80053fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fe f87e 	bl	80034d4 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fe f87a 	bl	80034d4 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	; 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e229      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ee:	4b61      	ldr	r3, [pc, #388]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0xe8>
 80053fa:	e014      	b.n	8005426 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fe f86a 	bl	80034d4 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005404:	f7fe f866 	bl	80034d4 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e215      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005416:	4b57      	ldr	r3, [pc, #348]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x110>
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d069      	beq.n	8005506 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005432:	4b50      	ldr	r3, [pc, #320]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00b      	beq.n	8005456 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800543e:	4b4d      	ldr	r3, [pc, #308]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
 8005446:	2b08      	cmp	r3, #8
 8005448:	d11c      	bne.n	8005484 <HAL_RCC_OscConfig+0x190>
 800544a:	4b4a      	ldr	r3, [pc, #296]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d116      	bne.n	8005484 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005456:	4b47      	ldr	r3, [pc, #284]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <HAL_RCC_OscConfig+0x17a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d001      	beq.n	800546e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e1e9      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800546e:	4b41      	ldr	r3, [pc, #260]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	493d      	ldr	r1, [pc, #244]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 800547e:	4313      	orrs	r3, r2
 8005480:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005482:	e040      	b.n	8005506 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d023      	beq.n	80054d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800548c:	4b39      	ldr	r3, [pc, #228]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a38      	ldr	r2, [pc, #224]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fe f81c 	bl	80034d4 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a0:	f7fe f818 	bl	80034d4 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e1c7      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b2:	4b30      	ldr	r3, [pc, #192]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054be:	4b2d      	ldr	r3, [pc, #180]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	4929      	ldr	r1, [pc, #164]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	600b      	str	r3, [r1, #0]
 80054d2:	e018      	b.n	8005506 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054d4:	4b27      	ldr	r3, [pc, #156]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a26      	ldr	r2, [pc, #152]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e0:	f7fd fff8 	bl	80034d4 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054e8:	f7fd fff4 	bl	80034d4 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e1a3      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054fa:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d038      	beq.n	8005584 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d019      	beq.n	800554e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800551a:	4b16      	ldr	r3, [pc, #88]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 800551c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800551e:	4a15      	ldr	r2, [pc, #84]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005526:	f7fd ffd5 	bl	80034d4 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552e:	f7fd ffd1 	bl	80034d4 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e180      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005540:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <HAL_RCC_OscConfig+0x23a>
 800554c:	e01a      	b.n	8005584 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800554e:	4b09      	ldr	r3, [pc, #36]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005552:	4a08      	ldr	r2, [pc, #32]	; (8005574 <HAL_RCC_OscConfig+0x280>)
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555a:	f7fd ffbb 	bl	80034d4 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005560:	e00a      	b.n	8005578 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005562:	f7fd ffb7 	bl	80034d4 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d903      	bls.n	8005578 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e166      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
 8005574:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005578:	4b92      	ldr	r3, [pc, #584]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 800557a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1ee      	bne.n	8005562 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80a4 	beq.w	80056da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005592:	4b8c      	ldr	r3, [pc, #560]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10d      	bne.n	80055ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800559e:	4b89      	ldr	r3, [pc, #548]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	4a88      	ldr	r2, [pc, #544]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 80055a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a8:	6413      	str	r3, [r2, #64]	; 0x40
 80055aa:	4b86      	ldr	r3, [pc, #536]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b2:	60bb      	str	r3, [r7, #8]
 80055b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b6:	2301      	movs	r3, #1
 80055b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ba:	4b83      	ldr	r3, [pc, #524]	; (80057c8 <HAL_RCC_OscConfig+0x4d4>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d118      	bne.n	80055f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80055c6:	4b80      	ldr	r3, [pc, #512]	; (80057c8 <HAL_RCC_OscConfig+0x4d4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a7f      	ldr	r2, [pc, #508]	; (80057c8 <HAL_RCC_OscConfig+0x4d4>)
 80055cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055d2:	f7fd ff7f 	bl	80034d4 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055da:	f7fd ff7b 	bl	80034d4 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b64      	cmp	r3, #100	; 0x64
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e12a      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ec:	4b76      	ldr	r3, [pc, #472]	; (80057c8 <HAL_RCC_OscConfig+0x4d4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0f0      	beq.n	80055da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d106      	bne.n	800560e <HAL_RCC_OscConfig+0x31a>
 8005600:	4b70      	ldr	r3, [pc, #448]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005604:	4a6f      	ldr	r2, [pc, #444]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	6713      	str	r3, [r2, #112]	; 0x70
 800560c:	e02d      	b.n	800566a <HAL_RCC_OscConfig+0x376>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10c      	bne.n	8005630 <HAL_RCC_OscConfig+0x33c>
 8005616:	4b6b      	ldr	r3, [pc, #428]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561a:	4a6a      	ldr	r2, [pc, #424]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 800561c:	f023 0301 	bic.w	r3, r3, #1
 8005620:	6713      	str	r3, [r2, #112]	; 0x70
 8005622:	4b68      	ldr	r3, [pc, #416]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005626:	4a67      	ldr	r2, [pc, #412]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005628:	f023 0304 	bic.w	r3, r3, #4
 800562c:	6713      	str	r3, [r2, #112]	; 0x70
 800562e:	e01c      	b.n	800566a <HAL_RCC_OscConfig+0x376>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2b05      	cmp	r3, #5
 8005636:	d10c      	bne.n	8005652 <HAL_RCC_OscConfig+0x35e>
 8005638:	4b62      	ldr	r3, [pc, #392]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 800563a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563c:	4a61      	ldr	r2, [pc, #388]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 800563e:	f043 0304 	orr.w	r3, r3, #4
 8005642:	6713      	str	r3, [r2, #112]	; 0x70
 8005644:	4b5f      	ldr	r3, [pc, #380]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005648:	4a5e      	ldr	r2, [pc, #376]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	6713      	str	r3, [r2, #112]	; 0x70
 8005650:	e00b      	b.n	800566a <HAL_RCC_OscConfig+0x376>
 8005652:	4b5c      	ldr	r3, [pc, #368]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005656:	4a5b      	ldr	r2, [pc, #364]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005658:	f023 0301 	bic.w	r3, r3, #1
 800565c:	6713      	str	r3, [r2, #112]	; 0x70
 800565e:	4b59      	ldr	r3, [pc, #356]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005662:	4a58      	ldr	r2, [pc, #352]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005664:	f023 0304 	bic.w	r3, r3, #4
 8005668:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d015      	beq.n	800569e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005672:	f7fd ff2f 	bl	80034d4 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005678:	e00a      	b.n	8005690 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567a:	f7fd ff2b 	bl	80034d4 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f241 3288 	movw	r2, #5000	; 0x1388
 8005688:	4293      	cmp	r3, r2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e0d8      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005690:	4b4c      	ldr	r3, [pc, #304]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0ee      	beq.n	800567a <HAL_RCC_OscConfig+0x386>
 800569c:	e014      	b.n	80056c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569e:	f7fd ff19 	bl	80034d4 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a4:	e00a      	b.n	80056bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a6:	f7fd ff15 	bl	80034d4 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e0c2      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056bc:	4b41      	ldr	r3, [pc, #260]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 80056be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1ee      	bne.n	80056a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d105      	bne.n	80056da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ce:	4b3d      	ldr	r3, [pc, #244]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	4a3c      	ldr	r2, [pc, #240]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 80056d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 80ae 	beq.w	8005840 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056e4:	4b37      	ldr	r3, [pc, #220]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 030c 	and.w	r3, r3, #12
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d06d      	beq.n	80057cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d14b      	bne.n	8005790 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f8:	4b32      	ldr	r3, [pc, #200]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a31      	ldr	r2, [pc, #196]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 80056fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005704:	f7fd fee6 	bl	80034d4 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800570c:	f7fd fee2 	bl	80034d4 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e091      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571e:	4b29      	ldr	r3, [pc, #164]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	019b      	lsls	r3, r3, #6
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	3b01      	subs	r3, #1
 8005744:	041b      	lsls	r3, r3, #16
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	061b      	lsls	r3, r3, #24
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	071b      	lsls	r3, r3, #28
 8005756:	491b      	ldr	r1, [pc, #108]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005758:	4313      	orrs	r3, r2
 800575a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800575c:	4b19      	ldr	r3, [pc, #100]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005768:	f7fd feb4 	bl	80034d4 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005770:	f7fd feb0 	bl	80034d4 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e05f      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005782:	4b10      	ldr	r3, [pc, #64]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0x47c>
 800578e:	e057      	b.n	8005840 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005790:	4b0c      	ldr	r3, [pc, #48]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a0b      	ldr	r2, [pc, #44]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 8005796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579c:	f7fd fe9a 	bl	80034d4 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a4:	f7fd fe96 	bl	80034d4 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e045      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b6:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <HAL_RCC_OscConfig+0x4d0>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1f0      	bne.n	80057a4 <HAL_RCC_OscConfig+0x4b0>
 80057c2:	e03d      	b.n	8005840 <HAL_RCC_OscConfig+0x54c>
 80057c4:	40023800 	.word	0x40023800
 80057c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80057cc:	4b1f      	ldr	r3, [pc, #124]	; (800584c <HAL_RCC_OscConfig+0x558>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d030      	beq.n	800583c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d129      	bne.n	800583c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d122      	bne.n	800583c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057fc:	4013      	ands	r3, r2
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005802:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005804:	4293      	cmp	r3, r2
 8005806:	d119      	bne.n	800583c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	3b01      	subs	r3, #1
 8005816:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005818:	429a      	cmp	r2, r3
 800581a:	d10f      	bne.n	800583c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005828:	429a      	cmp	r2, r3
 800582a:	d107      	bne.n	800583c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005838:	429a      	cmp	r2, r3
 800583a:	d001      	beq.n	8005840 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40023800 	.word	0x40023800

08005850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e0d0      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005868:	4b6a      	ldr	r3, [pc, #424]	; (8005a14 <HAL_RCC_ClockConfig+0x1c4>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d910      	bls.n	8005898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005876:	4b67      	ldr	r3, [pc, #412]	; (8005a14 <HAL_RCC_ClockConfig+0x1c4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 020f 	bic.w	r2, r3, #15
 800587e:	4965      	ldr	r1, [pc, #404]	; (8005a14 <HAL_RCC_ClockConfig+0x1c4>)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	4313      	orrs	r3, r2
 8005884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005886:	4b63      	ldr	r3, [pc, #396]	; (8005a14 <HAL_RCC_ClockConfig+0x1c4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d001      	beq.n	8005898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0b8      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d020      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b0:	4b59      	ldr	r3, [pc, #356]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	4a58      	ldr	r2, [pc, #352]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 80058b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058c8:	4b53      	ldr	r3, [pc, #332]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	4a52      	ldr	r2, [pc, #328]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 80058ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d4:	4b50      	ldr	r3, [pc, #320]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	494d      	ldr	r1, [pc, #308]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d040      	beq.n	8005974 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d107      	bne.n	800590a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fa:	4b47      	ldr	r3, [pc, #284]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d115      	bne.n	8005932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e07f      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d107      	bne.n	8005922 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005912:	4b41      	ldr	r3, [pc, #260]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e073      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005922:	4b3d      	ldr	r3, [pc, #244]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e06b      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005932:	4b39      	ldr	r3, [pc, #228]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f023 0203 	bic.w	r2, r3, #3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	4936      	ldr	r1, [pc, #216]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 8005940:	4313      	orrs	r3, r2
 8005942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005944:	f7fd fdc6 	bl	80034d4 <HAL_GetTick>
 8005948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594a:	e00a      	b.n	8005962 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800594c:	f7fd fdc2 	bl	80034d4 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	f241 3288 	movw	r2, #5000	; 0x1388
 800595a:	4293      	cmp	r3, r2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e053      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005962:	4b2d      	ldr	r3, [pc, #180]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 020c 	and.w	r2, r3, #12
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	429a      	cmp	r2, r3
 8005972:	d1eb      	bne.n	800594c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005974:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <HAL_RCC_ClockConfig+0x1c4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d210      	bcs.n	80059a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005982:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <HAL_RCC_ClockConfig+0x1c4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f023 020f 	bic.w	r2, r3, #15
 800598a:	4922      	ldr	r1, [pc, #136]	; (8005a14 <HAL_RCC_ClockConfig+0x1c4>)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	4313      	orrs	r3, r2
 8005990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005992:	4b20      	ldr	r3, [pc, #128]	; (8005a14 <HAL_RCC_ClockConfig+0x1c4>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	429a      	cmp	r2, r3
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e032      	b.n	8005a0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b0:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4916      	ldr	r1, [pc, #88]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059ce:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	490e      	ldr	r1, [pc, #56]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059e2:	f000 f821 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 80059e6:	4602      	mov	r2, r0
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <HAL_RCC_ClockConfig+0x1c8>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	490a      	ldr	r1, [pc, #40]	; (8005a1c <HAL_RCC_ClockConfig+0x1cc>)
 80059f4:	5ccb      	ldrb	r3, [r1, r3]
 80059f6:	fa22 f303 	lsr.w	r3, r2, r3
 80059fa:	4a09      	ldr	r2, [pc, #36]	; (8005a20 <HAL_RCC_ClockConfig+0x1d0>)
 80059fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059fe:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <HAL_RCC_ClockConfig+0x1d4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fd fd22 	bl	800344c <HAL_InitTick>

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40023c00 	.word	0x40023c00
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	08008a10 	.word	0x08008a10
 8005a20:	20000000 	.word	0x20000000
 8005a24:	20000004 	.word	0x20000004

08005a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a2c:	b090      	sub	sp, #64	; 0x40
 8005a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
 8005a34:	2300      	movs	r3, #0
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a38:	2300      	movs	r3, #0
 8005a3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a40:	4b59      	ldr	r3, [pc, #356]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 030c 	and.w	r3, r3, #12
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d00d      	beq.n	8005a68 <HAL_RCC_GetSysClockFreq+0x40>
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	f200 80a1 	bhi.w	8005b94 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0x34>
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d003      	beq.n	8005a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a5a:	e09b      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a5c:	4b53      	ldr	r3, [pc, #332]	; (8005bac <HAL_RCC_GetSysClockFreq+0x184>)
 8005a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a60:	e09b      	b.n	8005b9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a62:	4b53      	ldr	r3, [pc, #332]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a66:	e098      	b.n	8005b9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a68:	4b4f      	ldr	r3, [pc, #316]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a70:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005a72:	4b4d      	ldr	r3, [pc, #308]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d028      	beq.n	8005ad0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a7e:	4b4a      	ldr	r3, [pc, #296]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	099b      	lsrs	r3, r3, #6
 8005a84:	2200      	movs	r2, #0
 8005a86:	623b      	str	r3, [r7, #32]
 8005a88:	627a      	str	r2, [r7, #36]	; 0x24
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a90:	2100      	movs	r1, #0
 8005a92:	4b47      	ldr	r3, [pc, #284]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a94:	fb03 f201 	mul.w	r2, r3, r1
 8005a98:	2300      	movs	r3, #0
 8005a9a:	fb00 f303 	mul.w	r3, r0, r3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	4a43      	ldr	r2, [pc, #268]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005aa2:	fba0 1202 	umull	r1, r2, r0, r2
 8005aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aa8:	460a      	mov	r2, r1
 8005aaa:	62ba      	str	r2, [r7, #40]	; 0x28
 8005aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aae:	4413      	add	r3, r2
 8005ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	61bb      	str	r3, [r7, #24]
 8005ab8:	61fa      	str	r2, [r7, #28]
 8005aba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005abe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005ac2:	f7fa fbc1 	bl	8000248 <__aeabi_uldivmod>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4613      	mov	r3, r2
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ace:	e053      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ad0:	4b35      	ldr	r3, [pc, #212]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	099b      	lsrs	r3, r3, #6
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	617a      	str	r2, [r7, #20]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005ae2:	f04f 0b00 	mov.w	fp, #0
 8005ae6:	4652      	mov	r2, sl
 8005ae8:	465b      	mov	r3, fp
 8005aea:	f04f 0000 	mov.w	r0, #0
 8005aee:	f04f 0100 	mov.w	r1, #0
 8005af2:	0159      	lsls	r1, r3, #5
 8005af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005af8:	0150      	lsls	r0, r2, #5
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	ebb2 080a 	subs.w	r8, r2, sl
 8005b02:	eb63 090b 	sbc.w	r9, r3, fp
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b1a:	ebb2 0408 	subs.w	r4, r2, r8
 8005b1e:	eb63 0509 	sbc.w	r5, r3, r9
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	00eb      	lsls	r3, r5, #3
 8005b2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b30:	00e2      	lsls	r2, r4, #3
 8005b32:	4614      	mov	r4, r2
 8005b34:	461d      	mov	r5, r3
 8005b36:	eb14 030a 	adds.w	r3, r4, sl
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	eb45 030b 	adc.w	r3, r5, fp
 8005b40:	607b      	str	r3, [r7, #4]
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	f04f 0300 	mov.w	r3, #0
 8005b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b4e:	4629      	mov	r1, r5
 8005b50:	028b      	lsls	r3, r1, #10
 8005b52:	4621      	mov	r1, r4
 8005b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b58:	4621      	mov	r1, r4
 8005b5a:	028a      	lsls	r2, r1, #10
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b62:	2200      	movs	r2, #0
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	60fa      	str	r2, [r7, #12]
 8005b68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b6c:	f7fa fb6c 	bl	8000248 <__aeabi_uldivmod>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4613      	mov	r3, r2
 8005b76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	0c1b      	lsrs	r3, r3, #16
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	3301      	adds	r3, #1
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005b88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b92:	e002      	b.n	8005b9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <HAL_RCC_GetSysClockFreq+0x184>)
 8005b96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3740      	adds	r7, #64	; 0x40
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	00f42400 	.word	0x00f42400
 8005bb0:	017d7840 	.word	0x017d7840

08005bb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bb8:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bba:	681b      	ldr	r3, [r3, #0]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000000 	.word	0x20000000

08005bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005bd0:	f7ff fff0 	bl	8005bb4 <HAL_RCC_GetHCLKFreq>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	4b05      	ldr	r3, [pc, #20]	; (8005bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	0a9b      	lsrs	r3, r3, #10
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	4903      	ldr	r1, [pc, #12]	; (8005bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005be2:	5ccb      	ldrb	r3, [r1, r3]
 8005be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	08008a20 	.word	0x08008a20

08005bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005bf8:	f7ff ffdc 	bl	8005bb4 <HAL_RCC_GetHCLKFreq>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	0b5b      	lsrs	r3, r3, #13
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	4903      	ldr	r1, [pc, #12]	; (8005c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c0a:	5ccb      	ldrb	r3, [r1, r3]
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40023800 	.word	0x40023800
 8005c18:	08008a20 	.word	0x08008a20

08005c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d012      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c44:	4b69      	ldr	r3, [pc, #420]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	4a68      	ldr	r2, [pc, #416]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005c4e:	6093      	str	r3, [r2, #8]
 8005c50:	4b66      	ldr	r3, [pc, #408]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c58:	4964      	ldr	r1, [pc, #400]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005c66:	2301      	movs	r3, #1
 8005c68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d017      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c76:	4b5d      	ldr	r3, [pc, #372]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c84:	4959      	ldr	r1, [pc, #356]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c94:	d101      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005c96:	2301      	movs	r3, #1
 8005c98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d017      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005cb2:	4b4e      	ldr	r3, [pc, #312]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	494a      	ldr	r1, [pc, #296]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cd0:	d101      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 808b 	beq.w	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d00:	4b3a      	ldr	r3, [pc, #232]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	4a39      	ldr	r2, [pc, #228]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8005d0c:	4b37      	ldr	r3, [pc, #220]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d14:	60bb      	str	r3, [r7, #8]
 8005d16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d18:	4b35      	ldr	r3, [pc, #212]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a34      	ldr	r2, [pc, #208]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d24:	f7fd fbd6 	bl	80034d4 <HAL_GetTick>
 8005d28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2c:	f7fd fbd2 	bl	80034d4 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b64      	cmp	r3, #100	; 0x64
 8005d38:	d901      	bls.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e38f      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005d3e:	4b2c      	ldr	r3, [pc, #176]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d4a:	4b28      	ldr	r3, [pc, #160]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d035      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d02e      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d68:	4b20      	ldr	r3, [pc, #128]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d72:	4b1e      	ldr	r3, [pc, #120]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d76:	4a1d      	ldr	r2, [pc, #116]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d7e:	4b1b      	ldr	r3, [pc, #108]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d82:	4a1a      	ldr	r2, [pc, #104]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005d8a:	4a18      	ldr	r2, [pc, #96]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d90:	4b16      	ldr	r3, [pc, #88]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d114      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9c:	f7fd fb9a 	bl	80034d4 <HAL_GetTick>
 8005da0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da2:	e00a      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005da4:	f7fd fb96 	bl	80034d4 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d901      	bls.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e351      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0ee      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dd2:	d111      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005dd4:	4b05      	ldr	r3, [pc, #20]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005de0:	4b04      	ldr	r3, [pc, #16]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005de2:	400b      	ands	r3, r1
 8005de4:	4901      	ldr	r1, [pc, #4]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	608b      	str	r3, [r1, #8]
 8005dea:	e00b      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005dec:	40023800 	.word	0x40023800
 8005df0:	40007000 	.word	0x40007000
 8005df4:	0ffffcff 	.word	0x0ffffcff
 8005df8:	4bac      	ldr	r3, [pc, #688]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	4aab      	ldr	r2, [pc, #684]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dfe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e02:	6093      	str	r3, [r2, #8]
 8005e04:	4ba9      	ldr	r3, [pc, #676]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e10:	49a6      	ldr	r1, [pc, #664]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0310 	and.w	r3, r3, #16
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d010      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e22:	4ba2      	ldr	r3, [pc, #648]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e28:	4aa0      	ldr	r2, [pc, #640]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005e32:	4b9e      	ldr	r3, [pc, #632]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	499b      	ldr	r1, [pc, #620]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e50:	4b96      	ldr	r3, [pc, #600]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e5e:	4993      	ldr	r1, [pc, #588]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e72:	4b8e      	ldr	r3, [pc, #568]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e80:	498a      	ldr	r1, [pc, #552]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e94:	4b85      	ldr	r3, [pc, #532]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea2:	4982      	ldr	r1, [pc, #520]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005eb6:	4b7d      	ldr	r3, [pc, #500]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec4:	4979      	ldr	r1, [pc, #484]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ed8:	4b74      	ldr	r3, [pc, #464]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ede:	f023 0203 	bic.w	r2, r3, #3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee6:	4971      	ldr	r1, [pc, #452]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005efa:	4b6c      	ldr	r3, [pc, #432]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f00:	f023 020c 	bic.w	r2, r3, #12
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f08:	4968      	ldr	r1, [pc, #416]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f1c:	4b63      	ldr	r3, [pc, #396]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2a:	4960      	ldr	r1, [pc, #384]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f3e:	4b5b      	ldr	r3, [pc, #364]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4c:	4957      	ldr	r1, [pc, #348]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f60:	4b52      	ldr	r3, [pc, #328]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	494f      	ldr	r1, [pc, #316]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005f82:	4b4a      	ldr	r3, [pc, #296]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f90:	4946      	ldr	r1, [pc, #280]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005fa4:	4b41      	ldr	r3, [pc, #260]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005faa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb2:	493e      	ldr	r1, [pc, #248]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005fc6:	4b39      	ldr	r3, [pc, #228]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd4:	4935      	ldr	r1, [pc, #212]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fe8:	4b30      	ldr	r3, [pc, #192]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ff6:	492d      	ldr	r1, [pc, #180]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d011      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800600a:	4b28      	ldr	r3, [pc, #160]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800600c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006010:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006018:	4924      	ldr	r1, [pc, #144]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800601a:	4313      	orrs	r3, r2
 800601c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006024:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006028:	d101      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800602a:	2301      	movs	r3, #1
 800602c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800603a:	2301      	movs	r3, #1
 800603c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800604a:	4b18      	ldr	r3, [pc, #96]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800604c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006050:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006058:	4914      	ldr	r1, [pc, #80]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00b      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800606c:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800606e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006072:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800607c:	490b      	ldr	r1, [pc, #44]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800607e:	4313      	orrs	r3, r2
 8006080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00f      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006090:	4b06      	ldr	r3, [pc, #24]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006096:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060a0:	4902      	ldr	r1, [pc, #8]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80060a8:	e002      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80060aa:	bf00      	nop
 80060ac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060bc:	4b8a      	ldr	r3, [pc, #552]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060cc:	4986      	ldr	r1, [pc, #536]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00b      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80060e0:	4b81      	ldr	r3, [pc, #516]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f0:	497d      	ldr	r1, [pc, #500]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d006      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 80d6 	beq.w	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800610c:	4b76      	ldr	r3, [pc, #472]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a75      	ldr	r2, [pc, #468]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006112:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006118:	f7fd f9dc 	bl	80034d4 <HAL_GetTick>
 800611c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800611e:	e008      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006120:	f7fd f9d8 	bl	80034d4 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b64      	cmp	r3, #100	; 0x64
 800612c:	d901      	bls.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e195      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006132:	4b6d      	ldr	r3, [pc, #436]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f0      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d021      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	2b00      	cmp	r3, #0
 8006150:	d11d      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006152:	4b65      	ldr	r3, [pc, #404]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006158:	0c1b      	lsrs	r3, r3, #16
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006160:	4b61      	ldr	r3, [pc, #388]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006166:	0e1b      	lsrs	r3, r3, #24
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	019a      	lsls	r2, r3, #6
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	431a      	orrs	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	061b      	lsls	r3, r3, #24
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	071b      	lsls	r3, r3, #28
 8006186:	4958      	ldr	r1, [pc, #352]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006188:	4313      	orrs	r3, r2
 800618a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a2:	d00a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d02e      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061b8:	d129      	bne.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80061ba:	4b4b      	ldr	r3, [pc, #300]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c0:	0c1b      	lsrs	r3, r3, #16
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061c8:	4b47      	ldr	r3, [pc, #284]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ce:	0f1b      	lsrs	r3, r3, #28
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	019a      	lsls	r2, r3, #6
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	041b      	lsls	r3, r3, #16
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	061b      	lsls	r3, r3, #24
 80061e8:	431a      	orrs	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	071b      	lsls	r3, r3, #28
 80061ee:	493e      	ldr	r1, [pc, #248]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061f6:	4b3c      	ldr	r3, [pc, #240]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061fc:	f023 021f 	bic.w	r2, r3, #31
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	3b01      	subs	r3, #1
 8006206:	4938      	ldr	r1, [pc, #224]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d01d      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800621a:	4b33      	ldr	r3, [pc, #204]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800621c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006220:	0e1b      	lsrs	r3, r3, #24
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006228:	4b2f      	ldr	r3, [pc, #188]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800622a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800622e:	0f1b      	lsrs	r3, r3, #28
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	019a      	lsls	r2, r3, #6
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	041b      	lsls	r3, r3, #16
 8006242:	431a      	orrs	r2, r3
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	061b      	lsls	r3, r3, #24
 8006248:	431a      	orrs	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	071b      	lsls	r3, r3, #28
 800624e:	4926      	ldr	r1, [pc, #152]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d011      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	019a      	lsls	r2, r3, #6
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	041b      	lsls	r3, r3, #16
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	061b      	lsls	r3, r3, #24
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	071b      	lsls	r3, r3, #28
 800627e:	491a      	ldr	r1, [pc, #104]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006286:	4b18      	ldr	r3, [pc, #96]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a17      	ldr	r2, [pc, #92]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800628c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006292:	f7fd f91f 	bl	80034d4 <HAL_GetTick>
 8006296:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006298:	e008      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800629a:	f7fd f91b 	bl	80034d4 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b64      	cmp	r3, #100	; 0x64
 80062a6:	d901      	bls.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e0d8      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062ac:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0f0      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	f040 80ce 	bne.w	800645c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80062c0:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a08      	ldr	r2, [pc, #32]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062cc:	f7fd f902 	bl	80034d4 <HAL_GetTick>
 80062d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062d2:	e00b      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062d4:	f7fd f8fe 	bl	80034d4 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b64      	cmp	r3, #100	; 0x64
 80062e0:	d904      	bls.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e0bb      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80062e6:	bf00      	nop
 80062e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062ec:	4b5e      	ldr	r3, [pc, #376]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062f8:	d0ec      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d009      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006316:	2b00      	cmp	r3, #0
 8006318:	d02e      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d12a      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006322:	4b51      	ldr	r3, [pc, #324]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006328:	0c1b      	lsrs	r3, r3, #16
 800632a:	f003 0303 	and.w	r3, r3, #3
 800632e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006330:	4b4d      	ldr	r3, [pc, #308]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006336:	0f1b      	lsrs	r3, r3, #28
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	019a      	lsls	r2, r3, #6
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	041b      	lsls	r3, r3, #16
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	061b      	lsls	r3, r3, #24
 8006350:	431a      	orrs	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	071b      	lsls	r3, r3, #28
 8006356:	4944      	ldr	r1, [pc, #272]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800635e:	4b42      	ldr	r3, [pc, #264]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006364:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	3b01      	subs	r3, #1
 800636e:	021b      	lsls	r3, r3, #8
 8006370:	493d      	ldr	r1, [pc, #244]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d022      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800638c:	d11d      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800638e:	4b36      	ldr	r3, [pc, #216]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006394:	0e1b      	lsrs	r3, r3, #24
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800639c:	4b32      	ldr	r3, [pc, #200]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800639e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a2:	0f1b      	lsrs	r3, r3, #28
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	019a      	lsls	r2, r3, #6
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	041b      	lsls	r3, r3, #16
 80063b6:	431a      	orrs	r2, r3
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	061b      	lsls	r3, r3, #24
 80063bc:	431a      	orrs	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	071b      	lsls	r3, r3, #28
 80063c2:	4929      	ldr	r1, [pc, #164]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d028      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063d6:	4b24      	ldr	r3, [pc, #144]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063dc:	0e1b      	lsrs	r3, r3, #24
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80063e4:	4b20      	ldr	r3, [pc, #128]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ea:	0c1b      	lsrs	r3, r3, #16
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	019a      	lsls	r2, r3, #6
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	431a      	orrs	r2, r3
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	061b      	lsls	r3, r3, #24
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	071b      	lsls	r3, r3, #28
 800640a:	4917      	ldr	r1, [pc, #92]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006412:	4b15      	ldr	r3, [pc, #84]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006418:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	4911      	ldr	r1, [pc, #68]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006422:	4313      	orrs	r3, r2
 8006424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006428:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a0e      	ldr	r2, [pc, #56]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800642e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006434:	f7fd f84e 	bl	80034d4 <HAL_GetTick>
 8006438:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800643a:	e008      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800643c:	f7fd f84a 	bl	80034d4 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b64      	cmp	r3, #100	; 0x64
 8006448:	d901      	bls.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e007      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800644e:	4b06      	ldr	r3, [pc, #24]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800645a:	d1ef      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3720      	adds	r7, #32
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40023800 	.word	0x40023800

0800646c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e049      	b.n	8006512 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fc fee8 	bl	8003268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4619      	mov	r1, r3
 80064aa:	4610      	mov	r0, r2
 80064ac:	f000 f9f6 	bl	800689c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	d001      	beq.n	8006534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e054      	b.n	80065de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a26      	ldr	r2, [pc, #152]	; (80065ec <HAL_TIM_Base_Start_IT+0xd0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d022      	beq.n	800659c <HAL_TIM_Base_Start_IT+0x80>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655e:	d01d      	beq.n	800659c <HAL_TIM_Base_Start_IT+0x80>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a22      	ldr	r2, [pc, #136]	; (80065f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d018      	beq.n	800659c <HAL_TIM_Base_Start_IT+0x80>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a21      	ldr	r2, [pc, #132]	; (80065f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d013      	beq.n	800659c <HAL_TIM_Base_Start_IT+0x80>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a1f      	ldr	r2, [pc, #124]	; (80065f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00e      	beq.n	800659c <HAL_TIM_Base_Start_IT+0x80>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a1e      	ldr	r2, [pc, #120]	; (80065fc <HAL_TIM_Base_Start_IT+0xe0>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d009      	beq.n	800659c <HAL_TIM_Base_Start_IT+0x80>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1c      	ldr	r2, [pc, #112]	; (8006600 <HAL_TIM_Base_Start_IT+0xe4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d004      	beq.n	800659c <HAL_TIM_Base_Start_IT+0x80>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a1b      	ldr	r2, [pc, #108]	; (8006604 <HAL_TIM_Base_Start_IT+0xe8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d115      	bne.n	80065c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	4b19      	ldr	r3, [pc, #100]	; (8006608 <HAL_TIM_Base_Start_IT+0xec>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b06      	cmp	r3, #6
 80065ac:	d015      	beq.n	80065da <HAL_TIM_Base_Start_IT+0xbe>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b4:	d011      	beq.n	80065da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0201 	orr.w	r2, r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c6:	e008      	b.n	80065da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	e000      	b.n	80065dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40000400 	.word	0x40000400
 80065f4:	40000800 	.word	0x40000800
 80065f8:	40000c00 	.word	0x40000c00
 80065fc:	40010400 	.word	0x40010400
 8006600:	40014000 	.word	0x40014000
 8006604:	40001800 	.word	0x40001800
 8006608:	00010007 	.word	0x00010007

0800660c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b02      	cmp	r3, #2
 8006620:	d122      	bne.n	8006668 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b02      	cmp	r3, #2
 800662e:	d11b      	bne.n	8006668 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0202 	mvn.w	r2, #2
 8006638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f905 	bl	800685e <HAL_TIM_IC_CaptureCallback>
 8006654:	e005      	b.n	8006662 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f8f7 	bl	800684a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f908 	bl	8006872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	2b04      	cmp	r3, #4
 8006674:	d122      	bne.n	80066bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b04      	cmp	r3, #4
 8006682:	d11b      	bne.n	80066bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0204 	mvn.w	r2, #4
 800668c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2202      	movs	r2, #2
 8006692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8db 	bl	800685e <HAL_TIM_IC_CaptureCallback>
 80066a8:	e005      	b.n	80066b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f8cd 	bl	800684a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f8de 	bl	8006872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d122      	bne.n	8006710 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d11b      	bne.n	8006710 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f06f 0208 	mvn.w	r2, #8
 80066e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2204      	movs	r2, #4
 80066e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f8b1 	bl	800685e <HAL_TIM_IC_CaptureCallback>
 80066fc:	e005      	b.n	800670a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f8a3 	bl	800684a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f8b4 	bl	8006872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0310 	and.w	r3, r3, #16
 800671a:	2b10      	cmp	r3, #16
 800671c:	d122      	bne.n	8006764 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f003 0310 	and.w	r3, r3, #16
 8006728:	2b10      	cmp	r3, #16
 800672a:	d11b      	bne.n	8006764 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0210 	mvn.w	r2, #16
 8006734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2208      	movs	r2, #8
 800673a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f887 	bl	800685e <HAL_TIM_IC_CaptureCallback>
 8006750:	e005      	b.n	800675e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f879 	bl	800684a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f88a 	bl	8006872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b01      	cmp	r3, #1
 8006770:	d10e      	bne.n	8006790 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b01      	cmp	r3, #1
 800677e:	d107      	bne.n	8006790 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f06f 0201 	mvn.w	r2, #1
 8006788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fc fc70 	bl	8003070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679a:	2b80      	cmp	r3, #128	; 0x80
 800679c:	d10e      	bne.n	80067bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a8:	2b80      	cmp	r3, #128	; 0x80
 80067aa:	d107      	bne.n	80067bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f9a8 	bl	8006b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ca:	d10e      	bne.n	80067ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d6:	2b80      	cmp	r3, #128	; 0x80
 80067d8:	d107      	bne.n	80067ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f99b 	bl	8006b20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b40      	cmp	r3, #64	; 0x40
 80067f6:	d10e      	bne.n	8006816 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006802:	2b40      	cmp	r3, #64	; 0x40
 8006804:	d107      	bne.n	8006816 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800680e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f838 	bl	8006886 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b20      	cmp	r3, #32
 8006822:	d10e      	bne.n	8006842 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b20      	cmp	r3, #32
 8006830:	d107      	bne.n	8006842 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f06f 0220 	mvn.w	r2, #32
 800683a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f95b 	bl	8006af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
	...

0800689c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a40      	ldr	r2, [pc, #256]	; (80069b0 <TIM_Base_SetConfig+0x114>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d013      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ba:	d00f      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3d      	ldr	r2, [pc, #244]	; (80069b4 <TIM_Base_SetConfig+0x118>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d00b      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3c      	ldr	r2, [pc, #240]	; (80069b8 <TIM_Base_SetConfig+0x11c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d007      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a3b      	ldr	r2, [pc, #236]	; (80069bc <TIM_Base_SetConfig+0x120>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d003      	beq.n	80068dc <TIM_Base_SetConfig+0x40>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a3a      	ldr	r2, [pc, #232]	; (80069c0 <TIM_Base_SetConfig+0x124>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d108      	bne.n	80068ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a2f      	ldr	r2, [pc, #188]	; (80069b0 <TIM_Base_SetConfig+0x114>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d02b      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fc:	d027      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2c      	ldr	r2, [pc, #176]	; (80069b4 <TIM_Base_SetConfig+0x118>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d023      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2b      	ldr	r2, [pc, #172]	; (80069b8 <TIM_Base_SetConfig+0x11c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01f      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a2a      	ldr	r2, [pc, #168]	; (80069bc <TIM_Base_SetConfig+0x120>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d01b      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <TIM_Base_SetConfig+0x124>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d017      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a28      	ldr	r2, [pc, #160]	; (80069c4 <TIM_Base_SetConfig+0x128>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d013      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a27      	ldr	r2, [pc, #156]	; (80069c8 <TIM_Base_SetConfig+0x12c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00f      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a26      	ldr	r2, [pc, #152]	; (80069cc <TIM_Base_SetConfig+0x130>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00b      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a25      	ldr	r2, [pc, #148]	; (80069d0 <TIM_Base_SetConfig+0x134>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a24      	ldr	r2, [pc, #144]	; (80069d4 <TIM_Base_SetConfig+0x138>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a23      	ldr	r2, [pc, #140]	; (80069d8 <TIM_Base_SetConfig+0x13c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d108      	bne.n	8006960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a0a      	ldr	r2, [pc, #40]	; (80069b0 <TIM_Base_SetConfig+0x114>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_Base_SetConfig+0xf8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a0c      	ldr	r2, [pc, #48]	; (80069c0 <TIM_Base_SetConfig+0x124>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d103      	bne.n	800699c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	615a      	str	r2, [r3, #20]
}
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40010000 	.word	0x40010000
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	40010400 	.word	0x40010400
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800
 80069d0:	40001800 	.word	0x40001800
 80069d4:	40001c00 	.word	0x40001c00
 80069d8:	40002000 	.word	0x40002000

080069dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e06d      	b.n	8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a30      	ldr	r2, [pc, #192]	; (8006adc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d004      	beq.n	8006a28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a2f      	ldr	r2, [pc, #188]	; (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d108      	bne.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a20      	ldr	r2, [pc, #128]	; (8006adc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d022      	beq.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a66:	d01d      	beq.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d018      	beq.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1c      	ldr	r2, [pc, #112]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d013      	beq.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1a      	ldr	r2, [pc, #104]	; (8006aec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00e      	beq.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a15      	ldr	r2, [pc, #84]	; (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d009      	beq.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a16      	ldr	r2, [pc, #88]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d004      	beq.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d10c      	bne.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	40010000 	.word	0x40010000
 8006ae0:	40010400 	.word	0x40010400
 8006ae4:	40000400 	.word	0x40000400
 8006ae8:	40000800 	.word	0x40000800
 8006aec:	40000c00 	.word	0x40000c00
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40001800 	.word	0x40001800

08006af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e040      	b.n	8006bc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fc fbdc 	bl	8003314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2224      	movs	r2, #36	; 0x24
 8006b60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0201 	bic.w	r2, r2, #1
 8006b70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fc06 	bl	8007384 <UART_SetConfig>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d101      	bne.n	8006b82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e022      	b.n	8006bc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fe5e 	bl	800784c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fee5 	bl	8007990 <UART_CheckIdleState>
 8006bc6:	4603      	mov	r3, r0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08a      	sub	sp, #40	; 0x28
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006be4:	2b20      	cmp	r3, #32
 8006be6:	d171      	bne.n	8006ccc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <HAL_UART_Transmit+0x24>
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e06a      	b.n	8006cce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2221      	movs	r2, #33	; 0x21
 8006c04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c06:	f7fc fc65 	bl	80034d4 <HAL_GetTick>
 8006c0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	88fa      	ldrh	r2, [r7, #6]
 8006c10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	88fa      	ldrh	r2, [r7, #6]
 8006c18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c24:	d108      	bne.n	8006c38 <HAL_UART_Transmit+0x68>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d104      	bne.n	8006c38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	e003      	b.n	8006c40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c40:	e02c      	b.n	8006c9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2180      	movs	r1, #128	; 0x80
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 feec 	bl	8007a2a <UART_WaitOnFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e038      	b.n	8006cce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10b      	bne.n	8006c7a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	3302      	adds	r3, #2
 8006c76:	61bb      	str	r3, [r7, #24]
 8006c78:	e007      	b.n	8006c8a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	781a      	ldrb	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	3301      	adds	r3, #1
 8006c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	3b01      	subs	r3, #1
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1cc      	bne.n	8006c42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2140      	movs	r1, #64	; 0x40
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 feb9 	bl	8007a2a <UART_WaitOnFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e005      	b.n	8006cce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e000      	b.n	8006cce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006ccc:	2302      	movs	r3, #2
  }
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b08a      	sub	sp, #40	; 0x28
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d132      	bne.n	8006d54 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <HAL_UART_Receive_IT+0x24>
 8006cf4:	88fb      	ldrh	r3, [r7, #6]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e02b      	b.n	8006d56 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d018      	beq.n	8006d44 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	623b      	str	r3, [r7, #32]
 8006d32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	69f9      	ldr	r1, [r7, #28]
 8006d36:	6a3a      	ldr	r2, [r7, #32]
 8006d38:	e841 2300 	strex	r3, r2, [r1]
 8006d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e6      	bne.n	8006d12 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d44:	88fb      	ldrh	r3, [r7, #6]
 8006d46:	461a      	mov	r2, r3
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 ff34 	bl	8007bb8 <UART_Start_Receive_IT>
 8006d50:	4603      	mov	r3, r0
 8006d52:	e000      	b.n	8006d56 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006d54:	2302      	movs	r3, #2
  }
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3728      	adds	r7, #40	; 0x28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
	...

08006d60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b0ba      	sub	sp, #232	; 0xe8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d8e:	4013      	ands	r3, r2
 8006d90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d115      	bne.n	8006dc8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00f      	beq.n	8006dc8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d009      	beq.n	8006dc8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 82ac 	beq.w	8007316 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3
      }
      return;
 8006dc6:	e2a6      	b.n	8007316 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 8117 	beq.w	8007000 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d106      	bne.n	8006dec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006dde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006de2:	4b85      	ldr	r3, [pc, #532]	; (8006ff8 <HAL_UART_IRQHandler+0x298>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 810a 	beq.w	8007000 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d011      	beq.n	8006e1c <HAL_UART_IRQHandler+0xbc>
 8006df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e12:	f043 0201 	orr.w	r2, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d011      	beq.n	8006e4c <HAL_UART_IRQHandler+0xec>
 8006e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00b      	beq.n	8006e4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e42:	f043 0204 	orr.w	r2, r3, #4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d011      	beq.n	8006e7c <HAL_UART_IRQHandler+0x11c>
 8006e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e72:	f043 0202 	orr.w	r2, r3, #2
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d017      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d105      	bne.n	8006ea0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eae:	f043 0208 	orr.w	r2, r3, #8
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d012      	beq.n	8006eea <HAL_UART_IRQHandler+0x18a>
 8006ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00c      	beq.n	8006eea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee0:	f043 0220 	orr.w	r2, r3, #32
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8212 	beq.w	800731a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00d      	beq.n	8006f1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d007      	beq.n	8006f1e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f32:	2b40      	cmp	r3, #64	; 0x40
 8006f34:	d005      	beq.n	8006f42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d04f      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fefe 	bl	8007d44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d141      	bne.n	8006fda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1d9      	bne.n	8006f56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d013      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fae:	4a13      	ldr	r2, [pc, #76]	; (8006ffc <HAL_UART_IRQHandler+0x29c>)
 8006fb0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fd ff31 	bl	8004e1e <HAL_DMA_Abort_IT>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d017      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd0:	e00f      	b.n	8006ff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f9b6 	bl	8007344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd8:	e00b      	b.n	8006ff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f9b2 	bl	8007344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe0:	e007      	b.n	8006ff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f9ae 	bl	8007344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006ff0:	e193      	b.n	800731a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff2:	bf00      	nop
    return;
 8006ff4:	e191      	b.n	800731a <HAL_UART_IRQHandler+0x5ba>
 8006ff6:	bf00      	nop
 8006ff8:	04000120 	.word	0x04000120
 8006ffc:	08007e0d 	.word	0x08007e0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007004:	2b01      	cmp	r3, #1
 8007006:	f040 814c 	bne.w	80072a2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800700a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800700e:	f003 0310 	and.w	r3, r3, #16
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 8145 	beq.w	80072a2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800701c:	f003 0310 	and.w	r3, r3, #16
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 813e 	beq.w	80072a2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2210      	movs	r2, #16
 800702c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	f040 80b6 	bne.w	80071aa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800704a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 8165 	beq.w	800731e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800705a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800705e:	429a      	cmp	r2, r3
 8007060:	f080 815d 	bcs.w	800731e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800706a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007078:	f000 8086 	beq.w	8007188 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007090:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1da      	bne.n	800707c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3308      	adds	r3, #8
 80070cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070d8:	f023 0301 	bic.w	r3, r3, #1
 80070dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3308      	adds	r3, #8
 80070e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e1      	bne.n	80070c6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3308      	adds	r3, #8
 8007122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007126:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007128:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800712c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e3      	bne.n	8007102 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2220      	movs	r2, #32
 800713e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007158:	f023 0310 	bic.w	r3, r3, #16
 800715c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800716a:	65bb      	str	r3, [r7, #88]	; 0x58
 800716c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e4      	bne.n	8007148 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007182:	4618      	mov	r0, r3
 8007184:	f7fd fddb 	bl	8004d3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800719a:	b29b      	uxth	r3, r3
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	b29b      	uxth	r3, r3
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f8d8 	bl	8007358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071a8:	e0b9      	b.n	800731e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 80ab 	beq.w	8007322 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80071cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80a6 	beq.w	8007322 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	e853 3f00 	ldrex	r3, [r3]
 80071e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071f8:	647b      	str	r3, [r7, #68]	; 0x44
 80071fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e4      	bne.n	80071d6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3308      	adds	r3, #8
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	623b      	str	r3, [r7, #32]
   return(result);
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	f023 0301 	bic.w	r3, r3, #1
 8007222:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3308      	adds	r3, #8
 800722c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007230:	633a      	str	r2, [r7, #48]	; 0x30
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e3      	bne.n	800720c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	60fb      	str	r3, [r7, #12]
   return(result);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f023 0310 	bic.w	r3, r3, #16
 800726c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800727a:	61fb      	str	r3, [r7, #28]
 800727c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	69b9      	ldr	r1, [r7, #24]
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	617b      	str	r3, [r7, #20]
   return(result);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e4      	bne.n	8007258 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2202      	movs	r2, #2
 8007292:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f85c 	bl	8007358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072a0:	e03f      	b.n	8007322 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00e      	beq.n	80072cc <HAL_UART_IRQHandler+0x56c>
 80072ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d008      	beq.n	80072cc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80072c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f853 	bl	8007370 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072ca:	e02d      	b.n	8007328 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80072cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00e      	beq.n	80072f6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d008      	beq.n	80072f6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01c      	beq.n	8007326 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
    }
    return;
 80072f4:	e017      	b.n	8007326 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d012      	beq.n	8007328 <HAL_UART_IRQHandler+0x5c8>
 8007302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00c      	beq.n	8007328 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fd92 	bl	8007e38 <UART_EndTransmit_IT>
    return;
 8007314:	e008      	b.n	8007328 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007316:	bf00      	nop
 8007318:	e006      	b.n	8007328 <HAL_UART_IRQHandler+0x5c8>
    return;
 800731a:	bf00      	nop
 800731c:	e004      	b.n	8007328 <HAL_UART_IRQHandler+0x5c8>
      return;
 800731e:	bf00      	nop
 8007320:	e002      	b.n	8007328 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007322:	bf00      	nop
 8007324:	e000      	b.n	8007328 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007326:	bf00      	nop
  }

}
 8007328:	37e8      	adds	r7, #232	; 0xe8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop

08007330 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	431a      	orrs	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4ba6      	ldr	r3, [pc, #664]	; (8007648 <UART_SetConfig+0x2c4>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	6979      	ldr	r1, [r7, #20]
 80073b8:	430b      	orrs	r3, r1
 80073ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a94      	ldr	r2, [pc, #592]	; (800764c <UART_SetConfig+0x2c8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d120      	bne.n	8007442 <UART_SetConfig+0xbe>
 8007400:	4b93      	ldr	r3, [pc, #588]	; (8007650 <UART_SetConfig+0x2cc>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	2b03      	cmp	r3, #3
 800740c:	d816      	bhi.n	800743c <UART_SetConfig+0xb8>
 800740e:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <UART_SetConfig+0x90>)
 8007410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007414:	08007425 	.word	0x08007425
 8007418:	08007431 	.word	0x08007431
 800741c:	0800742b 	.word	0x0800742b
 8007420:	08007437 	.word	0x08007437
 8007424:	2301      	movs	r3, #1
 8007426:	77fb      	strb	r3, [r7, #31]
 8007428:	e150      	b.n	80076cc <UART_SetConfig+0x348>
 800742a:	2302      	movs	r3, #2
 800742c:	77fb      	strb	r3, [r7, #31]
 800742e:	e14d      	b.n	80076cc <UART_SetConfig+0x348>
 8007430:	2304      	movs	r3, #4
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	e14a      	b.n	80076cc <UART_SetConfig+0x348>
 8007436:	2308      	movs	r3, #8
 8007438:	77fb      	strb	r3, [r7, #31]
 800743a:	e147      	b.n	80076cc <UART_SetConfig+0x348>
 800743c:	2310      	movs	r3, #16
 800743e:	77fb      	strb	r3, [r7, #31]
 8007440:	e144      	b.n	80076cc <UART_SetConfig+0x348>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a83      	ldr	r2, [pc, #524]	; (8007654 <UART_SetConfig+0x2d0>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d132      	bne.n	80074b2 <UART_SetConfig+0x12e>
 800744c:	4b80      	ldr	r3, [pc, #512]	; (8007650 <UART_SetConfig+0x2cc>)
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007452:	f003 030c 	and.w	r3, r3, #12
 8007456:	2b0c      	cmp	r3, #12
 8007458:	d828      	bhi.n	80074ac <UART_SetConfig+0x128>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <UART_SetConfig+0xdc>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	08007495 	.word	0x08007495
 8007464:	080074ad 	.word	0x080074ad
 8007468:	080074ad 	.word	0x080074ad
 800746c:	080074ad 	.word	0x080074ad
 8007470:	080074a1 	.word	0x080074a1
 8007474:	080074ad 	.word	0x080074ad
 8007478:	080074ad 	.word	0x080074ad
 800747c:	080074ad 	.word	0x080074ad
 8007480:	0800749b 	.word	0x0800749b
 8007484:	080074ad 	.word	0x080074ad
 8007488:	080074ad 	.word	0x080074ad
 800748c:	080074ad 	.word	0x080074ad
 8007490:	080074a7 	.word	0x080074a7
 8007494:	2300      	movs	r3, #0
 8007496:	77fb      	strb	r3, [r7, #31]
 8007498:	e118      	b.n	80076cc <UART_SetConfig+0x348>
 800749a:	2302      	movs	r3, #2
 800749c:	77fb      	strb	r3, [r7, #31]
 800749e:	e115      	b.n	80076cc <UART_SetConfig+0x348>
 80074a0:	2304      	movs	r3, #4
 80074a2:	77fb      	strb	r3, [r7, #31]
 80074a4:	e112      	b.n	80076cc <UART_SetConfig+0x348>
 80074a6:	2308      	movs	r3, #8
 80074a8:	77fb      	strb	r3, [r7, #31]
 80074aa:	e10f      	b.n	80076cc <UART_SetConfig+0x348>
 80074ac:	2310      	movs	r3, #16
 80074ae:	77fb      	strb	r3, [r7, #31]
 80074b0:	e10c      	b.n	80076cc <UART_SetConfig+0x348>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a68      	ldr	r2, [pc, #416]	; (8007658 <UART_SetConfig+0x2d4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d120      	bne.n	80074fe <UART_SetConfig+0x17a>
 80074bc:	4b64      	ldr	r3, [pc, #400]	; (8007650 <UART_SetConfig+0x2cc>)
 80074be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074c6:	2b30      	cmp	r3, #48	; 0x30
 80074c8:	d013      	beq.n	80074f2 <UART_SetConfig+0x16e>
 80074ca:	2b30      	cmp	r3, #48	; 0x30
 80074cc:	d814      	bhi.n	80074f8 <UART_SetConfig+0x174>
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	d009      	beq.n	80074e6 <UART_SetConfig+0x162>
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d810      	bhi.n	80074f8 <UART_SetConfig+0x174>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <UART_SetConfig+0x15c>
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d006      	beq.n	80074ec <UART_SetConfig+0x168>
 80074de:	e00b      	b.n	80074f8 <UART_SetConfig+0x174>
 80074e0:	2300      	movs	r3, #0
 80074e2:	77fb      	strb	r3, [r7, #31]
 80074e4:	e0f2      	b.n	80076cc <UART_SetConfig+0x348>
 80074e6:	2302      	movs	r3, #2
 80074e8:	77fb      	strb	r3, [r7, #31]
 80074ea:	e0ef      	b.n	80076cc <UART_SetConfig+0x348>
 80074ec:	2304      	movs	r3, #4
 80074ee:	77fb      	strb	r3, [r7, #31]
 80074f0:	e0ec      	b.n	80076cc <UART_SetConfig+0x348>
 80074f2:	2308      	movs	r3, #8
 80074f4:	77fb      	strb	r3, [r7, #31]
 80074f6:	e0e9      	b.n	80076cc <UART_SetConfig+0x348>
 80074f8:	2310      	movs	r3, #16
 80074fa:	77fb      	strb	r3, [r7, #31]
 80074fc:	e0e6      	b.n	80076cc <UART_SetConfig+0x348>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a56      	ldr	r2, [pc, #344]	; (800765c <UART_SetConfig+0x2d8>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d120      	bne.n	800754a <UART_SetConfig+0x1c6>
 8007508:	4b51      	ldr	r3, [pc, #324]	; (8007650 <UART_SetConfig+0x2cc>)
 800750a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007512:	2bc0      	cmp	r3, #192	; 0xc0
 8007514:	d013      	beq.n	800753e <UART_SetConfig+0x1ba>
 8007516:	2bc0      	cmp	r3, #192	; 0xc0
 8007518:	d814      	bhi.n	8007544 <UART_SetConfig+0x1c0>
 800751a:	2b80      	cmp	r3, #128	; 0x80
 800751c:	d009      	beq.n	8007532 <UART_SetConfig+0x1ae>
 800751e:	2b80      	cmp	r3, #128	; 0x80
 8007520:	d810      	bhi.n	8007544 <UART_SetConfig+0x1c0>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <UART_SetConfig+0x1a8>
 8007526:	2b40      	cmp	r3, #64	; 0x40
 8007528:	d006      	beq.n	8007538 <UART_SetConfig+0x1b4>
 800752a:	e00b      	b.n	8007544 <UART_SetConfig+0x1c0>
 800752c:	2300      	movs	r3, #0
 800752e:	77fb      	strb	r3, [r7, #31]
 8007530:	e0cc      	b.n	80076cc <UART_SetConfig+0x348>
 8007532:	2302      	movs	r3, #2
 8007534:	77fb      	strb	r3, [r7, #31]
 8007536:	e0c9      	b.n	80076cc <UART_SetConfig+0x348>
 8007538:	2304      	movs	r3, #4
 800753a:	77fb      	strb	r3, [r7, #31]
 800753c:	e0c6      	b.n	80076cc <UART_SetConfig+0x348>
 800753e:	2308      	movs	r3, #8
 8007540:	77fb      	strb	r3, [r7, #31]
 8007542:	e0c3      	b.n	80076cc <UART_SetConfig+0x348>
 8007544:	2310      	movs	r3, #16
 8007546:	77fb      	strb	r3, [r7, #31]
 8007548:	e0c0      	b.n	80076cc <UART_SetConfig+0x348>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a44      	ldr	r2, [pc, #272]	; (8007660 <UART_SetConfig+0x2dc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d125      	bne.n	80075a0 <UART_SetConfig+0x21c>
 8007554:	4b3e      	ldr	r3, [pc, #248]	; (8007650 <UART_SetConfig+0x2cc>)
 8007556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800755e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007562:	d017      	beq.n	8007594 <UART_SetConfig+0x210>
 8007564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007568:	d817      	bhi.n	800759a <UART_SetConfig+0x216>
 800756a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800756e:	d00b      	beq.n	8007588 <UART_SetConfig+0x204>
 8007570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007574:	d811      	bhi.n	800759a <UART_SetConfig+0x216>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <UART_SetConfig+0x1fe>
 800757a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757e:	d006      	beq.n	800758e <UART_SetConfig+0x20a>
 8007580:	e00b      	b.n	800759a <UART_SetConfig+0x216>
 8007582:	2300      	movs	r3, #0
 8007584:	77fb      	strb	r3, [r7, #31]
 8007586:	e0a1      	b.n	80076cc <UART_SetConfig+0x348>
 8007588:	2302      	movs	r3, #2
 800758a:	77fb      	strb	r3, [r7, #31]
 800758c:	e09e      	b.n	80076cc <UART_SetConfig+0x348>
 800758e:	2304      	movs	r3, #4
 8007590:	77fb      	strb	r3, [r7, #31]
 8007592:	e09b      	b.n	80076cc <UART_SetConfig+0x348>
 8007594:	2308      	movs	r3, #8
 8007596:	77fb      	strb	r3, [r7, #31]
 8007598:	e098      	b.n	80076cc <UART_SetConfig+0x348>
 800759a:	2310      	movs	r3, #16
 800759c:	77fb      	strb	r3, [r7, #31]
 800759e:	e095      	b.n	80076cc <UART_SetConfig+0x348>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a2f      	ldr	r2, [pc, #188]	; (8007664 <UART_SetConfig+0x2e0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d125      	bne.n	80075f6 <UART_SetConfig+0x272>
 80075aa:	4b29      	ldr	r3, [pc, #164]	; (8007650 <UART_SetConfig+0x2cc>)
 80075ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075b8:	d017      	beq.n	80075ea <UART_SetConfig+0x266>
 80075ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075be:	d817      	bhi.n	80075f0 <UART_SetConfig+0x26c>
 80075c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075c4:	d00b      	beq.n	80075de <UART_SetConfig+0x25a>
 80075c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ca:	d811      	bhi.n	80075f0 <UART_SetConfig+0x26c>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <UART_SetConfig+0x254>
 80075d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d4:	d006      	beq.n	80075e4 <UART_SetConfig+0x260>
 80075d6:	e00b      	b.n	80075f0 <UART_SetConfig+0x26c>
 80075d8:	2301      	movs	r3, #1
 80075da:	77fb      	strb	r3, [r7, #31]
 80075dc:	e076      	b.n	80076cc <UART_SetConfig+0x348>
 80075de:	2302      	movs	r3, #2
 80075e0:	77fb      	strb	r3, [r7, #31]
 80075e2:	e073      	b.n	80076cc <UART_SetConfig+0x348>
 80075e4:	2304      	movs	r3, #4
 80075e6:	77fb      	strb	r3, [r7, #31]
 80075e8:	e070      	b.n	80076cc <UART_SetConfig+0x348>
 80075ea:	2308      	movs	r3, #8
 80075ec:	77fb      	strb	r3, [r7, #31]
 80075ee:	e06d      	b.n	80076cc <UART_SetConfig+0x348>
 80075f0:	2310      	movs	r3, #16
 80075f2:	77fb      	strb	r3, [r7, #31]
 80075f4:	e06a      	b.n	80076cc <UART_SetConfig+0x348>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a1b      	ldr	r2, [pc, #108]	; (8007668 <UART_SetConfig+0x2e4>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d138      	bne.n	8007672 <UART_SetConfig+0x2ee>
 8007600:	4b13      	ldr	r3, [pc, #76]	; (8007650 <UART_SetConfig+0x2cc>)
 8007602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007606:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800760a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800760e:	d017      	beq.n	8007640 <UART_SetConfig+0x2bc>
 8007610:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007614:	d82a      	bhi.n	800766c <UART_SetConfig+0x2e8>
 8007616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800761a:	d00b      	beq.n	8007634 <UART_SetConfig+0x2b0>
 800761c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007620:	d824      	bhi.n	800766c <UART_SetConfig+0x2e8>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <UART_SetConfig+0x2aa>
 8007626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762a:	d006      	beq.n	800763a <UART_SetConfig+0x2b6>
 800762c:	e01e      	b.n	800766c <UART_SetConfig+0x2e8>
 800762e:	2300      	movs	r3, #0
 8007630:	77fb      	strb	r3, [r7, #31]
 8007632:	e04b      	b.n	80076cc <UART_SetConfig+0x348>
 8007634:	2302      	movs	r3, #2
 8007636:	77fb      	strb	r3, [r7, #31]
 8007638:	e048      	b.n	80076cc <UART_SetConfig+0x348>
 800763a:	2304      	movs	r3, #4
 800763c:	77fb      	strb	r3, [r7, #31]
 800763e:	e045      	b.n	80076cc <UART_SetConfig+0x348>
 8007640:	2308      	movs	r3, #8
 8007642:	77fb      	strb	r3, [r7, #31]
 8007644:	e042      	b.n	80076cc <UART_SetConfig+0x348>
 8007646:	bf00      	nop
 8007648:	efff69f3 	.word	0xefff69f3
 800764c:	40011000 	.word	0x40011000
 8007650:	40023800 	.word	0x40023800
 8007654:	40004400 	.word	0x40004400
 8007658:	40004800 	.word	0x40004800
 800765c:	40004c00 	.word	0x40004c00
 8007660:	40005000 	.word	0x40005000
 8007664:	40011400 	.word	0x40011400
 8007668:	40007800 	.word	0x40007800
 800766c:	2310      	movs	r3, #16
 800766e:	77fb      	strb	r3, [r7, #31]
 8007670:	e02c      	b.n	80076cc <UART_SetConfig+0x348>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a72      	ldr	r2, [pc, #456]	; (8007840 <UART_SetConfig+0x4bc>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d125      	bne.n	80076c8 <UART_SetConfig+0x344>
 800767c:	4b71      	ldr	r3, [pc, #452]	; (8007844 <UART_SetConfig+0x4c0>)
 800767e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007682:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007686:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800768a:	d017      	beq.n	80076bc <UART_SetConfig+0x338>
 800768c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007690:	d817      	bhi.n	80076c2 <UART_SetConfig+0x33e>
 8007692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007696:	d00b      	beq.n	80076b0 <UART_SetConfig+0x32c>
 8007698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769c:	d811      	bhi.n	80076c2 <UART_SetConfig+0x33e>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <UART_SetConfig+0x326>
 80076a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076a6:	d006      	beq.n	80076b6 <UART_SetConfig+0x332>
 80076a8:	e00b      	b.n	80076c2 <UART_SetConfig+0x33e>
 80076aa:	2300      	movs	r3, #0
 80076ac:	77fb      	strb	r3, [r7, #31]
 80076ae:	e00d      	b.n	80076cc <UART_SetConfig+0x348>
 80076b0:	2302      	movs	r3, #2
 80076b2:	77fb      	strb	r3, [r7, #31]
 80076b4:	e00a      	b.n	80076cc <UART_SetConfig+0x348>
 80076b6:	2304      	movs	r3, #4
 80076b8:	77fb      	strb	r3, [r7, #31]
 80076ba:	e007      	b.n	80076cc <UART_SetConfig+0x348>
 80076bc:	2308      	movs	r3, #8
 80076be:	77fb      	strb	r3, [r7, #31]
 80076c0:	e004      	b.n	80076cc <UART_SetConfig+0x348>
 80076c2:	2310      	movs	r3, #16
 80076c4:	77fb      	strb	r3, [r7, #31]
 80076c6:	e001      	b.n	80076cc <UART_SetConfig+0x348>
 80076c8:	2310      	movs	r3, #16
 80076ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d4:	d15b      	bne.n	800778e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80076d6:	7ffb      	ldrb	r3, [r7, #31]
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d828      	bhi.n	800772e <UART_SetConfig+0x3aa>
 80076dc:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <UART_SetConfig+0x360>)
 80076de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e2:	bf00      	nop
 80076e4:	08007709 	.word	0x08007709
 80076e8:	08007711 	.word	0x08007711
 80076ec:	08007719 	.word	0x08007719
 80076f0:	0800772f 	.word	0x0800772f
 80076f4:	0800771f 	.word	0x0800771f
 80076f8:	0800772f 	.word	0x0800772f
 80076fc:	0800772f 	.word	0x0800772f
 8007700:	0800772f 	.word	0x0800772f
 8007704:	08007727 	.word	0x08007727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007708:	f7fe fa60 	bl	8005bcc <HAL_RCC_GetPCLK1Freq>
 800770c:	61b8      	str	r0, [r7, #24]
        break;
 800770e:	e013      	b.n	8007738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007710:	f7fe fa70 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
 8007714:	61b8      	str	r0, [r7, #24]
        break;
 8007716:	e00f      	b.n	8007738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007718:	4b4b      	ldr	r3, [pc, #300]	; (8007848 <UART_SetConfig+0x4c4>)
 800771a:	61bb      	str	r3, [r7, #24]
        break;
 800771c:	e00c      	b.n	8007738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800771e:	f7fe f983 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 8007722:	61b8      	str	r0, [r7, #24]
        break;
 8007724:	e008      	b.n	8007738 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800772a:	61bb      	str	r3, [r7, #24]
        break;
 800772c:	e004      	b.n	8007738 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	77bb      	strb	r3, [r7, #30]
        break;
 8007736:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d074      	beq.n	8007828 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	005a      	lsls	r2, r3, #1
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	085b      	lsrs	r3, r3, #1
 8007748:	441a      	add	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007752:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2b0f      	cmp	r3, #15
 8007758:	d916      	bls.n	8007788 <UART_SetConfig+0x404>
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007760:	d212      	bcs.n	8007788 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	b29b      	uxth	r3, r3
 8007766:	f023 030f 	bic.w	r3, r3, #15
 800776a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	085b      	lsrs	r3, r3, #1
 8007770:	b29b      	uxth	r3, r3
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	b29a      	uxth	r2, r3
 8007778:	89fb      	ldrh	r3, [r7, #14]
 800777a:	4313      	orrs	r3, r2
 800777c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	89fa      	ldrh	r2, [r7, #14]
 8007784:	60da      	str	r2, [r3, #12]
 8007786:	e04f      	b.n	8007828 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	77bb      	strb	r3, [r7, #30]
 800778c:	e04c      	b.n	8007828 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800778e:	7ffb      	ldrb	r3, [r7, #31]
 8007790:	2b08      	cmp	r3, #8
 8007792:	d828      	bhi.n	80077e6 <UART_SetConfig+0x462>
 8007794:	a201      	add	r2, pc, #4	; (adr r2, 800779c <UART_SetConfig+0x418>)
 8007796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779a:	bf00      	nop
 800779c:	080077c1 	.word	0x080077c1
 80077a0:	080077c9 	.word	0x080077c9
 80077a4:	080077d1 	.word	0x080077d1
 80077a8:	080077e7 	.word	0x080077e7
 80077ac:	080077d7 	.word	0x080077d7
 80077b0:	080077e7 	.word	0x080077e7
 80077b4:	080077e7 	.word	0x080077e7
 80077b8:	080077e7 	.word	0x080077e7
 80077bc:	080077df 	.word	0x080077df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077c0:	f7fe fa04 	bl	8005bcc <HAL_RCC_GetPCLK1Freq>
 80077c4:	61b8      	str	r0, [r7, #24]
        break;
 80077c6:	e013      	b.n	80077f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077c8:	f7fe fa14 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
 80077cc:	61b8      	str	r0, [r7, #24]
        break;
 80077ce:	e00f      	b.n	80077f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d0:	4b1d      	ldr	r3, [pc, #116]	; (8007848 <UART_SetConfig+0x4c4>)
 80077d2:	61bb      	str	r3, [r7, #24]
        break;
 80077d4:	e00c      	b.n	80077f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077d6:	f7fe f927 	bl	8005a28 <HAL_RCC_GetSysClockFreq>
 80077da:	61b8      	str	r0, [r7, #24]
        break;
 80077dc:	e008      	b.n	80077f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077e2:	61bb      	str	r3, [r7, #24]
        break;
 80077e4:	e004      	b.n	80077f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	77bb      	strb	r3, [r7, #30]
        break;
 80077ee:	bf00      	nop
    }

    if (pclk != 0U)
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d018      	beq.n	8007828 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	085a      	lsrs	r2, r3, #1
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	441a      	add	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	fbb2 f3f3 	udiv	r3, r2, r3
 8007808:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b0f      	cmp	r3, #15
 800780e:	d909      	bls.n	8007824 <UART_SetConfig+0x4a0>
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007816:	d205      	bcs.n	8007824 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	b29a      	uxth	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60da      	str	r2, [r3, #12]
 8007822:	e001      	b.n	8007828 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007834:	7fbb      	ldrb	r3, [r7, #30]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3720      	adds	r7, #32
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	40007c00 	.word	0x40007c00
 8007844:	40023800 	.word	0x40023800
 8007848:	00f42400 	.word	0x00f42400

0800784c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00a      	beq.n	80078ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01a      	beq.n	8007962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800794a:	d10a      	bne.n	8007962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	605a      	str	r2, [r3, #4]
  }
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af02      	add	r7, sp, #8
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079a0:	f7fb fd98 	bl	80034d4 <HAL_GetTick>
 80079a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d10e      	bne.n	80079d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f831 	bl	8007a2a <UART_WaitOnFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e027      	b.n	8007a22 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d10e      	bne.n	80079fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f81b 	bl	8007a2a <UART_WaitOnFlagUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e011      	b.n	8007a22 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b09c      	sub	sp, #112	; 0x70
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	603b      	str	r3, [r7, #0]
 8007a36:	4613      	mov	r3, r2
 8007a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a3a:	e0a7      	b.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a42:	f000 80a3 	beq.w	8007b8c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a46:	f7fb fd45 	bl	80034d4 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d302      	bcc.n	8007a5c <UART_WaitOnFlagUntilTimeout+0x32>
 8007a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d13f      	bne.n	8007adc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a70:	667b      	str	r3, [r7, #100]	; 0x64
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e6      	bne.n	8007a5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa0:	f023 0301 	bic.w	r3, r3, #1
 8007aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007aae:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ab0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e5      	bne.n	8007a8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e068      	b.n	8007bae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0304 	and.w	r3, r3, #4
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d050      	beq.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af8:	d148      	bne.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b02:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b22:	637b      	str	r3, [r7, #52]	; 0x34
 8007b24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b2a:	e841 2300 	strex	r3, r2, [r1]
 8007b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1e6      	bne.n	8007b04 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	613b      	str	r3, [r7, #16]
   return(result);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f023 0301 	bic.w	r3, r3, #1
 8007b4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3308      	adds	r3, #8
 8007b54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b56:	623a      	str	r2, [r7, #32]
 8007b58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5a:	69f9      	ldr	r1, [r7, #28]
 8007b5c:	6a3a      	ldr	r2, [r7, #32]
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1e5      	bne.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2220      	movs	r2, #32
 8007b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e010      	b.n	8007bae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	69da      	ldr	r2, [r3, #28]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	4013      	ands	r3, r2
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	bf0c      	ite	eq
 8007b9c:	2301      	moveq	r3, #1
 8007b9e:	2300      	movne	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	f43f af48 	beq.w	8007a3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3770      	adds	r7, #112	; 0x70
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b097      	sub	sp, #92	; 0x5c
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	88fa      	ldrh	r2, [r7, #6]
 8007bd0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	88fa      	ldrh	r2, [r7, #6]
 8007bd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bea:	d10e      	bne.n	8007c0a <UART_Start_Receive_IT+0x52>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d105      	bne.n	8007c00 <UART_Start_Receive_IT+0x48>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007bfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bfe:	e02d      	b.n	8007c5c <UART_Start_Receive_IT+0xa4>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	22ff      	movs	r2, #255	; 0xff
 8007c04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c08:	e028      	b.n	8007c5c <UART_Start_Receive_IT+0xa4>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10d      	bne.n	8007c2e <UART_Start_Receive_IT+0x76>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d104      	bne.n	8007c24 <UART_Start_Receive_IT+0x6c>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	22ff      	movs	r2, #255	; 0xff
 8007c1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c22:	e01b      	b.n	8007c5c <UART_Start_Receive_IT+0xa4>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	227f      	movs	r2, #127	; 0x7f
 8007c28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c2c:	e016      	b.n	8007c5c <UART_Start_Receive_IT+0xa4>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c36:	d10d      	bne.n	8007c54 <UART_Start_Receive_IT+0x9c>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d104      	bne.n	8007c4a <UART_Start_Receive_IT+0x92>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	227f      	movs	r2, #127	; 0x7f
 8007c44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c48:	e008      	b.n	8007c5c <UART_Start_Receive_IT+0xa4>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	223f      	movs	r2, #63	; 0x3f
 8007c4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c52:	e003      	b.n	8007c5c <UART_Start_Receive_IT+0xa4>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2222      	movs	r2, #34	; 0x22
 8007c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3308      	adds	r3, #8
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	f043 0301 	orr.w	r3, r3, #1
 8007c82:	657b      	str	r3, [r7, #84]	; 0x54
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3308      	adds	r3, #8
 8007c8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c8c:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e5      	bne.n	8007c6c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca8:	d107      	bne.n	8007cba <UART_Start_Receive_IT+0x102>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d103      	bne.n	8007cba <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4a21      	ldr	r2, [pc, #132]	; (8007d3c <UART_Start_Receive_IT+0x184>)
 8007cb6:	669a      	str	r2, [r3, #104]	; 0x68
 8007cb8:	e002      	b.n	8007cc0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4a20      	ldr	r2, [pc, #128]	; (8007d40 <UART_Start_Receive_IT+0x188>)
 8007cbe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d019      	beq.n	8007cfc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e6      	bne.n	8007cc8 <UART_Start_Receive_IT+0x110>
 8007cfa:	e018      	b.n	8007d2e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	613b      	str	r3, [r7, #16]
   return(result);
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f043 0320 	orr.w	r3, r3, #32
 8007d10:	653b      	str	r3, [r7, #80]	; 0x50
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d1a:	623b      	str	r3, [r7, #32]
 8007d1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1e:	69f9      	ldr	r1, [r7, #28]
 8007d20:	6a3a      	ldr	r2, [r7, #32]
 8007d22:	e841 2300 	strex	r3, r2, [r1]
 8007d26:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e6      	bne.n	8007cfc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	375c      	adds	r7, #92	; 0x5c
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	08007ff3 	.word	0x08007ff3
 8007d40:	08007e8d 	.word	0x08007e8d

08007d44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b095      	sub	sp, #84	; 0x54
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d54:	e853 3f00 	ldrex	r3, [r3]
 8007d58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d6a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e6      	bne.n	8007d4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3308      	adds	r3, #8
 8007d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	f023 0301 	bic.w	r3, r3, #1
 8007d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007da0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e5      	bne.n	8007d7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d118      	bne.n	8007dec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f023 0310 	bic.w	r3, r3, #16
 8007dce:	647b      	str	r3, [r7, #68]	; 0x44
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dd8:	61bb      	str	r3, [r7, #24]
 8007dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	6979      	ldr	r1, [r7, #20]
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	613b      	str	r3, [r7, #16]
   return(result);
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e6      	bne.n	8007dba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e00:	bf00      	nop
 8007e02:	3754      	adds	r7, #84	; 0x54
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7ff fa8a 	bl	8007344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e30:	bf00      	nop
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e54:	61fb      	str	r3, [r7, #28]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	61bb      	str	r3, [r7, #24]
 8007e60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	6979      	ldr	r1, [r7, #20]
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e6      	bne.n	8007e40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2220      	movs	r2, #32
 8007e76:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff fa56 	bl	8007330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e84:	bf00      	nop
 8007e86:	3720      	adds	r7, #32
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b096      	sub	sp, #88	; 0x58
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e9a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ea4:	2b22      	cmp	r3, #34	; 0x22
 8007ea6:	f040 8098 	bne.w	8007fda <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007eb4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007eb8:	b2d9      	uxtb	r1, r3
 8007eba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec4:	400a      	ands	r2, r1
 8007ec6:	b2d2      	uxtb	r2, r2
 8007ec8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d17b      	bne.n	8007fea <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efa:	e853 3f00 	ldrex	r3, [r3]
 8007efe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f06:	653b      	str	r3, [r7, #80]	; 0x50
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f10:	647b      	str	r3, [r7, #68]	; 0x44
 8007f12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f18:	e841 2300 	strex	r3, r2, [r1]
 8007f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1e6      	bne.n	8007ef2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3308      	adds	r3, #8
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	e853 3f00 	ldrex	r3, [r3]
 8007f32:	623b      	str	r3, [r7, #32]
   return(result);
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	f023 0301 	bic.w	r3, r3, #1
 8007f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3308      	adds	r3, #8
 8007f42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f44:	633a      	str	r2, [r7, #48]	; 0x30
 8007f46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f4c:	e841 2300 	strex	r3, r2, [r1]
 8007f50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1e5      	bne.n	8007f24 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d12e      	bne.n	8007fd2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	e853 3f00 	ldrex	r3, [r3]
 8007f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f023 0310 	bic.w	r3, r3, #16
 8007f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	461a      	mov	r2, r3
 8007f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f98:	61fb      	str	r3, [r7, #28]
 8007f9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	69b9      	ldr	r1, [r7, #24]
 8007f9e:	69fa      	ldr	r2, [r7, #28]
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e6      	bne.n	8007f7a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	f003 0310 	and.w	r3, r3, #16
 8007fb6:	2b10      	cmp	r3, #16
 8007fb8:	d103      	bne.n	8007fc2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2210      	movs	r2, #16
 8007fc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7ff f9c4 	bl	8007358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fd0:	e00b      	b.n	8007fea <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7fa ffc6 	bl	8002f64 <HAL_UART_RxCpltCallback>
}
 8007fd8:	e007      	b.n	8007fea <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	699a      	ldr	r2, [r3, #24]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f042 0208 	orr.w	r2, r2, #8
 8007fe8:	619a      	str	r2, [r3, #24]
}
 8007fea:	bf00      	nop
 8007fec:	3758      	adds	r7, #88	; 0x58
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b096      	sub	sp, #88	; 0x58
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008000:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800800a:	2b22      	cmp	r3, #34	; 0x22
 800800c:	f040 8098 	bne.w	8008140 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008016:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008020:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008024:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008028:	4013      	ands	r3, r2
 800802a:	b29a      	uxth	r2, r3
 800802c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800802e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008034:	1c9a      	adds	r2, r3, #2
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d17b      	bne.n	8008150 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008060:	e853 3f00 	ldrex	r3, [r3]
 8008064:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800806c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008076:	643b      	str	r3, [r7, #64]	; 0x40
 8008078:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800807c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e6      	bne.n	8008058 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	61fb      	str	r3, [r7, #28]
   return(result);
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	f023 0301 	bic.w	r3, r3, #1
 80080a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3308      	adds	r3, #8
 80080a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e5      	bne.n	800808a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d12e      	bne.n	8008138 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f023 0310 	bic.w	r3, r3, #16
 80080f4:	647b      	str	r3, [r7, #68]	; 0x44
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080fe:	61bb      	str	r3, [r7, #24]
 8008100:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6979      	ldr	r1, [r7, #20]
 8008104:	69ba      	ldr	r2, [r7, #24]
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	613b      	str	r3, [r7, #16]
   return(result);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e6      	bne.n	80080e0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	2b10      	cmp	r3, #16
 800811e:	d103      	bne.n	8008128 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2210      	movs	r2, #16
 8008126:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7ff f911 	bl	8007358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008136:	e00b      	b.n	8008150 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7fa ff13 	bl	8002f64 <HAL_UART_RxCpltCallback>
}
 800813e:	e007      	b.n	8008150 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	699a      	ldr	r2, [r3, #24]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0208 	orr.w	r2, r2, #8
 800814e:	619a      	str	r2, [r3, #24]
}
 8008150:	bf00      	nop
 8008152:	3758      	adds	r7, #88	; 0x58
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <__libc_init_array>:
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	4d0d      	ldr	r5, [pc, #52]	; (8008190 <__libc_init_array+0x38>)
 800815c:	4c0d      	ldr	r4, [pc, #52]	; (8008194 <__libc_init_array+0x3c>)
 800815e:	1b64      	subs	r4, r4, r5
 8008160:	10a4      	asrs	r4, r4, #2
 8008162:	2600      	movs	r6, #0
 8008164:	42a6      	cmp	r6, r4
 8008166:	d109      	bne.n	800817c <__libc_init_array+0x24>
 8008168:	4d0b      	ldr	r5, [pc, #44]	; (8008198 <__libc_init_array+0x40>)
 800816a:	4c0c      	ldr	r4, [pc, #48]	; (800819c <__libc_init_array+0x44>)
 800816c:	f000 f864 	bl	8008238 <_init>
 8008170:	1b64      	subs	r4, r4, r5
 8008172:	10a4      	asrs	r4, r4, #2
 8008174:	2600      	movs	r6, #0
 8008176:	42a6      	cmp	r6, r4
 8008178:	d105      	bne.n	8008186 <__libc_init_array+0x2e>
 800817a:	bd70      	pop	{r4, r5, r6, pc}
 800817c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008180:	4798      	blx	r3
 8008182:	3601      	adds	r6, #1
 8008184:	e7ee      	b.n	8008164 <__libc_init_array+0xc>
 8008186:	f855 3b04 	ldr.w	r3, [r5], #4
 800818a:	4798      	blx	r3
 800818c:	3601      	adds	r6, #1
 800818e:	e7f2      	b.n	8008176 <__libc_init_array+0x1e>
 8008190:	08008a58 	.word	0x08008a58
 8008194:	08008a58 	.word	0x08008a58
 8008198:	08008a58 	.word	0x08008a58
 800819c:	08008a5c 	.word	0x08008a5c

080081a0 <memset>:
 80081a0:	4402      	add	r2, r0
 80081a2:	4603      	mov	r3, r0
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d100      	bne.n	80081aa <memset+0xa>
 80081a8:	4770      	bx	lr
 80081aa:	f803 1b01 	strb.w	r1, [r3], #1
 80081ae:	e7f9      	b.n	80081a4 <memset+0x4>

080081b0 <__utoa>:
 80081b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081b2:	4c1f      	ldr	r4, [pc, #124]	; (8008230 <__utoa+0x80>)
 80081b4:	b08b      	sub	sp, #44	; 0x2c
 80081b6:	4605      	mov	r5, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	466e      	mov	r6, sp
 80081bc:	f104 0c20 	add.w	ip, r4, #32
 80081c0:	6820      	ldr	r0, [r4, #0]
 80081c2:	6861      	ldr	r1, [r4, #4]
 80081c4:	4637      	mov	r7, r6
 80081c6:	c703      	stmia	r7!, {r0, r1}
 80081c8:	3408      	adds	r4, #8
 80081ca:	4564      	cmp	r4, ip
 80081cc:	463e      	mov	r6, r7
 80081ce:	d1f7      	bne.n	80081c0 <__utoa+0x10>
 80081d0:	7921      	ldrb	r1, [r4, #4]
 80081d2:	7139      	strb	r1, [r7, #4]
 80081d4:	1e91      	subs	r1, r2, #2
 80081d6:	6820      	ldr	r0, [r4, #0]
 80081d8:	6038      	str	r0, [r7, #0]
 80081da:	2922      	cmp	r1, #34	; 0x22
 80081dc:	f04f 0100 	mov.w	r1, #0
 80081e0:	d904      	bls.n	80081ec <__utoa+0x3c>
 80081e2:	7019      	strb	r1, [r3, #0]
 80081e4:	460b      	mov	r3, r1
 80081e6:	4618      	mov	r0, r3
 80081e8:	b00b      	add	sp, #44	; 0x2c
 80081ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ec:	1e58      	subs	r0, r3, #1
 80081ee:	4684      	mov	ip, r0
 80081f0:	fbb5 f7f2 	udiv	r7, r5, r2
 80081f4:	fb02 5617 	mls	r6, r2, r7, r5
 80081f8:	3628      	adds	r6, #40	; 0x28
 80081fa:	446e      	add	r6, sp
 80081fc:	460c      	mov	r4, r1
 80081fe:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008202:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008206:	462e      	mov	r6, r5
 8008208:	42b2      	cmp	r2, r6
 800820a:	f101 0101 	add.w	r1, r1, #1
 800820e:	463d      	mov	r5, r7
 8008210:	d9ee      	bls.n	80081f0 <__utoa+0x40>
 8008212:	2200      	movs	r2, #0
 8008214:	545a      	strb	r2, [r3, r1]
 8008216:	1919      	adds	r1, r3, r4
 8008218:	1aa5      	subs	r5, r4, r2
 800821a:	42aa      	cmp	r2, r5
 800821c:	dae3      	bge.n	80081e6 <__utoa+0x36>
 800821e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008222:	780e      	ldrb	r6, [r1, #0]
 8008224:	7006      	strb	r6, [r0, #0]
 8008226:	3201      	adds	r2, #1
 8008228:	f801 5901 	strb.w	r5, [r1], #-1
 800822c:	e7f4      	b.n	8008218 <__utoa+0x68>
 800822e:	bf00      	nop
 8008230:	08008a28 	.word	0x08008a28

08008234 <utoa>:
 8008234:	f7ff bfbc 	b.w	80081b0 <__utoa>

08008238 <_init>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	bf00      	nop
 800823c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823e:	bc08      	pop	{r3}
 8008240:	469e      	mov	lr, r3
 8008242:	4770      	bx	lr

08008244 <_fini>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr
