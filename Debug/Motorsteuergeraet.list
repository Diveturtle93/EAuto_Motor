
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fec  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  080061e4  080061e4  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f4  080066f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080066f4  080066f4  000166f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066fc  080066fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000000c  08006710  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08006710  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019558  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003962  00000000  00000000  00039592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0003cef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  0003e018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c901  00000000  00000000  0003ef90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fb7  00000000  00000000  0006b891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107bae  00000000  00000000  00083848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018b3f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004454  00000000  00000000  0018b44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080061cc 	.word	0x080061cc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080061cc 	.word	0x080061cc

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data, uint8_t dlc)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	70fb      	strb	r3, [r7, #3]
	uint8_t Reg = data[0];
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	733b      	strb	r3, [r7, #12]
	uint16_t speed = 0, strom;
 8000552:	2300      	movs	r3, #0
 8000554:	817b      	strh	r3, [r7, #10]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000556:	7b3b      	ldrb	r3, [r7, #12]
 8000558:	2bd8      	cmp	r3, #216	; 0xd8
 800055a:	f000 80be 	beq.w	80006da <BAMOCAN_ID+0x19a>
 800055e:	2bd8      	cmp	r3, #216	; 0xd8
 8000560:	f300 8100 	bgt.w	8000764 <BAMOCAN_ID+0x224>
 8000564:	2ba8      	cmp	r3, #168	; 0xa8
 8000566:	d012      	beq.n	800058e <BAMOCAN_ID+0x4e>
 8000568:	2ba8      	cmp	r3, #168	; 0xa8
 800056a:	f300 80fb 	bgt.w	8000764 <BAMOCAN_ID+0x224>
 800056e:	2b8f      	cmp	r3, #143	; 0x8f
 8000570:	d077      	beq.n	8000662 <BAMOCAN_ID+0x122>
 8000572:	2b8f      	cmp	r3, #143	; 0x8f
 8000574:	f300 80f6 	bgt.w	8000764 <BAMOCAN_ID+0x224>
 8000578:	2b5f      	cmp	r3, #95	; 0x5f
 800057a:	d025      	beq.n	80005c8 <BAMOCAN_ID+0x88>
 800057c:	2b5f      	cmp	r3, #95	; 0x5f
 800057e:	f300 80f1 	bgt.w	8000764 <BAMOCAN_ID+0x224>
 8000582:	2b1b      	cmp	r3, #27
 8000584:	f000 80d4 	beq.w	8000730 <BAMOCAN_ID+0x1f0>
 8000588:	2b40      	cmp	r3, #64	; 0x40
 800058a:	d037      	beq.n	80005fc <BAMOCAN_ID+0xbc>
 800058c:	e0ea      	b.n	8000764 <BAMOCAN_ID+0x224>
	{
		// Drehzahl vom Bamocar bekommen
		case BAMOCAR_REG_N_ACT_FILTER:
			speed = ((data[2]<<8) + data[1]);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3302      	adds	r3, #2
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b29b      	uxth	r3, r3
 8000596:	021b      	lsls	r3, r3, #8
 8000598:	b29a      	uxth	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	4413      	add	r3, r2
 80005a4:	817b      	strh	r3, [r7, #10]
			motor1.Drehzahl = speed;
 80005a6:	4a74      	ldr	r2, [pc, #464]	; (8000778 <BAMOCAN_ID+0x238>)
 80005a8:	897b      	ldrh	r3, [r7, #10]
 80005aa:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motordrehzahl\n", 14);
 80005ac:	210e      	movs	r1, #14
 80005ae:	4873      	ldr	r0, [pc, #460]	; (800077c <BAMOCAN_ID+0x23c>)
 80005b0:	f000 f900 	bl	80007b4 <uartTransmit>
			uartTransmitNumber(speed, 10);
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	210a      	movs	r1, #10
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f90f 	bl	80007dc <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005be:	2101      	movs	r1, #1
 80005c0:	486f      	ldr	r0, [pc, #444]	; (8000780 <BAMOCAN_ID+0x240>)
 80005c2:	f000 f8f7 	bl	80007b4 <uartTransmit>
#endif

			break;
 80005c6:	e0d2      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Stromwert von Bamocar bekommen
		case BAMOCAR_REG_I_ACT_FILTER:
			strom = ((data[2]<<8) + data[1]);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3302      	adds	r3, #2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	021b      	lsls	r3, r3, #8
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3301      	adds	r3, #1
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	4413      	add	r3, r2
 80005de:	813b      	strh	r3, [r7, #8]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motorstrom\n", 11);
 80005e0:	210b      	movs	r1, #11
 80005e2:	4868      	ldr	r0, [pc, #416]	; (8000784 <BAMOCAN_ID+0x244>)
 80005e4:	f000 f8e6 	bl	80007b4 <uartTransmit>
			uartTransmitNumber(strom, 10);
 80005e8:	893b      	ldrh	r3, [r7, #8]
 80005ea:	210a      	movs	r1, #10
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f8f5 	bl	80007dc <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005f2:	2101      	movs	r1, #1
 80005f4:	4862      	ldr	r0, [pc, #392]	; (8000780 <BAMOCAN_ID+0x240>)
 80005f6:	f000 f8dd 	bl	80007b4 <uartTransmit>
#endif

			break;
 80005fa:	e0b8      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Statusregister von Bamocar bekommen
		case BAMOCAR_REG_STATUS:
			bamocar_stat.status1 = ((data[4] << 24) + (data[3] << 16) + (data[2] << 8) + data[1]);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3304      	adds	r3, #4
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	061a      	lsls	r2, r3, #24
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3303      	adds	r3, #3
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	041b      	lsls	r3, r3, #16
 800060c:	441a      	add	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	3302      	adds	r3, #2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	4413      	add	r3, r2
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	3201      	adds	r2, #1
 800061c:	7812      	ldrb	r2, [r2, #0]
 800061e:	4413      	add	r3, r2
 8000620:	461a      	mov	r2, r3
 8000622:	4b59      	ldr	r3, [pc, #356]	; (8000788 <BAMOCAN_ID+0x248>)
 8000624:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Status\n", 15);
 8000626:	210f      	movs	r1, #15
 8000628:	4858      	ldr	r0, [pc, #352]	; (800078c <BAMOCAN_ID+0x24c>)
 800062a:	f000 f8c3 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800062e:	2304      	movs	r3, #4
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	e00e      	b.n	8000652 <BAMOCAN_ID+0x112>
			{
				uartTransmitNumber(bamocar_stat.status[i-1], 16);
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	3b01      	subs	r3, #1
 8000638:	4a53      	ldr	r2, [pc, #332]	; (8000788 <BAMOCAN_ID+0x248>)
 800063a:	5cd3      	ldrb	r3, [r2, r3]
 800063c:	2110      	movs	r1, #16
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f8cc 	bl	80007dc <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000644:	2101      	movs	r1, #1
 8000646:	4852      	ldr	r0, [pc, #328]	; (8000790 <BAMOCAN_ID+0x250>)
 8000648:	f000 f8b4 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 4; i > 0; i--)
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	3b01      	subs	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1ed      	bne.n	8000634 <BAMOCAN_ID+0xf4>
			}
			uartTransmit("\n", 1);
 8000658:	2101      	movs	r1, #1
 800065a:	4849      	ldr	r0, [pc, #292]	; (8000780 <BAMOCAN_ID+0x240>)
 800065c:	f000 f8aa 	bl	80007b4 <uartTransmit>
#endif

			break;
 8000660:	e085      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Errorregister von Bamocar bekommen
		case BAMOCAR_REG_ERROR:
			bamocar_error.error1 = ((data[2] << 8) + data[1]);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3302      	adds	r3, #2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b29b      	uxth	r3, r3
 800066a:	021b      	lsls	r3, r3, #8
 800066c:	b29a      	uxth	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3301      	adds	r3, #1
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	4413      	add	r3, r2
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b46      	ldr	r3, [pc, #280]	; (8000794 <BAMOCAN_ID+0x254>)
 800067c:	801a      	strh	r2, [r3, #0]
			bamocar_warnung.warnung1 = ((data[4] << 8) + data[3]);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3304      	adds	r3, #4
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b29b      	uxth	r3, r3
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	b29a      	uxth	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3303      	adds	r3, #3
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	4413      	add	r3, r2
 8000694:	b29a      	uxth	r2, r3
 8000696:	4b40      	ldr	r3, [pc, #256]	; (8000798 <BAMOCAN_ID+0x258>)
 8000698:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Error\n", 14);
 800069a:	210e      	movs	r1, #14
 800069c:	483f      	ldr	r0, [pc, #252]	; (800079c <BAMOCAN_ID+0x25c>)
 800069e:	f000 f889 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	73bb      	strb	r3, [r7, #14]
 80006a6:	e010      	b.n	80006ca <BAMOCAN_ID+0x18a>
			{
				uartTransmitNumber(data[1+i], 16);
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	3301      	adds	r3, #1
 80006ac:	461a      	mov	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2110      	movs	r1, #16
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f890 	bl	80007dc <uartTransmitNumber>
				uartTransmit(" ", 1);
 80006bc:	2101      	movs	r1, #1
 80006be:	4834      	ldr	r0, [pc, #208]	; (8000790 <BAMOCAN_ID+0x250>)
 80006c0:	f000 f878 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006c4:	7bbb      	ldrb	r3, [r7, #14]
 80006c6:	3301      	adds	r3, #1
 80006c8:	73bb      	strb	r3, [r7, #14]
 80006ca:	7bbb      	ldrb	r3, [r7, #14]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d9eb      	bls.n	80006a8 <BAMOCAN_ID+0x168>
			}
			uartTransmit("\n", 1);
 80006d0:	2101      	movs	r1, #1
 80006d2:	482b      	ldr	r0, [pc, #172]	; (8000780 <BAMOCAN_ID+0x240>)
 80006d4:	f000 f86e 	bl	80007b4 <uartTransmit>
#endif

			break;
 80006d8:	e049      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Status IO Register von Bamocar bekommen
		case BAMOCAR_REG_STATUS_IO:
			bamocar_statIO.status1 = ((data[2] << 8) + data[1]);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3302      	adds	r3, #2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4413      	add	r3, r2
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <BAMOCAN_ID+0x260>)
 80006f4:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar IO Status\n", 18);
 80006f6:	2112      	movs	r1, #18
 80006f8:	482a      	ldr	r0, [pc, #168]	; (80007a4 <BAMOCAN_ID+0x264>)
 80006fa:	f000 f85b 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	737b      	strb	r3, [r7, #13]
 8000702:	e00d      	b.n	8000720 <BAMOCAN_ID+0x1e0>
			{
				uartTransmitNumber(bamocar_statIO.status[i], 16);
 8000704:	7b7b      	ldrb	r3, [r7, #13]
 8000706:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <BAMOCAN_ID+0x260>)
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	2110      	movs	r1, #16
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f865 	bl	80007dc <uartTransmitNumber>
				uartTransmit(" ", 1);
 8000712:	2101      	movs	r1, #1
 8000714:	481e      	ldr	r0, [pc, #120]	; (8000790 <BAMOCAN_ID+0x250>)
 8000716:	f000 f84d 	bl	80007b4 <uartTransmit>
			for (uint8_t i = 0; i < 2; i++)
 800071a:	7b7b      	ldrb	r3, [r7, #13]
 800071c:	3301      	adds	r3, #1
 800071e:	737b      	strb	r3, [r7, #13]
 8000720:	7b7b      	ldrb	r3, [r7, #13]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d9ee      	bls.n	8000704 <BAMOCAN_ID+0x1c4>
			}
			uartTransmit("\n", 1);
 8000726:	2101      	movs	r1, #1
 8000728:	4815      	ldr	r0, [pc, #84]	; (8000780 <BAMOCAN_ID+0x240>)
 800072a:	f000 f843 	bl	80007b4 <uartTransmit>
#endif

			break;
 800072e:	e01e      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Firmware von Bamocar ausgelesen
		case BAMOCAR_REG_FIRMWARE:
			bamocar_data.data = ((data[2]<<8) + data[1]);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3302      	adds	r3, #2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	3201      	adds	r2, #1
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	4413      	add	r3, r2
 8000740:	461a      	mov	r2, r3
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <BAMOCAN_ID+0x268>)
 8000744:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Firmware\n", 9);
 8000746:	2109      	movs	r1, #9
 8000748:	4818      	ldr	r0, [pc, #96]	; (80007ac <BAMOCAN_ID+0x26c>)
 800074a:	f000 f833 	bl	80007b4 <uartTransmit>
			uartTransmitNumber(bamocar_data.data, 16);
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <BAMOCAN_ID+0x268>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2110      	movs	r1, #16
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f841 	bl	80007dc <uartTransmitNumber>
			uartTransmit("\n", 1);
 800075a:	2101      	movs	r1, #1
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <BAMOCAN_ID+0x240>)
 800075e:	f000 f829 	bl	80007b4 <uartTransmit>
#endif

			break;
 8000762:	e004      	b.n	800076e <BAMOCAN_ID+0x22e>

		// Register fuer Bamocar nicht definiert, Fehler
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000764:	2121      	movs	r1, #33	; 0x21
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <BAMOCAN_ID+0x270>)
 8000768:	f000 f824 	bl	80007b4 <uartTransmit>
			break;
 800076c:	bf00      	nop
	}
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000044 	.word	0x20000044
 800077c:	080061e4 	.word	0x080061e4
 8000780:	080061f4 	.word	0x080061f4
 8000784:	080061f8 	.word	0x080061f8
 8000788:	2000004c 	.word	0x2000004c
 800078c:	08006204 	.word	0x08006204
 8000790:	08006214 	.word	0x08006214
 8000794:	2000003c 	.word	0x2000003c
 8000798:	20000038 	.word	0x20000038
 800079c:	08006218 	.word	0x08006218
 80007a0:	20000034 	.word	0x20000034
 80007a4:	08006228 	.word	0x08006228
 80007a8:	20000040 	.word	0x20000040
 80007ac:	0800623c 	.word	0x0800623c
 80007b0:	08006248 	.word	0x08006248

080007b4 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <uartTransmit+0x24>)
 80007ca:	f005 f831 	bl	8005830 <HAL_UART_Transmit>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000174 	.word	0x20000174

080007dc <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f005 fcea 	bl	80061c8 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fd1d 	bl	8000238 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	b29a      	uxth	r2, r3
 8000802:	f107 010c 	add.w	r1, r7, #12
 8000806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <uartTransmitNumber+0x3c>)
 800080c:	f005 f810 	bl	8005830 <HAL_UART_Transmit>
}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000174 	.word	0x20000174

0800081c <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000820:	2112      	movs	r1, #18
 8000822:	4822      	ldr	r0, [pc, #136]	; (80008ac <collectMiddlewareInfo+0x90>)
 8000824:	f7ff ffc6 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000828:	210a      	movs	r1, #10
 800082a:	2005      	movs	r0, #5
 800082c:	f7ff ffd6 	bl	80007dc <uartTransmitNumber>
	uartTransmit(".", 1);
 8000830:	2101      	movs	r1, #1
 8000832:	481f      	ldr	r0, [pc, #124]	; (80008b0 <collectMiddlewareInfo+0x94>)
 8000834:	f7ff ffbe 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000838:	210a      	movs	r1, #10
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff ffce 	bl	80007dc <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000840:	2110      	movs	r1, #16
 8000842:	481c      	ldr	r0, [pc, #112]	; (80008b4 <collectMiddlewareInfo+0x98>)
 8000844:	f7ff ffb6 	bl	80007b4 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000848:	f001 fd84 	bl	8002354 <HAL_GetHalVersion>
 800084c:	4603      	mov	r3, r0
 800084e:	0e1b      	lsrs	r3, r3, #24
 8000850:	b2db      	uxtb	r3, r3
 8000852:	210a      	movs	r1, #10
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ffc1 	bl	80007dc <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800085a:	2101      	movs	r1, #1
 800085c:	4814      	ldr	r0, [pc, #80]	; (80008b0 <collectMiddlewareInfo+0x94>)
 800085e:	f7ff ffa9 	bl	80007b4 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000862:	f001 fd77 	bl	8002354 <HAL_GetHalVersion>
 8000866:	4603      	mov	r3, r0
 8000868:	0c1b      	lsrs	r3, r3, #16
 800086a:	b2db      	uxtb	r3, r3
 800086c:	210a      	movs	r1, #10
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ffb4 	bl	80007dc <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000874:	2101      	movs	r1, #1
 8000876:	480e      	ldr	r0, [pc, #56]	; (80008b0 <collectMiddlewareInfo+0x94>)
 8000878:	f7ff ff9c 	bl	80007b4 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 800087c:	f001 fd6a 	bl	8002354 <HAL_GetHalVersion>
 8000880:	4603      	mov	r3, r0
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	b2db      	uxtb	r3, r3
 8000886:	210a      	movs	r1, #10
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ffa7 	bl	80007dc <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800088e:	2101      	movs	r1, #1
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <collectMiddlewareInfo+0x94>)
 8000892:	f7ff ff8f 	bl	80007b4 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000896:	f001 fd5d 	bl	8002354 <HAL_GetHalVersion>
 800089a:	4603      	mov	r3, r0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	210a      	movs	r1, #10
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff9b 	bl	80007dc <uartTransmitNumber>
	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);
#endif
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	080062c4 	.word	0x080062c4
 80008b0:	080062d8 	.word	0x080062d8
 80008b4:	080062dc 	.word	0x080062dc

080008b8 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 80008bc:	2110      	movs	r1, #16
 80008be:	4816      	ldr	r0, [pc, #88]	; (8000918 <collectSoftwareInfo+0x60>)
 80008c0:	f7ff ff78 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 80008c4:	2108      	movs	r1, #8
 80008c6:	4815      	ldr	r0, [pc, #84]	; (800091c <collectSoftwareInfo+0x64>)
 80008c8:	f7ff ff74 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 80008cc:	210f      	movs	r1, #15
 80008ce:	4814      	ldr	r0, [pc, #80]	; (8000920 <collectSoftwareInfo+0x68>)
 80008d0:	f7ff ff70 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 80008d4:	210c      	movs	r1, #12
 80008d6:	4813      	ldr	r0, [pc, #76]	; (8000924 <collectSoftwareInfo+0x6c>)
 80008d8:	f7ff ff6c 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 80008dc:	210d      	movs	r1, #13
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <collectSoftwareInfo+0x70>)
 80008e0:	f7ff ff68 	bl	80007b4 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80008e4:	2129      	movs	r1, #41	; 0x29
 80008e6:	4811      	ldr	r0, [pc, #68]	; (800092c <collectSoftwareInfo+0x74>)
 80008e8:	f7ff ff64 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80008ec:	210f      	movs	r1, #15
 80008ee:	4810      	ldr	r0, [pc, #64]	; (8000930 <collectSoftwareInfo+0x78>)
 80008f0:	f7ff ff60 	bl	80007b4 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80008f4:	210c      	movs	r1, #12
 80008f6:	480f      	ldr	r0, [pc, #60]	; (8000934 <collectSoftwareInfo+0x7c>)
 80008f8:	f7ff ff5c 	bl	80007b4 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80008fc:	210f      	movs	r1, #15
 80008fe:	480e      	ldr	r0, [pc, #56]	; (8000938 <collectSoftwareInfo+0x80>)
 8000900:	f7ff ff58 	bl	80007b4 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000904:	2109      	movs	r1, #9
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <collectSoftwareInfo+0x84>)
 8000908:	f7ff ff54 	bl	80007b4 <uartTransmit>

	uartTransmit("\n", 1);
 800090c:	2101      	movs	r1, #1
 800090e:	480c      	ldr	r0, [pc, #48]	; (8000940 <collectSoftwareInfo+0x88>)
 8000910:	f7ff ff50 	bl	80007b4 <uartTransmit>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	080062ec 	.word	0x080062ec
 800091c:	080062fc 	.word	0x080062fc
 8000920:	08006304 	.word	0x08006304
 8000924:	08006314 	.word	0x08006314
 8000928:	08006320 	.word	0x08006320
 800092c:	08006330 	.word	0x08006330
 8000930:	0800635c 	.word	0x0800635c
 8000934:	0800636c 	.word	0x0800636c
 8000938:	08006378 	.word	0x08006378
 800093c:	08006388 	.word	0x08006388
 8000940:	08006394 	.word	0x08006394

08000944 <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800094a:	2113      	movs	r1, #19
 800094c:	483b      	ldr	r0, [pc, #236]	; (8000a3c <collectHardwareInfo+0xf8>)
 800094e:	f7ff ff31 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000952:	f001 fd15 	bl	8002380 <HAL_GetDEVID>
 8000956:	4603      	mov	r3, r0
 8000958:	210a      	movs	r1, #10
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff3e 	bl	80007dc <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000960:	2115      	movs	r1, #21
 8000962:	4837      	ldr	r0, [pc, #220]	; (8000a40 <collectHardwareInfo+0xfc>)
 8000964:	f7ff ff26 	bl	80007b4 <uartTransmit>
	
	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000968:	f001 fcfe 	bl	8002368 <HAL_GetREVID>
 800096c:	4603      	mov	r3, r0
 800096e:	f242 0201 	movw	r2, #8193	; 0x2001
 8000972:	4293      	cmp	r3, r2
 8000974:	d016      	beq.n	80009a4 <collectHardwareInfo+0x60>
 8000976:	f242 0201 	movw	r2, #8193	; 0x2001
 800097a:	4293      	cmp	r3, r2
 800097c:	d817      	bhi.n	80009ae <collectHardwareInfo+0x6a>
 800097e:	f241 0201 	movw	r2, #4097	; 0x1001
 8000982:	4293      	cmp	r3, r2
 8000984:	d004      	beq.n	8000990 <collectHardwareInfo+0x4c>
 8000986:	f241 0203 	movw	r2, #4099	; 0x1003
 800098a:	4293      	cmp	r3, r2
 800098c:	d005      	beq.n	800099a <collectHardwareInfo+0x56>
 800098e:	e00e      	b.n	80009ae <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000990:	2101      	movs	r1, #1
 8000992:	482c      	ldr	r0, [pc, #176]	; (8000a44 <collectHardwareInfo+0x100>)
 8000994:	f7ff ff0e 	bl	80007b4 <uartTransmit>
			break;
 8000998:	e011      	b.n	80009be <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 800099a:	2101      	movs	r1, #1
 800099c:	482a      	ldr	r0, [pc, #168]	; (8000a48 <collectHardwareInfo+0x104>)
 800099e:	f7ff ff09 	bl	80007b4 <uartTransmit>
			break;
 80009a2:	e00c      	b.n	80009be <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 80009a4:	2101      	movs	r1, #1
 80009a6:	4829      	ldr	r0, [pc, #164]	; (8000a4c <collectHardwareInfo+0x108>)
 80009a8:	f7ff ff04 	bl	80007b4 <uartTransmit>
			break;
 80009ac:	e007      	b.n	80009be <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 80009ae:	f001 fcdb 	bl	8002368 <HAL_GetREVID>
 80009b2:	4603      	mov	r3, r0
 80009b4:	210a      	movs	r1, #10
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff10 	bl	80007dc <uartTransmitNumber>
			break;
 80009bc:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80009be:	2113      	movs	r1, #19
 80009c0:	4823      	ldr	r0, [pc, #140]	; (8000a50 <collectHardwareInfo+0x10c>)
 80009c2:	f7ff fef7 	bl	80007b4 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80009c6:	f003 fe77 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 80009ca:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <collectHardwareInfo+0x110>)
 80009d0:	fba2 2303 	umull	r2, r3, r2, r3
 80009d4:	0c9b      	lsrs	r3, r3, #18
 80009d6:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80009d8:	210a      	movs	r1, #10
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fefe 	bl	80007dc <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80009e0:	2104      	movs	r1, #4
 80009e2:	481d      	ldr	r0, [pc, #116]	; (8000a58 <collectHardwareInfo+0x114>)
 80009e4:	f7ff fee6 	bl	80007b4 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80009e8:	210f      	movs	r1, #15
 80009ea:	481c      	ldr	r0, [pc, #112]	; (8000a5c <collectHardwareInfo+0x118>)
 80009ec:	f7ff fee2 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80009f0:	f001 fcd4 	bl	800239c <HAL_GetUIDw0>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2110      	movs	r1, #16
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff feef 	bl	80007dc <uartTransmitNumber>

	uartTransmit(" ", 1);
 80009fe:	2101      	movs	r1, #1
 8000a00:	4817      	ldr	r0, [pc, #92]	; (8000a60 <collectHardwareInfo+0x11c>)
 8000a02:	f7ff fed7 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000a06:	f001 fcd5 	bl	80023b4 <HAL_GetUIDw1>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2110      	movs	r1, #16
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fee4 	bl	80007dc <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000a14:	2101      	movs	r1, #1
 8000a16:	4812      	ldr	r0, [pc, #72]	; (8000a60 <collectHardwareInfo+0x11c>)
 8000a18:	f7ff fecc 	bl	80007b4 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000a1c:	f001 fcd6 	bl	80023cc <HAL_GetUIDw2>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2110      	movs	r1, #16
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fed9 	bl	80007dc <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <collectHardwareInfo+0x120>)
 8000a2e:	f7ff fec1 	bl	80007b4 <uartTransmit>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	08006398 	.word	0x08006398
 8000a40:	080063ac 	.word	0x080063ac
 8000a44:	080063c4 	.word	0x080063c4
 8000a48:	080063c8 	.word	0x080063c8
 8000a4c:	080063cc 	.word	0x080063cc
 8000a50:	080063d0 	.word	0x080063d0
 8000a54:	431bde83 	.word	0x431bde83
 8000a58:	080063e4 	.word	0x080063e4
 8000a5c:	080063ec 	.word	0x080063ec
 8000a60:	080063fc 	.word	0x080063fc
 8000a64:	08006394 	.word	0x08006394

08000a68 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000a6c:	2111      	movs	r1, #17
 8000a6e:	480b      	ldr	r0, [pc, #44]	; (8000a9c <collectSystemInfo+0x34>)
 8000a70:	f7ff fea0 	bl	80007b4 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000a74:	f7ff ff66 	bl	8000944 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000a78:	2111      	movs	r1, #17
 8000a7a:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <collectSystemInfo+0x38>)
 8000a7c:	f7ff fe9a 	bl	80007b4 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000a80:	f7ff ff1a 	bl	80008b8 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000a84:	2113      	movs	r1, #19
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <collectSystemInfo+0x3c>)
 8000a88:	f7ff fe94 	bl	80007b4 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000a8c:	f7ff fec6 	bl	800081c <collectMiddlewareInfo>

	uartTransmit("\n\n\n", 3);
 8000a90:	2103      	movs	r1, #3
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <collectSystemInfo+0x40>)
 8000a94:	f7ff fe8e 	bl	80007b4 <uartTransmit>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	08006400 	.word	0x08006400
 8000aa0:	08006414 	.word	0x08006414
 8000aa4:	08006428 	.word	0x08006428
 8000aa8:	0800643c 	.word	0x0800643c

08000aac <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000ab6:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <readResetSource+0xa0>)
 8000ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d002      	beq.n	8000ac8 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <readResetSource+0xa0>)
 8000aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000acc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <readResetSource+0xa0>)
 8000adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	da02      	bge.n	8000ae8 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <readResetSource+0xa0>)
 8000aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	3308      	adds	r3, #8
 8000af8:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <readResetSource+0xa0>)
 8000afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	3310      	adds	r3, #16
 8000b0a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <readResetSource+0xa0>)
 8000b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d002      	beq.n	8000b1e <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	3320      	adds	r3, #32
 8000b1c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <readResetSource+0xa0>)
 8000b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	3340      	adds	r3, #64	; 0x40
 8000b2e:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <readResetSource+0xa0>)
 8000b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b34:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <readResetSource+0xa0>)
 8000b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b3a:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000b5a:	2106      	movs	r1, #6
 8000b5c:	482a      	ldr	r0, [pc, #168]	; (8000c08 <printResetSource+0xb8>)
 8000b5e:	f7ff fe29 	bl	80007b4 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d104      	bne.n	8000b72 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000b68:	210f      	movs	r1, #15
 8000b6a:	4828      	ldr	r0, [pc, #160]	; (8000c0c <printResetSource+0xbc>)
 8000b6c:	f7ff fe22 	bl	80007b4 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000b70:	e046      	b.n	8000c00 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000b7c:	2118      	movs	r1, #24
 8000b7e:	4824      	ldr	r0, [pc, #144]	; (8000c10 <printResetSource+0xc0>)
 8000b80:	f7ff fe18 	bl	80007b4 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000b8e:	2116      	movs	r1, #22
 8000b90:	4820      	ldr	r0, [pc, #128]	; (8000c14 <printResetSource+0xc4>)
 8000b92:	f7ff fe0f 	bl	80007b4 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000ba0:	210a      	movs	r1, #10
 8000ba2:	481d      	ldr	r0, [pc, #116]	; (8000c18 <printResetSource+0xc8>)
 8000ba4:	f7ff fe06 	bl	80007b4 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	4819      	ldr	r0, [pc, #100]	; (8000c1c <printResetSource+0xcc>)
 8000bb6:	f7ff fdfd 	bl	80007b4 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 0310 	and.w	r3, r3, #16
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	4816      	ldr	r0, [pc, #88]	; (8000c20 <printResetSource+0xd0>)
 8000bc8:	f7ff fdf4 	bl	80007b4 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 0320 	and.w	r3, r3, #32
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	4812      	ldr	r0, [pc, #72]	; (8000c24 <printResetSource+0xd4>)
 8000bda:	f7ff fdeb 	bl	80007b4 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000be8:	210a      	movs	r1, #10
 8000bea:	480f      	ldr	r0, [pc, #60]	; (8000c28 <printResetSource+0xd8>)
 8000bec:	f7ff fde2 	bl	80007b4 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	da03      	bge.n	8000c00 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000bf8:	2105      	movs	r1, #5
 8000bfa:	480c      	ldr	r0, [pc, #48]	; (8000c2c <printResetSource+0xdc>)
 8000bfc:	f7ff fdda 	bl	80007b4 <uartTransmit>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08006440 	.word	0x08006440
 8000c0c:	08006448 	.word	0x08006448
 8000c10:	08006458 	.word	0x08006458
 8000c14:	08006474 	.word	0x08006474
 8000c18:	0800648c 	.word	0x0800648c
 8000c1c:	08006498 	.word	0x08006498
 8000c20:	080064ac 	.word	0x080064ac
 8000c24:	080064bc 	.word	0x080064bc
 8000c28:	080064cc 	.word	0x080064cc
 8000c2c:	080064d8 	.word	0x080064d8

08000c30 <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;
 8000c46:	2306      	movs	r3, #6
 8000c48:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <ADC_Gaspedal+0x60>)
 8000c58:	f001 fda2 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <ADC_Gaspedal+0x36>
	{
		Error_Handler();
 8000c62:	f001 f967 	bl	8001f34 <Error_Handler>
	}

	// ADC Starten und Wert einlesen
	HAL_ADC_Start(&hadc1);
 8000c66:	480a      	ldr	r0, [pc, #40]	; (8000c90 <ADC_Gaspedal+0x60>)
 8000c68:	f001 fc00 	bl	800246c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000c6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <ADC_Gaspedal+0x60>)
 8000c72:	f001 fcfd 	bl	8002670 <HAL_ADC_PollForConversion>
	ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000c76:	4806      	ldr	r0, [pc, #24]	; (8000c90 <ADC_Gaspedal+0x60>)
 8000c78:	f001 fd85 	bl	8002786 <HAL_ADC_GetValue>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <ADC_Gaspedal+0x60>)
 8000c82:	f001 fcc1 	bl	8002608 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000c86:	8afb      	ldrh	r3, [r7, #22]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	2000006c 	.word	0x2000006c

08000c94 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d104      	bne.n	8000cae <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000ca4:	2107      	movs	r1, #7
 8000ca6:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <hal_error+0x50>)
 8000ca8:	f7ff fd84 	bl	80007b4 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000cac:	e016      	b.n	8000cdc <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d104      	bne.n	8000cbe <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000cb4:	210a      	movs	r1, #10
 8000cb6:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <hal_error+0x54>)
 8000cb8:	f7ff fd7c 	bl	80007b4 <uartTransmit>
}
 8000cbc:	e00e      	b.n	8000cdc <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d104      	bne.n	8000cce <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000cc4:	2109      	movs	r1, #9
 8000cc6:	4809      	ldr	r0, [pc, #36]	; (8000cec <hal_error+0x58>)
 8000cc8:	f7ff fd74 	bl	80007b4 <uartTransmit>
}
 8000ccc:	e006      	b.n	8000cdc <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d103      	bne.n	8000cdc <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000cd4:	210c      	movs	r1, #12
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <hal_error+0x5c>)
 8000cd8:	f7ff fd6c 	bl	80007b4 <uartTransmit>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	080064e0 	.word	0x080064e0
 8000ce8:	080064e8 	.word	0x080064e8
 8000cec:	080064f4 	.word	0x080064f4
 8000cf0:	08006500 	.word	0x08006500

08000cf4 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8000cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfc:	48ce      	ldr	r0, [pc, #824]	; (8001038 <readall_inputs+0x344>)
 8000cfe:	f003 f8bf 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	b2d9      	uxtb	r1, r3
 8000d0a:	4acc      	ldr	r2, [pc, #816]	; (800103c <readall_inputs+0x348>)
 8000d0c:	7813      	ldrb	r3, [r2, #0]
 8000d0e:	f361 0300 	bfi	r3, r1, #0, #1
 8000d12:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 8000d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d18:	48c7      	ldr	r0, [pc, #796]	; (8001038 <readall_inputs+0x344>)
 8000d1a:	f003 f8b1 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	b2d9      	uxtb	r1, r3
 8000d26:	4ac5      	ldr	r2, [pc, #788]	; (800103c <readall_inputs+0x348>)
 8000d28:	7813      	ldrb	r3, [r2, #0]
 8000d2a:	f361 0341 	bfi	r3, r1, #1, #1
 8000d2e:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 8000d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d34:	48c0      	ldr	r0, [pc, #768]	; (8001038 <readall_inputs+0x344>)
 8000d36:	f003 f8a3 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	b2d9      	uxtb	r1, r3
 8000d42:	4abe      	ldr	r2, [pc, #760]	; (800103c <readall_inputs+0x348>)
 8000d44:	7813      	ldrb	r3, [r2, #0]
 8000d46:	f361 0382 	bfi	r3, r1, #2, #1
 8000d4a:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 8000d4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d50:	48b9      	ldr	r0, [pc, #740]	; (8001038 <readall_inputs+0x344>)
 8000d52:	f003 f895 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	b2d9      	uxtb	r1, r3
 8000d5e:	4ab7      	ldr	r2, [pc, #732]	; (800103c <readall_inputs+0x348>)
 8000d60:	7813      	ldrb	r3, [r2, #0]
 8000d62:	f361 03c3 	bfi	r3, r1, #3, #1
 8000d66:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 8000d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6c:	48b2      	ldr	r0, [pc, #712]	; (8001038 <readall_inputs+0x344>)
 8000d6e:	f003 f887 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	b2d9      	uxtb	r1, r3
 8000d7a:	4ab0      	ldr	r2, [pc, #704]	; (800103c <readall_inputs+0x348>)
 8000d7c:	7813      	ldrb	r3, [r2, #0]
 8000d7e:	f361 1304 	bfi	r3, r1, #4, #1
 8000d82:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 8000d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d88:	48ad      	ldr	r0, [pc, #692]	; (8001040 <readall_inputs+0x34c>)
 8000d8a:	f003 f879 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	b2d9      	uxtb	r1, r3
 8000d96:	4aa9      	ldr	r2, [pc, #676]	; (800103c <readall_inputs+0x348>)
 8000d98:	7813      	ldrb	r3, [r2, #0]
 8000d9a:	f361 1345 	bfi	r3, r1, #5, #1
 8000d9e:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 8000da0:	2102      	movs	r1, #2
 8000da2:	48a7      	ldr	r0, [pc, #668]	; (8001040 <readall_inputs+0x34c>)
 8000da4:	f003 f86c 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	b2d9      	uxtb	r1, r3
 8000db0:	4aa2      	ldr	r2, [pc, #648]	; (800103c <readall_inputs+0x348>)
 8000db2:	7813      	ldrb	r3, [r2, #0]
 8000db4:	f361 1386 	bfi	r3, r1, #6, #1
 8000db8:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 8000dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dbe:	48a1      	ldr	r0, [pc, #644]	; (8001044 <readall_inputs+0x350>)
 8000dc0:	f003 f85e 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	b2d9      	uxtb	r1, r3
 8000dcc:	4a9b      	ldr	r2, [pc, #620]	; (800103c <readall_inputs+0x348>)
 8000dce:	7813      	ldrb	r3, [r2, #0]
 8000dd0:	f361 13c7 	bfi	r3, r1, #7, #1
 8000dd4:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dda:	489b      	ldr	r0, [pc, #620]	; (8001048 <readall_inputs+0x354>)
 8000ddc:	f003 f850 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	b2d9      	uxtb	r1, r3
 8000de8:	4a94      	ldr	r2, [pc, #592]	; (800103c <readall_inputs+0x348>)
 8000dea:	7853      	ldrb	r3, [r2, #1]
 8000dec:	f361 0300 	bfi	r3, r1, #0, #1
 8000df0:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 8000df2:	2101      	movs	r1, #1
 8000df4:	4895      	ldr	r0, [pc, #596]	; (800104c <readall_inputs+0x358>)
 8000df6:	f003 f843 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	b2d9      	uxtb	r1, r3
 8000e02:	4a8e      	ldr	r2, [pc, #568]	; (800103c <readall_inputs+0x348>)
 8000e04:	7853      	ldrb	r3, [r2, #1]
 8000e06:	f361 0341 	bfi	r3, r1, #1, #1
 8000e0a:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	488c      	ldr	r0, [pc, #560]	; (8001040 <readall_inputs+0x34c>)
 8000e10:	f003 f836 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	b2d9      	uxtb	r1, r3
 8000e1c:	4a87      	ldr	r2, [pc, #540]	; (800103c <readall_inputs+0x348>)
 8000e1e:	7853      	ldrb	r3, [r2, #1]
 8000e20:	f361 0382 	bfi	r3, r1, #2, #1
 8000e24:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000e26:	2140      	movs	r1, #64	; 0x40
 8000e28:	4883      	ldr	r0, [pc, #524]	; (8001038 <readall_inputs+0x344>)
 8000e2a:	f003 f829 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	b2d9      	uxtb	r1, r3
 8000e36:	4a81      	ldr	r2, [pc, #516]	; (800103c <readall_inputs+0x348>)
 8000e38:	7853      	ldrb	r3, [r2, #1]
 8000e3a:	f361 03c3 	bfi	r3, r1, #3, #1
 8000e3e:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000e40:	2101      	movs	r1, #1
 8000e42:	4883      	ldr	r0, [pc, #524]	; (8001050 <readall_inputs+0x35c>)
 8000e44:	f003 f81c 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	b2d9      	uxtb	r1, r3
 8000e50:	4a7a      	ldr	r2, [pc, #488]	; (800103c <readall_inputs+0x348>)
 8000e52:	7853      	ldrb	r3, [r2, #1]
 8000e54:	f361 1304 	bfi	r3, r1, #4, #1
 8000e58:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	487c      	ldr	r0, [pc, #496]	; (8001050 <readall_inputs+0x35c>)
 8000e5e:	f003 f80f 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	b2d9      	uxtb	r1, r3
 8000e6a:	4a74      	ldr	r2, [pc, #464]	; (800103c <readall_inputs+0x348>)
 8000e6c:	7853      	ldrb	r3, [r2, #1]
 8000e6e:	f361 1345 	bfi	r3, r1, #5, #1
 8000e72:	7053      	strb	r3, [r2, #1]
//	system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);		// Bremsdruck nicht zu hoch
//	system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);		// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 8000e74:	2102      	movs	r1, #2
 8000e76:	4876      	ldr	r0, [pc, #472]	; (8001050 <readall_inputs+0x35c>)
 8000e78:	f003 f802 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	b2d9      	uxtb	r1, r3
 8000e84:	4a73      	ldr	r2, [pc, #460]	; (8001054 <readall_inputs+0x360>)
 8000e86:	7813      	ldrb	r3, [r2, #0]
 8000e88:	f361 0300 	bfi	r3, r1, #0, #1
 8000e8c:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 8000e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e92:	4869      	ldr	r0, [pc, #420]	; (8001038 <readall_inputs+0x344>)
 8000e94:	f002 fff4 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	b2d9      	uxtb	r1, r3
 8000ea0:	4a6c      	ldr	r2, [pc, #432]	; (8001054 <readall_inputs+0x360>)
 8000ea2:	7813      	ldrb	r3, [r2, #0]
 8000ea4:	f361 0341 	bfi	r3, r1, #1, #1
 8000ea8:	7013      	strb	r3, [r2, #0]
	sdc_in.AkkuSDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 8000eaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eae:	4862      	ldr	r0, [pc, #392]	; (8001038 <readall_inputs+0x344>)
 8000eb0:	f002 ffe6 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	b2d9      	uxtb	r1, r3
 8000ebc:	4a65      	ldr	r2, [pc, #404]	; (8001054 <readall_inputs+0x360>)
 8000ebe:	7813      	ldrb	r3, [r2, #0]
 8000ec0:	f361 0382 	bfi	r3, r1, #2, #1
 8000ec4:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000ec6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eca:	485e      	ldr	r0, [pc, #376]	; (8001044 <readall_inputs+0x350>)
 8000ecc:	f002 ffd8 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	b2d9      	uxtb	r1, r3
 8000ed8:	4a5e      	ldr	r2, [pc, #376]	; (8001054 <readall_inputs+0x360>)
 8000eda:	7813      	ldrb	r3, [r2, #0]
 8000edc:	f361 03c3 	bfi	r3, r1, #3, #1
 8000ee0:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4859      	ldr	r0, [pc, #356]	; (800104c <readall_inputs+0x358>)
 8000ee6:	f002 ffcb 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	b2d9      	uxtb	r1, r3
 8000ef2:	4a58      	ldr	r2, [pc, #352]	; (8001054 <readall_inputs+0x360>)
 8000ef4:	7813      	ldrb	r3, [r2, #0]
 8000ef6:	f361 1304 	bfi	r3, r1, #4, #1
 8000efa:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 8000efc:	2110      	movs	r1, #16
 8000efe:	4853      	ldr	r0, [pc, #332]	; (800104c <readall_inputs+0x358>)
 8000f00:	f002 ffbe 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	b2d9      	uxtb	r1, r3
 8000f0c:	4a52      	ldr	r2, [pc, #328]	; (8001058 <readall_inputs+0x364>)
 8000f0e:	7813      	ldrb	r3, [r2, #0]
 8000f10:	f361 0300 	bfi	r3, r1, #0, #1
 8000f14:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8000f16:	2110      	movs	r1, #16
 8000f18:	484b      	ldr	r0, [pc, #300]	; (8001048 <readall_inputs+0x354>)
 8000f1a:	f002 ffb1 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2d9      	uxtb	r1, r3
 8000f26:	4a4c      	ldr	r2, [pc, #304]	; (8001058 <readall_inputs+0x364>)
 8000f28:	7813      	ldrb	r3, [r2, #0]
 8000f2a:	f361 0341 	bfi	r3, r1, #1, #1
 8000f2e:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 8000f30:	2108      	movs	r1, #8
 8000f32:	4841      	ldr	r0, [pc, #260]	; (8001038 <readall_inputs+0x344>)
 8000f34:	f002 ffa4 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	b2d9      	uxtb	r1, r3
 8000f40:	4a45      	ldr	r2, [pc, #276]	; (8001058 <readall_inputs+0x364>)
 8000f42:	7813      	ldrb	r3, [r2, #0]
 8000f44:	f361 0382 	bfi	r3, r1, #2, #1
 8000f48:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f4e:	483f      	ldr	r0, [pc, #252]	; (800104c <readall_inputs+0x358>)
 8000f50:	f002 ff96 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	b2d9      	uxtb	r1, r3
 8000f5c:	4a3e      	ldr	r2, [pc, #248]	; (8001058 <readall_inputs+0x364>)
 8000f5e:	7813      	ldrb	r3, [r2, #0]
 8000f60:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f64:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000f66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6a:	4839      	ldr	r0, [pc, #228]	; (8001050 <readall_inputs+0x35c>)
 8000f6c:	f002 ff88 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	b2d9      	uxtb	r1, r3
 8000f78:	4a37      	ldr	r2, [pc, #220]	; (8001058 <readall_inputs+0x364>)
 8000f7a:	7813      	ldrb	r3, [r2, #0]
 8000f7c:	f361 1304 	bfi	r3, r1, #4, #1
 8000f80:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000f82:	2110      	movs	r1, #16
 8000f84:	482c      	ldr	r0, [pc, #176]	; (8001038 <readall_inputs+0x344>)
 8000f86:	f002 ff7b 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	b2d9      	uxtb	r1, r3
 8000f92:	4a31      	ldr	r2, [pc, #196]	; (8001058 <readall_inputs+0x364>)
 8000f94:	7813      	ldrb	r3, [r2, #0]
 8000f96:	f361 1345 	bfi	r3, r1, #5, #1
 8000f9a:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 8000f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa0:	4829      	ldr	r0, [pc, #164]	; (8001048 <readall_inputs+0x354>)
 8000fa2:	f002 ff6d 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	b2d9      	uxtb	r1, r3
 8000fae:	4a2a      	ldr	r2, [pc, #168]	; (8001058 <readall_inputs+0x364>)
 8000fb0:	7813      	ldrb	r3, [r2, #0]
 8000fb2:	f361 1386 	bfi	r3, r1, #6, #1
 8000fb6:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 8000fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbc:	4822      	ldr	r0, [pc, #136]	; (8001048 <readall_inputs+0x354>)
 8000fbe:	f002 ff5f 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	b2d9      	uxtb	r1, r3
 8000fca:	4a23      	ldr	r2, [pc, #140]	; (8001058 <readall_inputs+0x364>)
 8000fcc:	7813      	ldrb	r3, [r2, #0]
 8000fce:	f361 13c7 	bfi	r3, r1, #7, #1
 8000fd2:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 8000fd4:	2180      	movs	r1, #128	; 0x80
 8000fd6:	4821      	ldr	r0, [pc, #132]	; (800105c <readall_inputs+0x368>)
 8000fd8:	f002 ff52 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	b2d9      	uxtb	r1, r3
 8000fe4:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <readall_inputs+0x364>)
 8000fe6:	7853      	ldrb	r3, [r2, #1]
 8000fe8:	f361 0300 	bfi	r3, r1, #0, #1
 8000fec:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 8000fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff2:	4817      	ldr	r0, [pc, #92]	; (8001050 <readall_inputs+0x35c>)
 8000ff4:	f002 ff44 	bl	8003e80 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	b2d9      	uxtb	r1, r3
 8001000:	4a15      	ldr	r2, [pc, #84]	; (8001058 <readall_inputs+0x364>)
 8001002:	7853      	ldrb	r3, [r2, #1]
 8001004:	f361 0341 	bfi	r3, r1, #1, #1
 8001008:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 800100a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100e:	4810      	ldr	r0, [pc, #64]	; (8001050 <readall_inputs+0x35c>)
 8001010:	f002 ff36 	bl	8003e80 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	b2d9      	uxtb	r1, r3
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <readall_inputs+0x364>)
 800101e:	7853      	ldrb	r3, [r2, #1]
 8001020:	f361 0382 	bfi	r3, r1, #2, #1
 8001024:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 8001026:	2120      	movs	r1, #32
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <readall_inputs+0x358>)
 800102a:	f002 ff29 	bl	8003e80 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	b2d9      	uxtb	r1, r3
 8001036:	e013      	b.n	8001060 <readall_inputs+0x36c>
 8001038:	40021000 	.word	0x40021000
 800103c:	20000050 	.word	0x20000050
 8001040:	40021400 	.word	0x40021400
 8001044:	40020400 	.word	0x40020400
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40021800 	.word	0x40021800
 8001050:	40020000 	.word	0x40020000
 8001054:	20000058 	.word	0x20000058
 8001058:	20000054 	.word	0x20000054
 800105c:	40020800 	.word	0x40020800
 8001060:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <readall_inputs+0x3e4>)
 8001062:	7853      	ldrb	r3, [r2, #1]
 8001064:	f361 03c3 	bfi	r3, r1, #3, #1
 8001068:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	481b      	ldr	r0, [pc, #108]	; (80010dc <readall_inputs+0x3e8>)
 800106e:	f002 ff07 	bl	8003e80 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	b2d9      	uxtb	r1, r3
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <readall_inputs+0x3e4>)
 800107c:	7853      	ldrb	r3, [r2, #1]
 800107e:	f361 1304 	bfi	r3, r1, #4, #1
 8001082:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	4815      	ldr	r0, [pc, #84]	; (80010dc <readall_inputs+0x3e8>)
 8001088:	f002 fefa 	bl	8003e80 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	b2d9      	uxtb	r1, r3
 8001094:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <readall_inputs+0x3e4>)
 8001096:	7853      	ldrb	r3, [r2, #1]
 8001098:	f361 1345 	bfi	r3, r1, #5, #1
 800109c:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 800109e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a2:	480e      	ldr	r0, [pc, #56]	; (80010dc <readall_inputs+0x3e8>)
 80010a4:	f002 feec 	bl	8003e80 <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	b2d9      	uxtb	r1, r3
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <readall_inputs+0x3e4>)
 80010b2:	7853      	ldrb	r3, [r2, #1]
 80010b4:	f361 1386 	bfi	r3, r1, #6, #1
 80010b8:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 80010ba:	2120      	movs	r1, #32
 80010bc:	4808      	ldr	r0, [pc, #32]	; (80010e0 <readall_inputs+0x3ec>)
 80010be:	f002 fedf 	bl	8003e80 <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	b2d9      	uxtb	r1, r3
 80010ca:	4a03      	ldr	r2, [pc, #12]	; (80010d8 <readall_inputs+0x3e4>)
 80010cc:	7853      	ldrb	r3, [r2, #1]
 80010ce:	f361 13c7 	bfi	r3, r1, #7, #1
 80010d2:	7053      	strb	r3, [r2, #1]
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000054 	.word	0x20000054
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40021000 	.word	0x40021000

080010e4 <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80010e8:	f001 f904 	bl	80022f4 <HAL_GetTick>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <testPCB_Leds>:
}
//----------------------------------------------------------------------

// Teste Platinen LEDs
void testPCB_Leds(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	481b      	ldr	r0, [pc, #108]	; (800116c <testPCB_Leds+0x78>)
 80010fe:	f002 fed7 	bl	8003eb0 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001106:	f001 f901 	bl	800230c <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	4817      	ldr	r0, [pc, #92]	; (800116c <testPCB_Leds+0x78>)
 8001110:	f002 fece 	bl	8003eb0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001118:	f001 f8f8 	bl	800230c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001122:	4812      	ldr	r0, [pc, #72]	; (800116c <testPCB_Leds+0x78>)
 8001124:	f002 fec4 	bl	8003eb0 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112c:	f001 f8ee 	bl	800230c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <testPCB_Leds+0x78>)
 8001138:	f002 feba 	bl	8003eb0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800113c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001140:	f001 f8e4 	bl	800230c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001144:	2201      	movs	r2, #1
 8001146:	2104      	movs	r1, #4
 8001148:	4808      	ldr	r0, [pc, #32]	; (800116c <testPCB_Leds+0x78>)
 800114a:	f002 feb1 	bl	8003eb0 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800114e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001152:	f001 f8db 	bl	800230c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2104      	movs	r1, #4
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <testPCB_Leds+0x78>)
 800115c:	f002 fea8 	bl	8003eb0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001164:	f001 f8d2 	bl	800230c <HAL_Delay>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40020400 	.word	0x40020400

08001170 <readTrottle>:
//----------------------------------------------------------------------

// Gaspedal auswerten
//----------------------------------------------------------------------
uint16_t readTrottle(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
	// Variablen anlegen
	uint16_t ADC_Gas = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	80fb      	strh	r3, [r7, #6]
//
//	}
//	else if ((system_in.Kickdown == 1))										// Gaspedal nicht oder teilweise getreten
//	{
//		// Gaspedal einlesen
		ADC_Gas = ADC_Gaspedal();
 800117a:	f7ff fd59 	bl	8000c30 <ADC_Gaspedal>
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
//	{
//		// Gaspedal invalide
//		software_error(ERROR_GASPEDAL);
//	}

	if (ADC_Gas <= 300)
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001188:	d801      	bhi.n	800118e <readTrottle+0x1e>
	{
		ADC_Gas = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	80fb      	strh	r3, [r7, #6]
	if (ADC_Gas >= 3900)
	{

	}

	return ADC_Gas;
 800118e:	88fb      	ldrh	r3, [r7, #6]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011aa:	4b64      	ldr	r3, [pc, #400]	; (800133c <MX_ADC1_Init+0x1a4>)
 80011ac:	4a64      	ldr	r2, [pc, #400]	; (8001340 <MX_ADC1_Init+0x1a8>)
 80011ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b0:	4b62      	ldr	r3, [pc, #392]	; (800133c <MX_ADC1_Init+0x1a4>)
 80011b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b8:	4b60      	ldr	r3, [pc, #384]	; (800133c <MX_ADC1_Init+0x1a4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011be:	4b5f      	ldr	r3, [pc, #380]	; (800133c <MX_ADC1_Init+0x1a4>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011c4:	4b5d      	ldr	r3, [pc, #372]	; (800133c <MX_ADC1_Init+0x1a4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ca:	4b5c      	ldr	r3, [pc, #368]	; (800133c <MX_ADC1_Init+0x1a4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d2:	4b5a      	ldr	r3, [pc, #360]	; (800133c <MX_ADC1_Init+0x1a4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d8:	4b58      	ldr	r3, [pc, #352]	; (800133c <MX_ADC1_Init+0x1a4>)
 80011da:	4a5a      	ldr	r2, [pc, #360]	; (8001344 <MX_ADC1_Init+0x1ac>)
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011de:	4b57      	ldr	r3, [pc, #348]	; (800133c <MX_ADC1_Init+0x1a4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 80011e4:	4b55      	ldr	r3, [pc, #340]	; (800133c <MX_ADC1_Init+0x1a4>)
 80011e6:	220a      	movs	r2, #10
 80011e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ea:	4b54      	ldr	r3, [pc, #336]	; (800133c <MX_ADC1_Init+0x1a4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f2:	4b52      	ldr	r3, [pc, #328]	; (800133c <MX_ADC1_Init+0x1a4>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f8:	4850      	ldr	r0, [pc, #320]	; (800133c <MX_ADC1_Init+0x1a4>)
 80011fa:	f001 f8f3 	bl	80023e4 <HAL_ADC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001204:	f000 fe96 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001208:	230e      	movs	r3, #14
 800120a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800120c:	2301      	movs	r3, #1
 800120e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001210:	2301      	movs	r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4848      	ldr	r0, [pc, #288]	; (800133c <MX_ADC1_Init+0x1a4>)
 800121a:	f001 fac1 	bl	80027a0 <HAL_ADC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001224:	f000 fe86 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001228:	2306      	movs	r3, #6
 800122a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800122c:	2302      	movs	r3, #2
 800122e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	4841      	ldr	r0, [pc, #260]	; (800133c <MX_ADC1_Init+0x1a4>)
 8001236:	f001 fab3 	bl	80027a0 <HAL_ADC_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001240:	f000 fe78 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001244:	2304      	movs	r3, #4
 8001246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001248:	2303      	movs	r3, #3
 800124a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800124c:	2302      	movs	r3, #2
 800124e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4839      	ldr	r0, [pc, #228]	; (800133c <MX_ADC1_Init+0x1a4>)
 8001256:	f001 faa3 	bl	80027a0 <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001260:	f000 fe68 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001264:	2305      	movs	r3, #5
 8001266:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001268:	2304      	movs	r3, #4
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4832      	ldr	r0, [pc, #200]	; (800133c <MX_ADC1_Init+0x1a4>)
 8001272:	f001 fa95 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800127c:	f000 fe5a 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001280:	230f      	movs	r3, #15
 8001282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001284:	2305      	movs	r3, #5
 8001286:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001288:	2301      	movs	r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	482a      	ldr	r0, [pc, #168]	; (800133c <MX_ADC1_Init+0x1a4>)
 8001292:	f001 fa85 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 800129c:	f000 fe4a 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012a0:	2303      	movs	r3, #3
 80012a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012a4:	2306      	movs	r3, #6
 80012a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80012a8:	2303      	movs	r3, #3
 80012aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4822      	ldr	r0, [pc, #136]	; (800133c <MX_ADC1_Init+0x1a4>)
 80012b2:	f001 fa75 	bl	80027a0 <HAL_ADC_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 80012bc:	f000 fe3a 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012c0:	2307      	movs	r3, #7
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012c4:	2307      	movs	r3, #7
 80012c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	481b      	ldr	r0, [pc, #108]	; (800133c <MX_ADC1_Init+0x1a4>)
 80012ce:	f001 fa67 	bl	80027a0 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80012d8:	f000 fe2c 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_ADC1_Init+0x1b0>)
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012e0:	2308      	movs	r3, #8
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4814      	ldr	r0, [pc, #80]	; (800133c <MX_ADC1_Init+0x1a4>)
 80012ea:	f001 fa59 	bl	80027a0 <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 80012f4:	f000 fe1e 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012f8:	2308      	movs	r3, #8
 80012fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012fc:	2309      	movs	r3, #9
 80012fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001300:	2301      	movs	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	4619      	mov	r1, r3
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <MX_ADC1_Init+0x1a4>)
 800130a:	f001 fa49 	bl	80027a0 <HAL_ADC_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8001314:	f000 fe0e 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001318:	2309      	movs	r3, #9
 800131a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800131c:	230a      	movs	r3, #10
 800131e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_ADC1_Init+0x1a4>)
 8001326:	f001 fa3b 	bl	80027a0 <HAL_ADC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 8001330:	f000 fe00 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000006c 	.word	0x2000006c
 8001340:	40012000 	.word	0x40012000
 8001344:	0f000001 	.word	0x0f000001
 8001348:	10000012 	.word	0x10000012

0800134c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a2d      	ldr	r2, [pc, #180]	; (8001420 <HAL_ADC_MspInit+0xd4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d153      	bne.n	8001416 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_ADC_MspInit+0xd8>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a2c      	ldr	r2, [pc, #176]	; (8001424 <HAL_ADC_MspInit+0xd8>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <HAL_ADC_MspInit+0xd8>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	61bb      	str	r3, [r7, #24]
 8001384:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_ADC_MspInit+0xd8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a26      	ldr	r2, [pc, #152]	; (8001424 <HAL_ADC_MspInit+0xd8>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_ADC_MspInit+0xd8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <HAL_ADC_MspInit+0xd8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a20      	ldr	r2, [pc, #128]	; (8001424 <HAL_ADC_MspInit+0xd8>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <HAL_ADC_MspInit+0xd8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_ADC_MspInit+0xd8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <HAL_ADC_MspInit+0xd8>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_ADC_MspInit+0xd8>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 80013ce:	23f8      	movs	r3, #248	; 0xf8
 80013d0:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d2:	2303      	movs	r3, #3
 80013d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <HAL_ADC_MspInit+0xdc>)
 80013e2:	f002 fba1 	bl	8003b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 80013e6:	2330      	movs	r3, #48	; 0x30
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ea:	2303      	movs	r3, #3
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <HAL_ADC_MspInit+0xe0>)
 80013fa:	f002 fb95 	bl	8003b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 80013fe:	2303      	movs	r3, #3
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001402:	2303      	movs	r3, #3
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4619      	mov	r1, r3
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <HAL_ADC_MspInit+0xe4>)
 8001412:	f002 fb89 	bl	8003b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001416:	bf00      	nop
 8001418:	3730      	adds	r7, #48	; 0x30
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40012000 	.word	0x40012000
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020800 	.word	0x40020800
 8001430:	40020400 	.word	0x40020400

08001434 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001438:	4b32      	ldr	r3, [pc, #200]	; (8001504 <MX_CAN3_Init+0xd0>)
 800143a:	4a33      	ldr	r2, [pc, #204]	; (8001508 <MX_CAN3_Init+0xd4>)
 800143c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800143e:	4b31      	ldr	r3, [pc, #196]	; (8001504 <MX_CAN3_Init+0xd0>)
 8001440:	2206      	movs	r2, #6
 8001442:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001444:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <MX_CAN3_Init+0xd0>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800144a:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <MX_CAN3_Init+0xd0>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <MX_CAN3_Init+0xd0>)
 8001452:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001456:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <MX_CAN3_Init+0xd0>)
 800145a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800145e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <MX_CAN3_Init+0xd0>)
 8001462:	2200      	movs	r2, #0
 8001464:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001466:	4b27      	ldr	r3, [pc, #156]	; (8001504 <MX_CAN3_Init+0xd0>)
 8001468:	2200      	movs	r2, #0
 800146a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <MX_CAN3_Init+0xd0>)
 800146e:	2200      	movs	r2, #0
 8001470:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <MX_CAN3_Init+0xd0>)
 8001474:	2200      	movs	r2, #0
 8001476:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <MX_CAN3_Init+0xd0>)
 800147a:	2200      	movs	r2, #0
 800147c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <MX_CAN3_Init+0xd0>)
 8001480:	2200      	movs	r2, #0
 8001482:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001484:	481f      	ldr	r0, [pc, #124]	; (8001504 <MX_CAN3_Init+0xd0>)
 8001486:	f001 fbcf 	bl	8002c28 <HAL_CAN_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001490:	f000 fd50 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001494:	481b      	ldr	r0, [pc, #108]	; (8001504 <MX_CAN3_Init+0xd0>)
 8001496:	f001 fdaf 	bl	8002ff8 <HAL_CAN_Start>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 80014a0:	f000 fd48 	bl	8001f34 <Error_Handler>
	}

	// Aktiviere Interrupts fuer CAN Bus
	if((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 80014a4:	2102      	movs	r1, #2
 80014a6:	4817      	ldr	r0, [pc, #92]	; (8001504 <MX_CAN3_Init+0xd0>)
 80014a8:	f001 ffd7 	bl	800345a <HAL_CAN_ActivateNotification>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN Interrupts
		Error_Handler();
 80014b2:	f000 fd3f 	bl	8001f34 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_CAN3_Init+0xd8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <MX_CAN3_Init+0xd8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_CAN3_Init+0xd8>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_CAN3_Init+0xd8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_CAN3_Init+0xd8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <MX_CAN3_Init+0xd8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_CAN3_Init+0xd8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <MX_CAN3_Init+0xd8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_CAN3_Init+0xd8>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <MX_CAN3_Init+0xd8>)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_CAN3_Init+0xd0>)
 80014f0:	f001 fc96 	bl	8002e20 <HAL_CAN_ConfigFilter>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_CAN3_Init+0xca>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 80014fa:	f000 fd1b 	bl	8001f34 <Error_Handler>
	}

  /* USER CODE END CAN3_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200000dc 	.word	0x200000dc
 8001508:	40003400 	.word	0x40003400
 800150c:	200000b4 	.word	0x200000b4

08001510 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a27      	ldr	r2, [pc, #156]	; (80015cc <HAL_CAN_MspInit+0xbc>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d148      	bne.n	80015c4 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001532:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <HAL_CAN_MspInit+0xc0>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a26      	ldr	r2, [pc, #152]	; (80015d0 <HAL_CAN_MspInit+0xc0>)
 8001538:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <HAL_CAN_MspInit+0xc0>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <HAL_CAN_MspInit+0xc0>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a20      	ldr	r2, [pc, #128]	; (80015d0 <HAL_CAN_MspInit+0xc0>)
 8001550:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <HAL_CAN_MspInit+0xc0>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_CAN_MspInit+0xc0>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a1a      	ldr	r2, [pc, #104]	; (80015d0 <HAL_CAN_MspInit+0xc0>)
 8001568:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_CAN_MspInit+0xc0>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_CAN_MspInit+0xc0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <HAL_CAN_MspInit+0xc0>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_CAN_MspInit+0xc0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8001592:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80015a4:	230b      	movs	r3, #11
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4809      	ldr	r0, [pc, #36]	; (80015d4 <HAL_CAN_MspInit+0xc4>)
 80015b0:	f002 faba 	bl	8003b28 <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2069      	movs	r0, #105	; 0x69
 80015ba:	f002 fa7e 	bl	8003aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80015be:	2069      	movs	r0, #105	; 0x69
 80015c0:	f002 fa97 	bl	8003af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80015c4:	bf00      	nop
 80015c6:	3730      	adds	r7, #48	; 0x30
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40003400 	.word	0x40003400
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000

080015d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08e      	sub	sp, #56	; 0x38
 80015dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ee:	4bb6      	ldr	r3, [pc, #728]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4ab5      	ldr	r2, [pc, #724]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 80015f4:	f043 0310 	orr.w	r3, r3, #16
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4bb3      	ldr	r3, [pc, #716]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	623b      	str	r3, [r7, #32]
 8001604:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	4bb0      	ldr	r3, [pc, #704]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4aaf      	ldr	r2, [pc, #700]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4bad      	ldr	r3, [pc, #692]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800161e:	4baa      	ldr	r3, [pc, #680]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4aa9      	ldr	r2, [pc, #676]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 8001624:	f043 0320 	orr.w	r3, r3, #32
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4ba7      	ldr	r3, [pc, #668]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0320 	and.w	r3, r3, #32
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001636:	4ba4      	ldr	r3, [pc, #656]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4aa3      	ldr	r2, [pc, #652]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 800163c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4ba1      	ldr	r3, [pc, #644]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b9e      	ldr	r3, [pc, #632]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a9d      	ldr	r2, [pc, #628]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b9b      	ldr	r3, [pc, #620]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	4b98      	ldr	r3, [pc, #608]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a97      	ldr	r2, [pc, #604]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b95      	ldr	r3, [pc, #596]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800167e:	4b92      	ldr	r3, [pc, #584]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a91      	ldr	r2, [pc, #580]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 8001684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b8f      	ldr	r3, [pc, #572]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001696:	4b8c      	ldr	r3, [pc, #560]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a8b      	ldr	r2, [pc, #556]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b89      	ldr	r3, [pc, #548]	; (80018c8 <MX_GPIO_Init+0x2f0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80016ae:	2200      	movs	r2, #0
 80016b0:	f248 0187 	movw	r1, #32903	; 0x8087
 80016b4:	4885      	ldr	r0, [pc, #532]	; (80018cc <MX_GPIO_Init+0x2f4>)
 80016b6:	f002 fbfb 	bl	8003eb0 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f242 0108 	movw	r1, #8200	; 0x2008
 80016c0:	4883      	ldr	r0, [pc, #524]	; (80018d0 <MX_GPIO_Init+0x2f8>)
 80016c2:	f002 fbf5 	bl	8003eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80016c6:	2200      	movs	r2, #0
 80016c8:	f24f 013c 	movw	r1, #61500	; 0xf03c
 80016cc:	4881      	ldr	r0, [pc, #516]	; (80018d4 <MX_GPIO_Init+0x2fc>)
 80016ce:	f002 fbef 	bl	8003eb0 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80016d2:	2200      	movs	r2, #0
 80016d4:	f647 0194 	movw	r1, #30868	; 0x7894
 80016d8:	487f      	ldr	r0, [pc, #508]	; (80018d8 <MX_GPIO_Init+0x300>)
 80016da:	f002 fbe9 	bl	8003eb0 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80016de:	2200      	movs	r2, #0
 80016e0:	f64e 2188 	movw	r1, #60040	; 0xea88
 80016e4:	487d      	ldr	r0, [pc, #500]	; (80018dc <MX_GPIO_Init+0x304>)
 80016e6:	f002 fbe3 	bl	8003eb0 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80016ea:	2200      	movs	r2, #0
 80016ec:	f64e 610c 	movw	r1, #60940	; 0xee0c
 80016f0:	487b      	ldr	r0, [pc, #492]	; (80018e0 <MX_GPIO_Init+0x308>)
 80016f2:	f002 fbdd 	bl	8003eb0 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016fc:	4879      	ldr	r0, [pc, #484]	; (80018e4 <MX_GPIO_Init+0x30c>)
 80016fe:	f002 fbd7 	bl	8003eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001702:	f248 0387 	movw	r3, #32903	; 0x8087
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	4619      	mov	r1, r3
 800171a:	486c      	ldr	r0, [pc, #432]	; (80018cc <MX_GPIO_Init+0x2f4>)
 800171c:	f002 fa04 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8001720:	f647 7378 	movw	r3, #32632	; 0x7f78
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001726:	2300      	movs	r3, #0
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	4865      	ldr	r0, [pc, #404]	; (80018cc <MX_GPIO_Init+0x2f4>)
 8001736:	f002 f9f7 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800173a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	485f      	ldr	r0, [pc, #380]	; (80018d0 <MX_GPIO_Init+0x2f8>)
 8001754:	f002 f9e8 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001758:	f64d 7347 	movw	r3, #57159	; 0xdf47
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175e:	2303      	movs	r3, #3
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176a:	4619      	mov	r1, r3
 800176c:	4858      	ldr	r0, [pc, #352]	; (80018d0 <MX_GPIO_Init+0x2f8>)
 800176e:	f002 f9db 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8001772:	f640 0303 	movw	r3, #2051	; 0x803
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	4619      	mov	r1, r3
 8001786:	4853      	ldr	r0, [pc, #332]	; (80018d4 <MX_GPIO_Init+0x2fc>)
 8001788:	f002 f9ce 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 800178c:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	484b      	ldr	r0, [pc, #300]	; (80018d4 <MX_GPIO_Init+0x2fc>)
 80017a6:	f002 f9bf 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 80017aa:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b0:	2303      	movs	r3, #3
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	4845      	ldr	r0, [pc, #276]	; (80018d4 <MX_GPIO_Init+0x2fc>)
 80017c0:	f002 f9b2 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 80017c4:	2308      	movs	r3, #8
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d0:	2302      	movs	r3, #2
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	483d      	ldr	r0, [pc, #244]	; (80018d0 <MX_GPIO_Init+0x2f8>)
 80017dc:	f002 f9a4 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 80017e0:	f640 6307 	movw	r3, #3591	; 0xe07
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	4619      	mov	r1, r3
 80017f4:	483b      	ldr	r0, [pc, #236]	; (80018e4 <MX_GPIO_Init+0x30c>)
 80017f6:	f002 f997 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80017fa:	f647 0394 	movw	r3, #30868	; 0x7894
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	4831      	ldr	r0, [pc, #196]	; (80018d8 <MX_GPIO_Init+0x300>)
 8001814:	f002 f988 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 8001818:	f241 13f3 	movw	r3, #4595	; 0x11f3
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182a:	4619      	mov	r1, r3
 800182c:	482c      	ldr	r0, [pc, #176]	; (80018e0 <MX_GPIO_Init+0x308>)
 800182e:	f002 f97b 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 8001832:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	4619      	mov	r1, r3
 8001846:	4824      	ldr	r0, [pc, #144]	; (80018d8 <MX_GPIO_Init+0x300>)
 8001848:	f002 f96e 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 800184c:	f241 5310 	movw	r3, #5392	; 0x1510
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001852:	2300      	movs	r3, #0
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	4619      	mov	r1, r3
 8001860:	481e      	ldr	r0, [pc, #120]	; (80018dc <MX_GPIO_Init+0x304>)
 8001862:	f002 f961 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8001866:	f64e 2388 	movw	r3, #60040	; 0xea88
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187c:	4619      	mov	r1, r3
 800187e:	4817      	ldr	r0, [pc, #92]	; (80018dc <MX_GPIO_Init+0x304>)
 8001880:	f002 f952 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001884:	f64e 630c 	movw	r3, #60940	; 0xee0c
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	4619      	mov	r1, r3
 800189c:	4810      	ldr	r0, [pc, #64]	; (80018e0 <MX_GPIO_Init+0x308>)
 800189e:	f002 f943 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	4806      	ldr	r0, [pc, #24]	; (80018d0 <MX_GPIO_Init+0x2f8>)
 80018b6:	f002 f937 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 80018ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	e00f      	b.n	80018e8 <MX_GPIO_Init+0x310>
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40021400 	.word	0x40021400
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40020c00 	.word	0x40020c00
 80018e0:	40021800 	.word	0x40021800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f2:	4619      	mov	r1, r3
 80018f4:	480f      	ldr	r0, [pc, #60]	; (8001934 <MX_GPIO_Init+0x35c>)
 80018f6:	f002 f917 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 80018fa:	2307      	movs	r3, #7
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fe:	2303      	movs	r3, #3
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	480a      	ldr	r0, [pc, #40]	; (8001938 <MX_GPIO_Init+0x360>)
 800190e:	f002 f90b 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001912:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001918:	2303      	movs	r3, #3
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001924:	4619      	mov	r1, r3
 8001926:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_GPIO_Init+0x364>)
 8001928:	f002 f8fe 	bl	8003b28 <HAL_GPIO_Init>

}
 800192c:	bf00      	nop
 800192e:	3738      	adds	r7, #56	; 0x38
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40020000 	.word	0x40020000
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40020400 	.word	0x40020400

08001940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b0aa      	sub	sp, #168	; 0xa8
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001946:	f000 fc84 	bl	8002252 <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[5], InData[5], status, tmp[4];
	uint16_t count = 0, gas_adc;
 800194a:	2300      	movs	r3, #0
 800194c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
  	uint32_t lastcan = 0, lastsendcan = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001956:	2300      	movs	r3, #0
 8001958:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800195c:	4bc1      	ldr	r3, [pc, #772]	; (8001c64 <main+0x324>)
 800195e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001962:	461d      	mov	r5, r3
 8001964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001968:	e895 0003 	ldmia.w	r5, {r0, r1}
 800196c:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 8001970:	4bbd      	ldr	r3, [pc, #756]	; (8001c68 <main+0x328>)
 8001972:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001976:	461d      	mov	r5, r3
 8001978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001980:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 8001984:	4bb9      	ldr	r3, [pc, #740]	; (8001c6c <main+0x32c>)
 8001986:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800198a:	461d      	mov	r5, r3
 800198c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800198e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001990:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001994:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 8001998:	4bb5      	ldr	r3, [pc, #724]	; (8001c70 <main+0x330>)
 800199a:	f107 0418 	add.w	r4, r7, #24
 800199e:	461d      	mov	r5, r3
 80019a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019a8:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxBamocar = {BAMOCAR_TX_ID, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 80019ac:	4bb1      	ldr	r3, [pc, #708]	; (8001c74 <main+0x334>)
 80019ae:	463c      	mov	r4, r7
 80019b0:	461d      	mov	r5, r3
 80019b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019ba:	e884 0003 	stmia.w	r4, {r0, r1}


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019be:	f000 f9f7 	bl	8001db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c2:	f7ff fe09 	bl	80015d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019c6:	f000 fba7 	bl	8002118 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 80019ca:	f7ff fd33 	bl	8001434 <MX_CAN3_Init>
  MX_ADC1_Init();
 80019ce:	f7ff fbe3 	bl	8001198 <MX_ADC1_Init>
  MX_TIM6_Init();
 80019d2:	f000 fb45 	bl	8002060 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 80019d6:	f7ff f869 	bl	8000aac <readResetSource>
 80019da:	4603      	mov	r3, r0
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff f8b7 	bl	8000b50 <printResetSource>

  	/* Teste serielle Schnittstelle*/
  	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80019e2:	213a      	movs	r1, #58	; 0x3a
 80019e4:	48a4      	ldr	r0, [pc, #656]	; (8001c78 <main+0x338>)
 80019e6:	f7fe fee5 	bl	80007b4 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 80019ea:	f7ff f83d 	bl	8000a68 <collectSystemInfo>
#endif

	// Leds Testen
  	testPCB_Leds();
 80019ee:	f7ff fb81 	bl	80010f4 <testPCB_Leds>

  	/* Lese alle Eingaenge */
  	readall_inputs();
 80019f2:	f7ff f97f 	bl	8000cf4 <readall_inputs>
	TxMotor1.RTR = CAN_RTR_DATA;
	TxMotor1.IDE = CAN_ID_STD;
	TxMotor1.DLC = 8;
	TxMotor1.TransmitGlobalTime=DISABLE;*/

  	for (uint8_t j = 0; j < 8; j++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 80019fc:	e00f      	b.n	8001a1e <main+0xde>
  		TxData[j] = (j + 1);
 80019fe:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001a02:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8001a06:	3201      	adds	r2, #1
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001a0e:	440b      	add	r3, r1
 8001a10:	f803 2c1c 	strb.w	r2, [r3, #-28]
  	for (uint8_t j = 0; j < 8; j++)
 8001a14:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8001a1e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001a22:	2b07      	cmp	r3, #7
 8001a24:	d9eb      	bls.n	80019fe <main+0xbe>

  	// Start timer
  	HAL_TIM_Base_Start(&htim6);
 8001a26:	4895      	ldr	r0, [pc, #596]	; (8001c7c <main+0x33c>)
 8001a28:	f003 fbb0 	bl	800518c <HAL_TIM_Base_Start>

  	// Schreibe BamoCar CAN-Timeout
  	tmp[0] = 0xd0;
 8001a2c:	23d0      	movs	r3, #208	; 0xd0
 8001a2e:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
  	tmp[1] = 0x4f;
 8001a32:	234f      	movs	r3, #79	; 0x4f
 8001a34:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
  	tmp[2] = 0x01;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

#define BAMOCANTIMEOUT			"\nSetze BamoCar CAN-Timeout Zeit auf 500ms\n"
  	uartTransmit(BAMOCANTIMEOUT, sizeof(BAMOCANTIMEOUT));
 8001a3e:	212b      	movs	r1, #43	; 0x2b
 8001a40:	488f      	ldr	r0, [pc, #572]	; (8001c80 <main+0x340>)
 8001a42:	f7fe feb7 	bl	80007b4 <uartTransmit>
  	status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8001a46:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001a4a:	4639      	mov	r1, r7
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	488d      	ldr	r0, [pc, #564]	; (8001c84 <main+0x344>)
 8001a50:	f001 fb16 	bl	8003080 <HAL_CAN_AddTxMessage>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	hal_error(status);
 8001a5a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f918 	bl	8000c94 <hal_error>

  	// Loesche BamoCar Fehler
  	tmp[0] = 0x8e;
 8001a64:	238e      	movs	r3, #142	; 0x8e
 8001a66:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
  	tmp[1] = 0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
  	tmp[2] = 0x00;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

#define BAMOCANERROR			"\nSetze Bamocar Fehler zurueck\n"
  	uartTransmit(BAMOCANERROR, sizeof(BAMOCANERROR));
 8001a76:	211f      	movs	r1, #31
 8001a78:	4883      	ldr	r0, [pc, #524]	; (8001c88 <main+0x348>)
 8001a7a:	f7fe fe9b 	bl	80007b4 <uartTransmit>
  	status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8001a7e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001a82:	4639      	mov	r1, r7
 8001a84:	2301      	movs	r3, #1
 8001a86:	487f      	ldr	r0, [pc, #508]	; (8001c84 <main+0x344>)
 8001a88:	f001 fafa 	bl	8003080 <HAL_CAN_AddTxMessage>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	hal_error(status);
 8001a92:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f8fc 	bl	8000c94 <hal_error>

  	// Starte While-Schleife
#define MAINWHILE				"\nStarte While Schleife\n"
  	uartTransmit(MAINWHILE, sizeof(MAINWHILE));
 8001a9c:	2118      	movs	r1, #24
 8001a9e:	487b      	ldr	r0, [pc, #492]	; (8001c8c <main+0x34c>)
 8001aa0:	f7fe fe88 	bl	80007b4 <uartTransmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8001aa4:	4b7a      	ldr	r3, [pc, #488]	; (8001c90 <main+0x350>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <main+0x17e>
		{
			count++;													// Zaehler count hochzaehlen
 8001aae:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 8001ab8:	4b75      	ldr	r3, [pc, #468]	; (8001c90 <main+0x350>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
		}

		// Task wird alle 20 Millisekunden ausgefuehrt
		if ((count % 20) == 0)
 8001abe:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001ac2:	4b74      	ldr	r3, [pc, #464]	; (8001c94 <main+0x354>)
 8001ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ac8:	0919      	lsrs	r1, r3, #4
 8001aca:	460b      	mov	r3, r1
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10e      	bne.n	8001af8 <main+0x1b8>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 8001ada:	f107 0118 	add.w	r1, r7, #24
 8001ade:	2301      	movs	r3, #1
 8001ae0:	4a6d      	ldr	r2, [pc, #436]	; (8001c98 <main+0x358>)
 8001ae2:	4868      	ldr	r0, [pc, #416]	; (8001c84 <main+0x344>)
 8001ae4:	f001 facc 	bl	8003080 <HAL_CAN_AddTxMessage>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			hal_error(status);
 8001aee:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f8ce 	bl	8000c94 <hal_error>
		if ((count % 50) == 0)
		{
		}

		// Task wird alle 100 Millisekunden ausgefuehrt
		if ((count % 100) == 0)
 8001af8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001afc:	4a67      	ldr	r2, [pc, #412]	; (8001c9c <main+0x35c>)
 8001afe:	fba2 1203 	umull	r1, r2, r2, r3
 8001b02:	0952      	lsrs	r2, r2, #5
 8001b04:	2164      	movs	r1, #100	; 0x64
 8001b06:	fb01 f202 	mul.w	r2, r1, r2
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d128      	bne.n	8001b64 <main+0x224>
		{
			// alle Inputs einlesen
			readall_inputs();
 8001b12:	f7ff f8ef 	bl	8000cf4 <readall_inputs>

			// Bremse pruefen
//			readBrake();

			// Gaspedal pruefen
			gas_adc = readTrottle();
 8001b16:	f7ff fb2b 	bl	8001170 <readTrottle>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
			tmp[0] = 0x90;
 8001b20:	2390      	movs	r3, #144	; 0x90
 8001b22:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			tmp[1] = (gas_adc-300)/10;
 8001b26:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001b2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b2e:	4a5c      	ldr	r2, [pc, #368]	; (8001ca0 <main+0x360>)
 8001b30:	fb82 1203 	smull	r1, r2, r2, r3
 8001b34:	1092      	asrs	r2, r2, #2
 8001b36:	17db      	asrs	r3, r3, #31
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			tmp[2] = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

			// Drehmoment an Bamocar senden
			status = HAL_CAN_AddTxMessage(&hcan3, &TxBamocar, tmp, (uint32_t *)CAN_TX_MAILBOX0);
 8001b46:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001b4a:	4639      	mov	r1, r7
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	484d      	ldr	r0, [pc, #308]	; (8001c84 <main+0x344>)
 8001b50:	f001 fa96 	bl	8003080 <HAL_CAN_AddTxMessage>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			hal_error(status);
 8001b5a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f898 	bl	8000c94 <hal_error>
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if ((count % 200) == 0)
 8001b64:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001b68:	4a4c      	ldr	r2, [pc, #304]	; (8001c9c <main+0x35c>)
 8001b6a:	fba2 1203 	umull	r1, r2, r2, r3
 8001b6e:	0992      	lsrs	r2, r2, #6
 8001b70:	21c8      	movs	r1, #200	; 0xc8
 8001b72:	fb01 f202 	mul.w	r2, r1, r2
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d156      	bne.n	8001c2c <main+0x2ec>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8001b7e:	4b49      	ldr	r3, [pc, #292]	; (8001ca4 <main+0x364>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			OutData[1] = highcurrent_out.high_out;
 8001b86:	4b48      	ldr	r3, [pc, #288]	; (8001ca8 <main+0x368>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
			OutData[2] = (leuchten_out.ledoutput >> 8);
 8001b8e:	4b47      	ldr	r3, [pc, #284]	; (8001cac <main+0x36c>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	0a1b      	lsrs	r3, r3, #8
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			OutData[3] = leuchten_out.ledoutput;
 8001b9c:	4b43      	ldr	r3, [pc, #268]	; (8001cac <main+0x36c>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			OutData[4] = komfort_out.komfortoutput;
 8001ba6:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <main+0x370>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 8001bae:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001bb2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	4832      	ldr	r0, [pc, #200]	; (8001c84 <main+0x344>)
 8001bba:	f001 fa61 	bl	8003080 <HAL_CAN_AddTxMessage>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			hal_error(status);
 8001bc4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f863 	bl	8000c94 <hal_error>

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = (system_in.systeminput >> 8);
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <main+0x374>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
			InData[1] = system_in.systeminput;
 8001bdc:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <main+0x374>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
			InData[2] = sdc_in.sdcinput;
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <main+0x378>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
			InData[3] = (komfort_in.komfortinput >> 8);
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <main+0x37c>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			InData[4] = komfort_in.komfortinput;
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <main+0x37c>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 8001c06:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001c0a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001c0e:	2301      	movs	r3, #1
 8001c10:	481c      	ldr	r0, [pc, #112]	; (8001c84 <main+0x344>)
 8001c12:	f001 fa35 	bl	8003080 <HAL_CAN_AddTxMessage>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			hal_error(status);
 8001c1c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f837 	bl	8000c94 <hal_error>

			// Variable count auf 0 zuruecksetzen
			count = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
		}

	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 8001c2c:	f7ff fa5a 	bl	80010e4 <millis>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	f240 8089 	bls.w	8001d50 <main+0x410>
		{
			// Wenn Nachricht ueber den CAN-Bus empfangen wurden
			if (can_change == 1)
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <main+0x380>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	f040 8084 	bne.w	8001d50 <main+0x410>
			{
				// Nachricht ID über UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <main+0x384>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2110      	movs	r1, #16
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fdc4 	bl	80007dc <uartTransmitNumber>
				uartTransmit("\t", 1);
 8001c54:	2101      	movs	r1, #1
 8001c56:	481c      	ldr	r0, [pc, #112]	; (8001cc8 <main+0x388>)
 8001c58:	f7fe fdac 	bl	80007b4 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8001c62:	e040      	b.n	8001ce6 <main+0x3a6>
 8001c64:	08006618 	.word	0x08006618
 8001c68:	08006630 	.word	0x08006630
 8001c6c:	08006648 	.word	0x08006648
 8001c70:	08006660 	.word	0x08006660
 8001c74:	08006678 	.word	0x08006678
 8001c78:	0800653c 	.word	0x0800653c
 8001c7c:	20000128 	.word	0x20000128
 8001c80:	08006578 	.word	0x08006578
 8001c84:	200000dc 	.word	0x200000dc
 8001c88:	080065a4 	.word	0x080065a4
 8001c8c:	080065c4 	.word	0x080065c4
 8001c90:	20000029 	.word	0x20000029
 8001c94:	cccccccd 	.word	0xcccccccd
 8001c98:	20000044 	.word	0x20000044
 8001c9c:	51eb851f 	.word	0x51eb851f
 8001ca0:	66666667 	.word	0x66666667
 8001ca4:	20000060 	.word	0x20000060
 8001ca8:	20000064 	.word	0x20000064
 8001cac:	20000068 	.word	0x20000068
 8001cb0:	2000005c 	.word	0x2000005c
 8001cb4:	20000050 	.word	0x20000050
 8001cb8:	20000058 	.word	0x20000058
 8001cbc:	20000054 	.word	0x20000054
 8001cc0:	20000028 	.word	0x20000028
 8001cc4:	2000010c 	.word	0x2000010c
 8001cc8:	080065dc 	.word	0x080065dc
				{
					uartTransmitNumber(RxData[i], 16);
 8001ccc:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8001cd0:	4a2f      	ldr	r2, [pc, #188]	; (8001d90 <main+0x450>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	2110      	movs	r1, #16
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fd80 	bl	80007dc <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001cdc:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8001ce6:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8001cea:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <main+0x454>)
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d3ec      	bcc.n	8001ccc <main+0x38c>
				}
				uartTransmit("\n", 1);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4828      	ldr	r0, [pc, #160]	; (8001d98 <main+0x458>)
 8001cf6:	f7fe fd5d 	bl	80007b4 <uartTransmit>

				// Sortieren der IDs nach Geräten
				switch (RxMessage.StdId)
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <main+0x454>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f240 1211 	movw	r2, #273	; 0x111
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00b      	beq.n	8001d1e <main+0x3de>
 8001d06:	f240 1281 	movw	r2, #385	; 0x181
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d10c      	bne.n	8001d28 <main+0x3e8>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0], RxMessage.DLC);
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <main+0x454>)
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	4619      	mov	r1, r3
 8001d16:	481e      	ldr	r0, [pc, #120]	; (8001d90 <main+0x450>)
 8001d18:	f7fe fc12 	bl	8000540 <BAMOCAN_ID>
						break;
 8001d1c:	e009      	b.n	8001d32 <main+0x3f2>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 8001d1e:	2117      	movs	r1, #23
 8001d20:	481e      	ldr	r0, [pc, #120]	; (8001d9c <main+0x45c>)
 8001d22:	f7fe fd47 	bl	80007b4 <uartTransmit>
						break;
 8001d26:	e004      	b.n	8001d32 <main+0x3f2>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 8001d28:	2118      	movs	r1, #24
 8001d2a:	481d      	ldr	r0, [pc, #116]	; (8001da0 <main+0x460>)
 8001d2c:	f7fe fd42 	bl	80007b4 <uartTransmit>
						break;
 8001d30:	bf00      	nop
				}

				TxData[2] = motor1.output[2];
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <main+0x464>)
 8001d34:	789b      	ldrb	r3, [r3, #2]
 8001d36:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
				TxData[3] = motor1.output[3];
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <main+0x464>)
 8001d3c:	78db      	ldrb	r3, [r3, #3]
 8001d3e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				lastcan = millis();
 8001d42:	f7ff f9cf 	bl	80010e4 <millis>
 8001d46:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
				can_change = 0;
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <main+0x468>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
			}
		}

		// Sende CAN Nachricht auf CAN-Bus
		if (millis() - lastsendcan >= 993)
 8001d50:	f7ff f9c8 	bl	80010e4 <millis>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8001d60:	f67f aea0 	bls.w	8001aa4 <main+0x164>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8001d64:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d68:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	480f      	ldr	r0, [pc, #60]	; (8001dac <main+0x46c>)
 8001d70:	f001 f986 	bl	8003080 <HAL_CAN_AddTxMessage>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			hal_error(status);
 8001d7a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe ff88 	bl	8000c94 <hal_error>
			lastsendcan = millis();
 8001d84:	f7ff f9ae 	bl	80010e4 <millis>
 8001d88:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		if (millisekunden_flag_1 == 1)
 8001d8c:	e68a      	b.n	8001aa4 <main+0x164>
 8001d8e:	bf00      	nop
 8001d90:	20000104 	.word	0x20000104
 8001d94:	2000010c 	.word	0x2000010c
 8001d98:	080065e0 	.word	0x080065e0
 8001d9c:	080065e4 	.word	0x080065e4
 8001da0:	080065fc 	.word	0x080065fc
 8001da4:	20000044 	.word	0x20000044
 8001da8:	20000028 	.word	0x20000028
 8001dac:	200000dc 	.word	0x200000dc

08001db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0b8      	sub	sp, #224	; 0xe0
 8001db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dba:	2234      	movs	r2, #52	; 0x34
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f004 f9b8 	bl	8006134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	2290      	movs	r2, #144	; 0x90
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 f9a9 	bl	8006134 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <SystemClock_Config+0x120>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a3a      	ldr	r2, [pc, #232]	; (8001ed0 <SystemClock_Config+0x120>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b38      	ldr	r3, [pc, #224]	; (8001ed0 <SystemClock_Config+0x120>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001dfa:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <SystemClock_Config+0x124>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e02:	4a34      	ldr	r2, [pc, #208]	; (8001ed4 <SystemClock_Config+0x124>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	4b32      	ldr	r3, [pc, #200]	; (8001ed4 <SystemClock_Config+0x124>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e32:	2319      	movs	r3, #25
 8001e34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001e38:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e40:	2302      	movs	r3, #2
 8001e42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e46:	2302      	movs	r3, #2
 8001e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 f894 	bl	8003f84 <HAL_RCC_OscConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001e62:	f000 f867 	bl	8001f34 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e66:	f002 f83d 	bl	8003ee4 <HAL_PWREx_EnableOverDrive>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e70:	f000 f860 	bl	8001f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e74:	230f      	movs	r3, #15
 8001e76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e94:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e98:	2103      	movs	r1, #3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 fb20 	bl	80044e0 <HAL_RCC_ClockConfig>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001ea6:	f000 f845 	bl	8001f34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f002 fce8 	bl	800488c <HAL_RCCEx_PeriphCLKConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001ec2:	f000 f837 	bl	8001f34 <Error_Handler>
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	37e0      	adds	r7, #224	; 0xe0
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	// Nachricht aus Speicher auslesen
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f001 f9a5 	bl	8003236 <HAL_CAN_GetRxMessage>
	can_change = 1;
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000104 	.word	0x20000104
 8001f00:	2000010c 	.word	0x2000010c
 8001f04:	20000028 	.word	0x20000028

08001f08 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d102      	bne.n	8001f1e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
	}
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000128 	.word	0x20000128
 8001f30:	20000029 	.word	0x20000029

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  // Schalte Fehler LED ein
  leuchten_out.RedLed = 1;
 8001f3c:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <Error_Handler+0x30>)
 8001f3e:	7853      	ldrb	r3, [r2, #1]
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	7053      	strb	r3, [r2, #1]
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <Error_Handler+0x30>)
 8001f48:	785b      	ldrb	r3, [r3, #1]
 8001f4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
 8001f52:	2104      	movs	r1, #4
 8001f54:	4804      	ldr	r0, [pc, #16]	; (8001f68 <Error_Handler+0x34>)
 8001f56:	f001 ffab 	bl	8003eb0 <HAL_GPIO_WritePin>

  // Sende Nachricht auf Uart-Interface
#ifdef DEBUG
  #define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
  uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8001f5a:	2122      	movs	r1, #34	; 0x22
 8001f5c:	4803      	ldr	r0, [pc, #12]	; (8001f6c <Error_Handler+0x38>)
 8001f5e:	f7fe fc29 	bl	80007b4 <uartTransmit>
#endif
  // Beginne Endlosschleife nachdem Fehler aufgetreten ist
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <Error_Handler+0x2e>
 8001f64:	20000068 	.word	0x20000068
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	08006690 	.word	0x08006690

08001f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a08      	ldr	r2, [pc, #32]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_MspInit+0x44>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <NMI_Handler+0x4>

08001fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <HardFault_Handler+0x4>

08001fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <MemManage_Handler+0x4>

08001fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002004:	f000 f962 	bl	80022cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}

0800200c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <TIM6_DAC_IRQHandler+0x10>)
 8002012:	f003 f92b 	bl	800526c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000128 	.word	0x20000128

08002020 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <CAN3_RX0_IRQHandler+0x10>)
 8002026:	f001 fa3e 	bl	80034a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200000dc 	.word	0x200000dc

08002034 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <SystemInit+0x28>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	4a07      	ldr	r2, [pc, #28]	; (800205c <SystemInit+0x28>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <SystemInit+0x28>)
 800204a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800204e:	609a      	str	r2, [r3, #8]
#endif
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <MX_TIM6_Init+0x64>)
 8002072:	4a15      	ldr	r2, [pc, #84]	; (80020c8 <MX_TIM6_Init+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5;
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <MX_TIM6_Init+0x64>)
 8002078:	2205      	movs	r2, #5
 800207a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_TIM6_Init+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <MX_TIM6_Init+0x64>)
 8002084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002088:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_TIM6_Init+0x64>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <MX_TIM6_Init+0x64>)
 8002092:	f003 f823 	bl	80050dc <HAL_TIM_Base_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800209c:	f7ff ff4a 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_TIM6_Init+0x64>)
 80020ae:	f003 fac5 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80020b8:	f7ff ff3c 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000128 	.word	0x20000128
 80020c8:	40001000 	.word	0x40001000

080020cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <HAL_TIM_Base_MspInit+0x44>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d113      	bne.n	8002106 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_TIM_Base_MspInit+0x48>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a0c      	ldr	r2, [pc, #48]	; (8002114 <HAL_TIM_Base_MspInit+0x48>)
 80020e4:	f043 0310 	orr.w	r3, r3, #16
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_TIM_Base_MspInit+0x48>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	2036      	movs	r0, #54	; 0x36
 80020fc:	f001 fcdd 	bl	8003aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002100:	2036      	movs	r0, #54	; 0x36
 8002102:	f001 fcf6 	bl	8003af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40001000 	.word	0x40001000
 8002114:	40023800 	.word	0x40023800

08002118 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <MX_USART2_UART_Init+0x5c>)
 8002120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002124:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_USART2_UART_Init+0x58>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <MX_USART2_UART_Init+0x58>)
 800215c:	f003 fb1a 	bl	8005794 <HAL_UART_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002166:	f7ff fee5 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000174 	.word	0x20000174
 8002174:	40004400 	.word	0x40004400

08002178 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_UART_MspInit+0x7c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d127      	bne.n	80021ea <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <HAL_UART_MspInit+0x80>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a16      	ldr	r2, [pc, #88]	; (80021f8 <HAL_UART_MspInit+0x80>)
 80021a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_UART_MspInit+0x80>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_UART_MspInit+0x80>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_UART_MspInit+0x80>)
 80021b8:	f043 0308 	orr.w	r3, r3, #8
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_UART_MspInit+0x80>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 80021ca:	2360      	movs	r3, #96	; 0x60
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021da:	2307      	movs	r3, #7
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <HAL_UART_MspInit+0x84>)
 80021e6:	f001 fc9f 	bl	8003b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021ea:	bf00      	nop
 80021ec:	3728      	adds	r7, #40	; 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40004400 	.word	0x40004400
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020c00 	.word	0x40020c00

08002200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002238 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002204:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002206:	e003      	b.n	8002210 <LoopCopyDataInit>

08002208 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800220a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800220c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800220e:	3104      	adds	r1, #4

08002210 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002210:	480b      	ldr	r0, [pc, #44]	; (8002240 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002214:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002216:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002218:	d3f6      	bcc.n	8002208 <CopyDataInit>
  ldr  r2, =_sbss
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800221c:	e002      	b.n	8002224 <LoopFillZerobss>

0800221e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800221e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002220:	f842 3b04 	str.w	r3, [r2], #4

08002224 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002226:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002228:	d3f9      	bcc.n	800221e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800222a:	f7ff ff03 	bl	8002034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800222e:	f003 ff5d 	bl	80060ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002232:	f7ff fb85 	bl	8001940 <main>
  bx  lr    
 8002236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002238:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800223c:	08006704 	.word	0x08006704
  ldr  r0, =_sdata
 8002240:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002244:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002248:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800224c:	200001fc 	.word	0x200001fc

08002250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002250:	e7fe      	b.n	8002250 <ADC_IRQHandler>

08002252 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002256:	2003      	movs	r0, #3
 8002258:	f001 fc24 	bl	8003aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225c:	2000      	movs	r0, #0
 800225e:	f000 f805 	bl	800226c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002262:	f7ff fe85 	bl	8001f70 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_InitTick+0x54>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_InitTick+0x58>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002282:	fbb3 f3f1 	udiv	r3, r3, r1
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	4618      	mov	r0, r3
 800228c:	f001 fc3f 	bl	8003b0e <HAL_SYSTICK_Config>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e00e      	b.n	80022b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b0f      	cmp	r3, #15
 800229e:	d80a      	bhi.n	80022b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a0:	2200      	movs	r2, #0
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f001 fc07 	bl	8003aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ac:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <HAL_InitTick+0x5c>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000008 	.word	0x20000008
 80022c8:	20000004 	.word	0x20000004

080022cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_IncTick+0x20>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_IncTick+0x24>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <HAL_IncTick+0x24>)
 80022de:	6013      	str	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000008 	.word	0x20000008
 80022f0:	200001f8 	.word	0x200001f8

080022f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return uwTick;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_GetTick+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	200001f8 	.word	0x200001f8

0800230c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002314:	f7ff ffee 	bl	80022f4 <HAL_GetTick>
 8002318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d005      	beq.n	8002332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_Delay+0x44>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002332:	bf00      	nop
 8002334:	f7ff ffde 	bl	80022f4 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	429a      	cmp	r2, r3
 8002342:	d8f7      	bhi.n	8002334 <HAL_Delay+0x28>
  {
  }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000008 	.word	0x20000008

08002354 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8002358:	4b02      	ldr	r3, [pc, #8]	; (8002364 <HAL_GetHalVersion+0x10>)
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	01020900 	.word	0x01020900

08002368 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_GetREVID+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0c1b      	lsrs	r3, r3, #16
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e0042000 	.word	0xe0042000

08002380 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <HAL_GetDEVID+0x18>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e0042000 	.word	0xe0042000

0800239c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_GetUIDw0+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	1ff0f420 	.word	0x1ff0f420

080023b4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <HAL_GetUIDw1+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	1ff0f424 	.word	0x1ff0f424

080023cc <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <HAL_GetUIDw2+0x14>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	1ff0f428 	.word	0x1ff0f428

080023e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e031      	b.n	800245e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe ffa2 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <HAL_ADC_Init+0x84>)
 8002428:	4013      	ands	r3, r2
 800242a:	f043 0202 	orr.w	r2, r3, #2
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fafe 	bl	8002a34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f023 0303 	bic.w	r3, r3, #3
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
 800244e:	e001      	b.n	8002454 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	ffffeefd 	.word	0xffffeefd

0800246c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADC_Start+0x1a>
 8002482:	2302      	movs	r3, #2
 8002484:	e0ad      	b.n	80025e2 <HAL_ADC_Start+0x176>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d018      	beq.n	80024ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024ac:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <HAL_ADC_Start+0x184>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a50      	ldr	r2, [pc, #320]	; (80025f4 <HAL_ADC_Start+0x188>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	0c9a      	lsrs	r2, r3, #18
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80024c0:	e002      	b.n	80024c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f9      	bne.n	80024c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d175      	bne.n	80025c8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e0:	4b45      	ldr	r3, [pc, #276]	; (80025f8 <HAL_ADC_Start+0x18c>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002502:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002516:	d106      	bne.n	8002526 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f023 0206 	bic.w	r2, r3, #6
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
 8002524:	e002      	b.n	800252c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800253c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800253e:	4b2f      	ldr	r3, [pc, #188]	; (80025fc <HAL_ADC_Start+0x190>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d143      	bne.n	80025e0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	e03a      	b.n	80025e0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a24      	ldr	r2, [pc, #144]	; (8002600 <HAL_ADC_Start+0x194>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d10e      	bne.n	8002592 <HAL_ADC_Start+0x126>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d107      	bne.n	8002592 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002590:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002592:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_ADC_Start+0x190>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d120      	bne.n	80025e0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_ADC_Start+0x198>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d11b      	bne.n	80025e0 <HAL_ADC_Start+0x174>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d114      	bne.n	80025e0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	e00b      	b.n	80025e0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f043 0210 	orr.w	r2, r3, #16
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	f043 0201 	orr.w	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000000 	.word	0x20000000
 80025f4:	431bde83 	.word	0x431bde83
 80025f8:	fffff8fe 	.word	0xfffff8fe
 80025fc:	40012300 	.word	0x40012300
 8002600:	40012000 	.word	0x40012000
 8002604:	40012200 	.word	0x40012200

08002608 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_ADC_Stop+0x16>
 800261a:	2302      	movs	r3, #2
 800261c:	e01f      	b.n	800265e <HAL_ADC_Stop+0x56>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d107      	bne.n	8002654 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <HAL_ADC_Stop+0x64>)
 800264a:	4013      	ands	r3, r2
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	ffffeefe 	.word	0xffffeefe

08002670 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268c:	d113      	bne.n	80026b6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800269c:	d10b      	bne.n	80026b6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f043 0220 	orr.w	r2, r3, #32
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e063      	b.n	800277e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80026b6:	f7ff fe1d 	bl	80022f4 <HAL_GetTick>
 80026ba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026bc:	e021      	b.n	8002702 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d01d      	beq.n	8002702 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <HAL_ADC_PollForConversion+0x6c>
 80026cc:	f7ff fe12 	bl	80022f4 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d212      	bcs.n	8002702 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d00b      	beq.n	8002702 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f043 0204 	orr.w	r2, r3, #4
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e03d      	b.n	800277e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b02      	cmp	r3, #2
 800270e:	d1d6      	bne.n	80026be <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0212 	mvn.w	r2, #18
 8002718:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d123      	bne.n	800277c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002738:	2b00      	cmp	r3, #0
 800273a:	d11f      	bne.n	800277c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002754:	2b00      	cmp	r3, #0
 8002756:	d111      	bne.n	800277c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x1c>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e12a      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x272>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b09      	cmp	r3, #9
 80027ca:	d93a      	bls.n	8002842 <HAL_ADC_ConfigChannel+0xa2>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027d4:	d035      	beq.n	8002842 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68d9      	ldr	r1, [r3, #12]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	461a      	mov	r2, r3
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	3b1e      	subs	r3, #30
 80027ec:	2207      	movs	r2, #7
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	400a      	ands	r2, r1
 80027fa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a87      	ldr	r2, [pc, #540]	; (8002a20 <HAL_ADC_ConfigChannel+0x280>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10a      	bne.n	800281c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68d9      	ldr	r1, [r3, #12]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	061a      	lsls	r2, r3, #24
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800281a:	e035      	b.n	8002888 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68d9      	ldr	r1, [r3, #12]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	4618      	mov	r0, r3
 800282e:	4603      	mov	r3, r0
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4403      	add	r3, r0
 8002834:	3b1e      	subs	r3, #30
 8002836:	409a      	lsls	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002840:	e022      	b.n	8002888 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6919      	ldr	r1, [r3, #16]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	2207      	movs	r2, #7
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43da      	mvns	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	400a      	ands	r2, r1
 8002864:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6919      	ldr	r1, [r3, #16]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	4618      	mov	r0, r3
 8002878:	4603      	mov	r3, r0
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4403      	add	r3, r0
 800287e:	409a      	lsls	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b06      	cmp	r3, #6
 800288e:	d824      	bhi.n	80028da <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	3b05      	subs	r3, #5
 80028a2:	221f      	movs	r2, #31
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43da      	mvns	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	400a      	ands	r2, r1
 80028b0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	3b05      	subs	r3, #5
 80028cc:	fa00 f203 	lsl.w	r2, r0, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	635a      	str	r2, [r3, #52]	; 0x34
 80028d8:	e04c      	b.n	8002974 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	d824      	bhi.n	800292c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	3b23      	subs	r3, #35	; 0x23
 80028f4:	221f      	movs	r2, #31
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	400a      	ands	r2, r1
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	4618      	mov	r0, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	3b23      	subs	r3, #35	; 0x23
 800291e:	fa00 f203 	lsl.w	r2, r0, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
 800292a:	e023      	b.n	8002974 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	3b41      	subs	r3, #65	; 0x41
 800293e:	221f      	movs	r2, #31
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43da      	mvns	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	400a      	ands	r2, r1
 800294c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	4618      	mov	r0, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	3b41      	subs	r3, #65	; 0x41
 8002968:	fa00 f203 	lsl.w	r2, r0, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a2a      	ldr	r2, [pc, #168]	; (8002a24 <HAL_ADC_ConfigChannel+0x284>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d10a      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x1f4>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002986:	d105      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_ADC_ConfigChannel+0x288>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a26      	ldr	r2, [pc, #152]	; (8002a28 <HAL_ADC_ConfigChannel+0x288>)
 800298e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002992:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <HAL_ADC_ConfigChannel+0x284>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d109      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x212>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b12      	cmp	r3, #18
 80029a4:	d105      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_ADC_ConfigChannel+0x288>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <HAL_ADC_ConfigChannel+0x288>)
 80029ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029b0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <HAL_ADC_ConfigChannel+0x284>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d125      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x268>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <HAL_ADC_ConfigChannel+0x280>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d003      	beq.n	80029ce <HAL_ADC_ConfigChannel+0x22e>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b11      	cmp	r3, #17
 80029cc:	d11c      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80029ce:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_ADC_ConfigChannel+0x288>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <HAL_ADC_ConfigChannel+0x288>)
 80029d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029d8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <HAL_ADC_ConfigChannel+0x280>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d111      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80029e4:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_ADC_ConfigChannel+0x28c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <HAL_ADC_ConfigChannel+0x290>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	0c9a      	lsrs	r2, r3, #18
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029fa:	e002      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f9      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	10000012 	.word	0x10000012
 8002a24:	40012000 	.word	0x40012000
 8002a28:	40012300 	.word	0x40012300
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	431bde83 	.word	0x431bde83

08002a34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a3c:	4b78      	ldr	r3, [pc, #480]	; (8002c20 <ADC_Init+0x1ec>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a77      	ldr	r2, [pc, #476]	; (8002c20 <ADC_Init+0x1ec>)
 8002a42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a46:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a48:	4b75      	ldr	r3, [pc, #468]	; (8002c20 <ADC_Init+0x1ec>)
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4973      	ldr	r1, [pc, #460]	; (8002c20 <ADC_Init+0x1ec>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	021a      	lsls	r2, r3, #8
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6899      	ldr	r1, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <ADC_Init+0x1f0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d022      	beq.n	8002b0e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ad6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6899      	ldr	r1, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	e00f      	b.n	8002b2e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0202 	bic.w	r2, r2, #2
 8002b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	005a      	lsls	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01b      	beq.n	8002b94 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6859      	ldr	r1, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	3b01      	subs	r3, #1
 8002b88:	035a      	lsls	r2, r3, #13
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	e007      	b.n	8002ba4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	051a      	lsls	r2, r3, #20
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6899      	ldr	r1, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002be6:	025a      	lsls	r2, r3, #9
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	029a      	lsls	r2, r3, #10
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40012300 	.word	0x40012300
 8002c24:	0f000001 	.word	0x0f000001

08002c28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0ed      	b.n	8002e16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe fc62 	bl	8001510 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0202 	bic.w	r2, r2, #2
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c5c:	f7ff fb4a 	bl	80022f4 <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c62:	e012      	b.n	8002c8a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c64:	f7ff fb46 	bl	80022f4 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b0a      	cmp	r3, #10
 8002c70:	d90b      	bls.n	8002c8a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2205      	movs	r2, #5
 8002c82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0c5      	b.n	8002e16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e5      	bne.n	8002c64 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca8:	f7ff fb24 	bl	80022f4 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cae:	e012      	b.n	8002cd6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cb0:	f7ff fb20 	bl	80022f4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b0a      	cmp	r3, #10
 8002cbc:	d90b      	bls.n	8002cd6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2205      	movs	r2, #5
 8002cce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e09f      	b.n	8002e16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0e5      	beq.n	8002cb0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	7e1b      	ldrb	r3, [r3, #24]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d108      	bne.n	8002cfe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	e007      	b.n	8002d0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7e5b      	ldrb	r3, [r3, #25]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d108      	bne.n	8002d28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e007      	b.n	8002d38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7e9b      	ldrb	r3, [r3, #26]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d108      	bne.n	8002d52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0220 	orr.w	r2, r2, #32
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	e007      	b.n	8002d62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0220 	bic.w	r2, r2, #32
 8002d60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	7edb      	ldrb	r3, [r3, #27]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d108      	bne.n	8002d7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0210 	bic.w	r2, r2, #16
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e007      	b.n	8002d8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0210 	orr.w	r2, r2, #16
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	7f1b      	ldrb	r3, [r3, #28]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d108      	bne.n	8002da6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0208 	orr.w	r2, r2, #8
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e007      	b.n	8002db6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0208 	bic.w	r2, r2, #8
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7f5b      	ldrb	r3, [r3, #29]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d108      	bne.n	8002dd0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0204 	orr.w	r2, r2, #4
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e007      	b.n	8002de0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0204 	bic.w	r2, r2, #4
 8002dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	ea42 0103 	orr.w	r1, r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	1e5a      	subs	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e36:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d003      	beq.n	8002e46 <HAL_CAN_ConfigFilter+0x26>
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	f040 80c7 	bne.w	8002fd4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a69      	ldr	r2, [pc, #420]	; (8002ff0 <HAL_CAN_ConfigFilter+0x1d0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d001      	beq.n	8002e54 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002e50:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002e52:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e5a:	f043 0201 	orr.w	r2, r3, #1
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	4a63      	ldr	r2, [pc, #396]	; (8002ff4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d111      	bne.n	8002e90 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e72:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	2201      	movs	r2, #1
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	401a      	ands	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d123      	bne.n	8002f02 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002edc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	3248      	adds	r2, #72	; 0x48
 8002ee2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ef6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ef8:	6979      	ldr	r1, [r7, #20]
 8002efa:	3348      	adds	r3, #72	; 0x48
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	440b      	add	r3, r1
 8002f00:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d122      	bne.n	8002f50 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f2a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	3248      	adds	r2, #72	; 0x48
 8002f30:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f44:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f46:	6979      	ldr	r1, [r7, #20]
 8002f48:	3348      	adds	r3, #72	; 0x48
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	401a      	ands	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002f6a:	e007      	b.n	8002f7c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	401a      	ands	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002f96:	e007      	b.n	8002fa8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d107      	bne.n	8002fc0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fc6:	f023 0201 	bic.w	r2, r3, #1
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e006      	b.n	8002fe2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40003400 	.word	0x40003400
 8002ff4:	40006400 	.word	0x40006400

08002ff8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d12e      	bne.n	800306a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003024:	f7ff f966 	bl	80022f4 <HAL_GetTick>
 8003028:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800302a:	e012      	b.n	8003052 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800302c:	f7ff f962 	bl	80022f4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b0a      	cmp	r3, #10
 8003038:	d90b      	bls.n	8003052 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2205      	movs	r2, #5
 800304a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e012      	b.n	8003078 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e5      	bne.n	800302c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e006      	b.n	8003078 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
  }
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003094:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800309e:	7ffb      	ldrb	r3, [r7, #31]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d003      	beq.n	80030ac <HAL_CAN_AddTxMessage+0x2c>
 80030a4:	7ffb      	ldrb	r3, [r7, #31]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	f040 80b8 	bne.w	800321c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80a0 	beq.w	800320c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	0e1b      	lsrs	r3, r3, #24
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d907      	bls.n	80030ec <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e09e      	b.n	800322a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80030ec:	2201      	movs	r2, #1
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	409a      	lsls	r2, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10d      	bne.n	800311a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003108:	68f9      	ldr	r1, [r7, #12]
 800310a:	6809      	ldr	r1, [r1, #0]
 800310c:	431a      	orrs	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	3318      	adds	r3, #24
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	440b      	add	r3, r1
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e00f      	b.n	800313a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003124:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800312a:	68f9      	ldr	r1, [r7, #12]
 800312c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800312e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	3318      	adds	r3, #24
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	440b      	add	r3, r1
 8003138:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6819      	ldr	r1, [r3, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	3318      	adds	r3, #24
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	440b      	add	r3, r1
 800314a:	3304      	adds	r3, #4
 800314c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	7d1b      	ldrb	r3, [r3, #20]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d111      	bne.n	800317a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3318      	adds	r3, #24
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	4413      	add	r3, r2
 8003162:	3304      	adds	r3, #4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	6811      	ldr	r1, [r2, #0]
 800316a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	3318      	adds	r3, #24
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	440b      	add	r3, r1
 8003176:	3304      	adds	r3, #4
 8003178:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3307      	adds	r3, #7
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	061a      	lsls	r2, r3, #24
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3306      	adds	r3, #6
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3305      	adds	r3, #5
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	4313      	orrs	r3, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	3204      	adds	r2, #4
 800319a:	7812      	ldrb	r2, [r2, #0]
 800319c:	4610      	mov	r0, r2
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	6811      	ldr	r1, [r2, #0]
 80031a2:	ea43 0200 	orr.w	r2, r3, r0
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	440b      	add	r3, r1
 80031ac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80031b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3303      	adds	r3, #3
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	061a      	lsls	r2, r3, #24
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3302      	adds	r3, #2
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3301      	adds	r3, #1
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	4313      	orrs	r3, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	7812      	ldrb	r2, [r2, #0]
 80031d2:	4610      	mov	r0, r2
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	6811      	ldr	r1, [r2, #0]
 80031d8:	ea43 0200 	orr.w	r2, r3, r0
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	440b      	add	r3, r1
 80031e2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80031e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	3318      	adds	r3, #24
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	4413      	add	r3, r2
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	6811      	ldr	r1, [r2, #0]
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	3318      	adds	r3, #24
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	440b      	add	r3, r1
 8003206:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e00e      	b.n	800322a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e006      	b.n	800322a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003236:	b480      	push	{r7}
 8003238:	b087      	sub	sp, #28
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800324a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d003      	beq.n	800325a <HAL_CAN_GetRxMessage+0x24>
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b02      	cmp	r3, #2
 8003256:	f040 80f3 	bne.w	8003440 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10e      	bne.n	800327e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0e7      	b.n	800344e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d107      	bne.n	800329c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0d8      	b.n	800344e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	331b      	adds	r3, #27
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	4413      	add	r3, r2
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0204 	and.w	r2, r3, #4
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10c      	bne.n	80032d4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	331b      	adds	r3, #27
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	4413      	add	r3, r2
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0d5b      	lsrs	r3, r3, #21
 80032ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e00b      	b.n	80032ec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	331b      	adds	r3, #27
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	4413      	add	r3, r2
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	08db      	lsrs	r3, r3, #3
 80032e4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	331b      	adds	r3, #27
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	4413      	add	r3, r2
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0202 	and.w	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	331b      	adds	r3, #27
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	4413      	add	r3, r2
 800330e:	3304      	adds	r3, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 020f 	and.w	r2, r3, #15
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	331b      	adds	r3, #27
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	4413      	add	r3, r2
 8003326:	3304      	adds	r3, #4
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	b2da      	uxtb	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	331b      	adds	r3, #27
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	4413      	add	r3, r2
 800333e:	3304      	adds	r3, #4
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	0c1b      	lsrs	r3, r3, #16
 8003344:	b29a      	uxth	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	4413      	add	r3, r2
 8003354:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	b2da      	uxtb	r2, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	4413      	add	r3, r2
 800336a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0a1a      	lsrs	r2, r3, #8
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	4413      	add	r3, r2
 8003384:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0c1a      	lsrs	r2, r3, #16
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	3302      	adds	r3, #2
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	4413      	add	r3, r2
 800339e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	0e1a      	lsrs	r2, r3, #24
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	3303      	adds	r3, #3
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	3304      	adds	r3, #4
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0a1a      	lsrs	r2, r3, #8
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	3305      	adds	r3, #5
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0c1a      	lsrs	r2, r3, #16
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	3306      	adds	r3, #6
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	4413      	add	r3, r2
 8003404:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	0e1a      	lsrs	r2, r3, #24
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	3307      	adds	r3, #7
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d108      	bne.n	800342c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0220 	orr.w	r2, r2, #32
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	e007      	b.n	800343c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0220 	orr.w	r2, r2, #32
 800343a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e006      	b.n	800344e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
  }
}
 800344e:	4618      	mov	r0, r3
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800345a:	b480      	push	{r7}
 800345c:	b085      	sub	sp, #20
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800346a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d002      	beq.n	8003478 <HAL_CAN_ActivateNotification+0x1e>
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d109      	bne.n	800348c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6959      	ldr	r1, [r3, #20]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e006      	b.n	800349a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
  }
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08a      	sub	sp, #40	; 0x28
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d07c      	beq.n	80035e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d023      	beq.n	800353e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2201      	movs	r2, #1
 80034fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f983 	bl	8003814 <HAL_CAN_TxMailbox0CompleteCallback>
 800350e:	e016      	b.n	800353e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
 8003522:	e00c      	b.n	800353e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d004      	beq.n	8003538 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
 8003536:	e002      	b.n	800353e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f989 	bl	8003850 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d024      	beq.n	8003592 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003550:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f963 	bl	8003828 <HAL_CAN_TxMailbox1CompleteCallback>
 8003562:	e016      	b.n	8003592 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356a:	2b00      	cmp	r3, #0
 800356c:	d004      	beq.n	8003578 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
 8003576:	e00c      	b.n	8003592 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357e:	2b00      	cmp	r3, #0
 8003580:	d004      	beq.n	800358c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
 800358a:	e002      	b.n	8003592 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f969 	bl	8003864 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d024      	beq.n	80035e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f943 	bl	800383c <HAL_CAN_TxMailbox2CompleteCallback>
 80035b6:	e016      	b.n	80035e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d004      	beq.n	80035cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	e00c      	b.n	80035e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d004      	beq.n	80035e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	e002      	b.n	80035e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f949 	bl	8003878 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00c      	beq.n	800360a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003600:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2210      	movs	r2, #16
 8003608:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00b      	beq.n	800362c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d006      	beq.n	800362c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2208      	movs	r2, #8
 8003624:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f930 	bl	800388c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7fe fc47 	bl	8001ed8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00c      	beq.n	800366e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003664:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2210      	movs	r2, #16
 800366c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	f003 0320 	and.w	r3, r3, #32
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00b      	beq.n	8003690 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d006      	beq.n	8003690 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2208      	movs	r2, #8
 8003688:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f912 	bl	80038b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f8f9 	bl	80038a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00b      	beq.n	80036d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2210      	movs	r2, #16
 80036c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f8fc 	bl	80038c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d006      	beq.n	80036f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2208      	movs	r2, #8
 80036ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f8f5 	bl	80038dc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d07b      	beq.n	80037f4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d072      	beq.n	80037ec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	f043 0302 	orr.w	r3, r3, #2
 800373c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	f043 0304 	orr.w	r3, r3, #4
 8003758:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003760:	2b00      	cmp	r3, #0
 8003762:	d043      	beq.n	80037ec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03e      	beq.n	80037ec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003774:	2b60      	cmp	r3, #96	; 0x60
 8003776:	d02b      	beq.n	80037d0 <HAL_CAN_IRQHandler+0x32a>
 8003778:	2b60      	cmp	r3, #96	; 0x60
 800377a:	d82e      	bhi.n	80037da <HAL_CAN_IRQHandler+0x334>
 800377c:	2b50      	cmp	r3, #80	; 0x50
 800377e:	d022      	beq.n	80037c6 <HAL_CAN_IRQHandler+0x320>
 8003780:	2b50      	cmp	r3, #80	; 0x50
 8003782:	d82a      	bhi.n	80037da <HAL_CAN_IRQHandler+0x334>
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d019      	beq.n	80037bc <HAL_CAN_IRQHandler+0x316>
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d826      	bhi.n	80037da <HAL_CAN_IRQHandler+0x334>
 800378c:	2b30      	cmp	r3, #48	; 0x30
 800378e:	d010      	beq.n	80037b2 <HAL_CAN_IRQHandler+0x30c>
 8003790:	2b30      	cmp	r3, #48	; 0x30
 8003792:	d822      	bhi.n	80037da <HAL_CAN_IRQHandler+0x334>
 8003794:	2b10      	cmp	r3, #16
 8003796:	d002      	beq.n	800379e <HAL_CAN_IRQHandler+0x2f8>
 8003798:	2b20      	cmp	r3, #32
 800379a:	d005      	beq.n	80037a8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800379c:	e01d      	b.n	80037da <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	f043 0308 	orr.w	r3, r3, #8
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037a6:	e019      	b.n	80037dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	f043 0310 	orr.w	r3, r3, #16
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037b0:	e014      	b.n	80037dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	f043 0320 	orr.w	r3, r3, #32
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037ba:	e00f      	b.n	80037dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037c4:	e00a      	b.n	80037dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037ce:	e005      	b.n	80037dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037d8:	e000      	b.n	80037dc <HAL_CAN_IRQHandler+0x336>
            break;
 80037da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2204      	movs	r2, #4
 80037f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f872 	bl	80038f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800380c:	bf00      	nop
 800380e:	3728      	adds	r7, #40	; 0x28
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <__NVIC_SetPriorityGrouping+0x40>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003920:	4013      	ands	r3, r2
 8003922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <__NVIC_SetPriorityGrouping+0x44>)
 800392e:	4313      	orrs	r3, r2
 8003930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003932:	4a04      	ldr	r2, [pc, #16]	; (8003944 <__NVIC_SetPriorityGrouping+0x40>)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	60d3      	str	r3, [r2, #12]
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000ed00 	.word	0xe000ed00
 8003948:	05fa0000 	.word	0x05fa0000

0800394c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003950:	4b04      	ldr	r3, [pc, #16]	; (8003964 <__NVIC_GetPriorityGrouping+0x18>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	f003 0307 	and.w	r3, r3, #7
}
 800395a:	4618      	mov	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	2b00      	cmp	r3, #0
 8003978:	db0b      	blt.n	8003992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	f003 021f 	and.w	r2, r3, #31
 8003980:	4907      	ldr	r1, [pc, #28]	; (80039a0 <__NVIC_EnableIRQ+0x38>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2001      	movs	r0, #1
 800398a:	fa00 f202 	lsl.w	r2, r0, r2
 800398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	e000e100 	.word	0xe000e100

080039a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	db0a      	blt.n	80039ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	490c      	ldr	r1, [pc, #48]	; (80039f0 <__NVIC_SetPriority+0x4c>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	440b      	add	r3, r1
 80039c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039cc:	e00a      	b.n	80039e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4908      	ldr	r1, [pc, #32]	; (80039f4 <__NVIC_SetPriority+0x50>)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3b04      	subs	r3, #4
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	440b      	add	r3, r1
 80039e2:	761a      	strb	r2, [r3, #24]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000e100 	.word	0xe000e100
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f1c3 0307 	rsb	r3, r3, #7
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	bf28      	it	cs
 8003a16:	2304      	movcs	r3, #4
 8003a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d902      	bls.n	8003a28 <NVIC_EncodePriority+0x30>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3b03      	subs	r3, #3
 8003a26:	e000      	b.n	8003a2a <NVIC_EncodePriority+0x32>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a40:	f04f 31ff 	mov.w	r1, #4294967295
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	43d9      	mvns	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a50:	4313      	orrs	r3, r2
         );
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3724      	adds	r7, #36	; 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a70:	d301      	bcc.n	8003a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00f      	b.n	8003a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a76:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <SysTick_Config+0x40>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a7e:	210f      	movs	r1, #15
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
 8003a84:	f7ff ff8e 	bl	80039a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <SysTick_Config+0x40>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a8e:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <SysTick_Config+0x40>)
 8003a90:	2207      	movs	r2, #7
 8003a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	e000e010 	.word	0xe000e010

08003aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ff29 	bl	8003904 <__NVIC_SetPriorityGrouping>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003acc:	f7ff ff3e 	bl	800394c <__NVIC_GetPriorityGrouping>
 8003ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f7ff ff8e 	bl	80039f8 <NVIC_EncodePriority>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff5d 	bl	80039a4 <__NVIC_SetPriority>
}
 8003aea:	bf00      	nop
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ff31 	bl	8003968 <__NVIC_EnableIRQ>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff ffa2 	bl	8003a60 <SysTick_Config>
 8003b1c:	4603      	mov	r3, r0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b089      	sub	sp, #36	; 0x24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	e175      	b.n	8003e34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b48:	2201      	movs	r2, #1
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	f040 8164 	bne.w	8003e2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d00b      	beq.n	8003b86 <HAL_GPIO_Init+0x5e>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d007      	beq.n	8003b86 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b7a:	2b11      	cmp	r3, #17
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b12      	cmp	r3, #18
 8003b84:	d130      	bne.n	8003be8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	2203      	movs	r2, #3
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 0201 	and.w	r2, r3, #1
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x100>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b12      	cmp	r3, #18
 8003c26:	d123      	bne.n	8003c70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	08da      	lsrs	r2, r3, #3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3208      	adds	r2, #8
 8003c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	220f      	movs	r2, #15
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	08da      	lsrs	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3208      	adds	r2, #8
 8003c6a:	69b9      	ldr	r1, [r7, #24]
 8003c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4013      	ands	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0203 	and.w	r2, r3, #3
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80be 	beq.w	8003e2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb2:	4b66      	ldr	r3, [pc, #408]	; (8003e4c <HAL_GPIO_Init+0x324>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	4a65      	ldr	r2, [pc, #404]	; (8003e4c <HAL_GPIO_Init+0x324>)
 8003cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cbe:	4b63      	ldr	r3, [pc, #396]	; (8003e4c <HAL_GPIO_Init+0x324>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003cca:	4a61      	ldr	r2, [pc, #388]	; (8003e50 <HAL_GPIO_Init+0x328>)
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	089b      	lsrs	r3, r3, #2
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	220f      	movs	r2, #15
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a58      	ldr	r2, [pc, #352]	; (8003e54 <HAL_GPIO_Init+0x32c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d037      	beq.n	8003d66 <HAL_GPIO_Init+0x23e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a57      	ldr	r2, [pc, #348]	; (8003e58 <HAL_GPIO_Init+0x330>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d031      	beq.n	8003d62 <HAL_GPIO_Init+0x23a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a56      	ldr	r2, [pc, #344]	; (8003e5c <HAL_GPIO_Init+0x334>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d02b      	beq.n	8003d5e <HAL_GPIO_Init+0x236>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a55      	ldr	r2, [pc, #340]	; (8003e60 <HAL_GPIO_Init+0x338>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d025      	beq.n	8003d5a <HAL_GPIO_Init+0x232>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a54      	ldr	r2, [pc, #336]	; (8003e64 <HAL_GPIO_Init+0x33c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01f      	beq.n	8003d56 <HAL_GPIO_Init+0x22e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a53      	ldr	r2, [pc, #332]	; (8003e68 <HAL_GPIO_Init+0x340>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d019      	beq.n	8003d52 <HAL_GPIO_Init+0x22a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <HAL_GPIO_Init+0x344>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <HAL_GPIO_Init+0x226>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a51      	ldr	r2, [pc, #324]	; (8003e70 <HAL_GPIO_Init+0x348>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00d      	beq.n	8003d4a <HAL_GPIO_Init+0x222>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a50      	ldr	r2, [pc, #320]	; (8003e74 <HAL_GPIO_Init+0x34c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <HAL_GPIO_Init+0x21e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a4f      	ldr	r2, [pc, #316]	; (8003e78 <HAL_GPIO_Init+0x350>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d101      	bne.n	8003d42 <HAL_GPIO_Init+0x21a>
 8003d3e:	2309      	movs	r3, #9
 8003d40:	e012      	b.n	8003d68 <HAL_GPIO_Init+0x240>
 8003d42:	230a      	movs	r3, #10
 8003d44:	e010      	b.n	8003d68 <HAL_GPIO_Init+0x240>
 8003d46:	2308      	movs	r3, #8
 8003d48:	e00e      	b.n	8003d68 <HAL_GPIO_Init+0x240>
 8003d4a:	2307      	movs	r3, #7
 8003d4c:	e00c      	b.n	8003d68 <HAL_GPIO_Init+0x240>
 8003d4e:	2306      	movs	r3, #6
 8003d50:	e00a      	b.n	8003d68 <HAL_GPIO_Init+0x240>
 8003d52:	2305      	movs	r3, #5
 8003d54:	e008      	b.n	8003d68 <HAL_GPIO_Init+0x240>
 8003d56:	2304      	movs	r3, #4
 8003d58:	e006      	b.n	8003d68 <HAL_GPIO_Init+0x240>
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e004      	b.n	8003d68 <HAL_GPIO_Init+0x240>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e002      	b.n	8003d68 <HAL_GPIO_Init+0x240>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_GPIO_Init+0x240>
 8003d66:	2300      	movs	r3, #0
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	f002 0203 	and.w	r2, r2, #3
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	4093      	lsls	r3, r2
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d78:	4935      	ldr	r1, [pc, #212]	; (8003e50 <HAL_GPIO_Init+0x328>)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	3302      	adds	r3, #2
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d86:	4b3d      	ldr	r3, [pc, #244]	; (8003e7c <HAL_GPIO_Init+0x354>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003daa:	4a34      	ldr	r2, [pc, #208]	; (8003e7c <HAL_GPIO_Init+0x354>)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003db0:	4b32      	ldr	r3, [pc, #200]	; (8003e7c <HAL_GPIO_Init+0x354>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dd4:	4a29      	ldr	r2, [pc, #164]	; (8003e7c <HAL_GPIO_Init+0x354>)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dda:	4b28      	ldr	r3, [pc, #160]	; (8003e7c <HAL_GPIO_Init+0x354>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dfe:	4a1f      	ldr	r2, [pc, #124]	; (8003e7c <HAL_GPIO_Init+0x354>)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <HAL_GPIO_Init+0x354>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e28:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <HAL_GPIO_Init+0x354>)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3301      	adds	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	f67f ae86 	bls.w	8003b48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	3724      	adds	r7, #36	; 0x24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40013800 	.word	0x40013800
 8003e54:	40020000 	.word	0x40020000
 8003e58:	40020400 	.word	0x40020400
 8003e5c:	40020800 	.word	0x40020800
 8003e60:	40020c00 	.word	0x40020c00
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40021400 	.word	0x40021400
 8003e6c:	40021800 	.word	0x40021800
 8003e70:	40021c00 	.word	0x40021c00
 8003e74:	40022000 	.word	0x40022000
 8003e78:	40022400 	.word	0x40022400
 8003e7c:	40013c00 	.word	0x40013c00

08003e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
 8003e9c:	e001      	b.n	8003ea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	807b      	strh	r3, [r7, #2]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ec0:	787b      	ldrb	r3, [r7, #1]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ec6:	887a      	ldrh	r2, [r7, #2]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ecc:	e003      	b.n	8003ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ece:	887b      	ldrh	r3, [r7, #2]
 8003ed0:	041a      	lsls	r2, r3, #16
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	619a      	str	r2, [r3, #24]
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eee:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8003efa:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f06:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f12:	f7fe f9ef 	bl	80022f4 <HAL_GetTick>
 8003f16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f18:	e009      	b.n	8003f2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f1a:	f7fe f9eb 	bl	80022f4 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f28:	d901      	bls.n	8003f2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e022      	b.n	8003f74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f2e:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3a:	d1ee      	bne.n	8003f1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0f      	ldr	r2, [pc, #60]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f48:	f7fe f9d4 	bl	80022f4 <HAL_GetTick>
 8003f4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f4e:	e009      	b.n	8003f64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f50:	f7fe f9d0 	bl	80022f4 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f5e:	d901      	bls.n	8003f64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e007      	b.n	8003f74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f70:	d1ee      	bne.n	8003f50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40007000 	.word	0x40007000

08003f84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e29b      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8087 	beq.w	80040b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fa8:	4b96      	ldr	r3, [pc, #600]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d00c      	beq.n	8003fce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb4:	4b93      	ldr	r3, [pc, #588]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d112      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x62>
 8003fc0:	4b90      	ldr	r3, [pc, #576]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fcc:	d10b      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fce:	4b8d      	ldr	r3, [pc, #564]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d06c      	beq.n	80040b4 <HAL_RCC_OscConfig+0x130>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d168      	bne.n	80040b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e275      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fee:	d106      	bne.n	8003ffe <HAL_RCC_OscConfig+0x7a>
 8003ff0:	4b84      	ldr	r3, [pc, #528]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a83      	ldr	r2, [pc, #524]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	e02e      	b.n	800405c <HAL_RCC_OscConfig+0xd8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10c      	bne.n	8004020 <HAL_RCC_OscConfig+0x9c>
 8004006:	4b7f      	ldr	r3, [pc, #508]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a7e      	ldr	r2, [pc, #504]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800400c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	4b7c      	ldr	r3, [pc, #496]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a7b      	ldr	r2, [pc, #492]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e01d      	b.n	800405c <HAL_RCC_OscConfig+0xd8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0xc0>
 800402a:	4b76      	ldr	r3, [pc, #472]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a75      	ldr	r2, [pc, #468]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	4b73      	ldr	r3, [pc, #460]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a72      	ldr	r2, [pc, #456]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0xd8>
 8004044:	4b6f      	ldr	r3, [pc, #444]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a6e      	ldr	r2, [pc, #440]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800404a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	4b6c      	ldr	r3, [pc, #432]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a6b      	ldr	r2, [pc, #428]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d013      	beq.n	800408c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fe f946 	bl	80022f4 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800406c:	f7fe f942 	bl	80022f4 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	; 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e229      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407e:	4b61      	ldr	r3, [pc, #388]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0xe8>
 800408a:	e014      	b.n	80040b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fe f932 	bl	80022f4 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004094:	f7fe f92e 	bl	80022f4 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e215      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a6:	4b57      	ldr	r3, [pc, #348]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x110>
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d069      	beq.n	8004196 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040c2:	4b50      	ldr	r3, [pc, #320]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00b      	beq.n	80040e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ce:	4b4d      	ldr	r3, [pc, #308]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d11c      	bne.n	8004114 <HAL_RCC_OscConfig+0x190>
 80040da:	4b4a      	ldr	r3, [pc, #296]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d116      	bne.n	8004114 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	4b47      	ldr	r3, [pc, #284]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_RCC_OscConfig+0x17a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e1e9      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fe:	4b41      	ldr	r3, [pc, #260]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	493d      	ldr	r1, [pc, #244]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004112:	e040      	b.n	8004196 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d023      	beq.n	8004164 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800411c:	4b39      	ldr	r3, [pc, #228]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a38      	ldr	r2, [pc, #224]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fe f8e4 	bl	80022f4 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004130:	f7fe f8e0 	bl	80022f4 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1c7      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	4b30      	ldr	r3, [pc, #192]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414e:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4929      	ldr	r1, [pc, #164]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
 8004162:	e018      	b.n	8004196 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004164:	4b27      	ldr	r3, [pc, #156]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a26      	ldr	r2, [pc, #152]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fe f8c0 	bl	80022f4 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004178:	f7fe f8bc 	bl	80022f4 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e1a3      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418a:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d038      	beq.n	8004214 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d019      	beq.n	80041de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041aa:	4b16      	ldr	r3, [pc, #88]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80041ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ae:	4a15      	ldr	r2, [pc, #84]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b6:	f7fe f89d 	bl	80022f4 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041be:	f7fe f899 	bl	80022f4 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e180      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80041d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0f0      	beq.n	80041be <HAL_RCC_OscConfig+0x23a>
 80041dc:	e01a      	b.n	8004214 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80041e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <HAL_RCC_OscConfig+0x280>)
 80041e4:	f023 0301 	bic.w	r3, r3, #1
 80041e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ea:	f7fe f883 	bl	80022f4 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f2:	f7fe f87f 	bl	80022f4 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d903      	bls.n	8004208 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e166      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
 8004204:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	4b92      	ldr	r3, [pc, #584]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 800420a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1ee      	bne.n	80041f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80a4 	beq.w	800436a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004222:	4b8c      	ldr	r3, [pc, #560]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10d      	bne.n	800424a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800422e:	4b89      	ldr	r3, [pc, #548]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	4a88      	ldr	r2, [pc, #544]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004238:	6413      	str	r3, [r2, #64]	; 0x40
 800423a:	4b86      	ldr	r3, [pc, #536]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004246:	2301      	movs	r3, #1
 8004248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424a:	4b83      	ldr	r3, [pc, #524]	; (8004458 <HAL_RCC_OscConfig+0x4d4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d118      	bne.n	8004288 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004256:	4b80      	ldr	r3, [pc, #512]	; (8004458 <HAL_RCC_OscConfig+0x4d4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a7f      	ldr	r2, [pc, #508]	; (8004458 <HAL_RCC_OscConfig+0x4d4>)
 800425c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004262:	f7fe f847 	bl	80022f4 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426a:	f7fe f843 	bl	80022f4 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b64      	cmp	r3, #100	; 0x64
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e12a      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800427c:	4b76      	ldr	r3, [pc, #472]	; (8004458 <HAL_RCC_OscConfig+0x4d4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d106      	bne.n	800429e <HAL_RCC_OscConfig+0x31a>
 8004290:	4b70      	ldr	r3, [pc, #448]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	4a6f      	ldr	r2, [pc, #444]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6713      	str	r3, [r2, #112]	; 0x70
 800429c:	e02d      	b.n	80042fa <HAL_RCC_OscConfig+0x376>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x33c>
 80042a6:	4b6b      	ldr	r3, [pc, #428]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4a6a      	ldr	r2, [pc, #424]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6713      	str	r3, [r2, #112]	; 0x70
 80042b2:	4b68      	ldr	r3, [pc, #416]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	4a67      	ldr	r2, [pc, #412]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80042b8:	f023 0304 	bic.w	r3, r3, #4
 80042bc:	6713      	str	r3, [r2, #112]	; 0x70
 80042be:	e01c      	b.n	80042fa <HAL_RCC_OscConfig+0x376>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b05      	cmp	r3, #5
 80042c6:	d10c      	bne.n	80042e2 <HAL_RCC_OscConfig+0x35e>
 80042c8:	4b62      	ldr	r3, [pc, #392]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	4a61      	ldr	r2, [pc, #388]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80042ce:	f043 0304 	orr.w	r3, r3, #4
 80042d2:	6713      	str	r3, [r2, #112]	; 0x70
 80042d4:	4b5f      	ldr	r3, [pc, #380]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	4a5e      	ldr	r2, [pc, #376]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	6713      	str	r3, [r2, #112]	; 0x70
 80042e0:	e00b      	b.n	80042fa <HAL_RCC_OscConfig+0x376>
 80042e2:	4b5c      	ldr	r3, [pc, #368]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	4a5b      	ldr	r2, [pc, #364]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	6713      	str	r3, [r2, #112]	; 0x70
 80042ee:	4b59      	ldr	r3, [pc, #356]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	4a58      	ldr	r2, [pc, #352]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80042f4:	f023 0304 	bic.w	r3, r3, #4
 80042f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d015      	beq.n	800432e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004302:	f7fd fff7 	bl	80022f4 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fd fff3 	bl	80022f4 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	; 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e0d8      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004320:	4b4c      	ldr	r3, [pc, #304]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0ee      	beq.n	800430a <HAL_RCC_OscConfig+0x386>
 800432c:	e014      	b.n	8004358 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432e:	f7fd ffe1 	bl	80022f4 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004334:	e00a      	b.n	800434c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fd ffdd 	bl	80022f4 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f241 3288 	movw	r2, #5000	; 0x1388
 8004344:	4293      	cmp	r3, r2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e0c2      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434c:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ee      	bne.n	8004336 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435e:	4b3d      	ldr	r3, [pc, #244]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	4a3c      	ldr	r2, [pc, #240]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004368:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 80ae 	beq.w	80044d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004374:	4b37      	ldr	r3, [pc, #220]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b08      	cmp	r3, #8
 800437e:	d06d      	beq.n	800445c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d14b      	bne.n	8004420 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004388:	4b32      	ldr	r3, [pc, #200]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a31      	ldr	r2, [pc, #196]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 800438e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd ffae 	bl	80022f4 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439c:	f7fd ffaa 	bl	80022f4 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e091      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ae:	4b29      	ldr	r3, [pc, #164]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69da      	ldr	r2, [r3, #28]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	019b      	lsls	r3, r3, #6
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	3b01      	subs	r3, #1
 80043d4:	041b      	lsls	r3, r3, #16
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	061b      	lsls	r3, r3, #24
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	071b      	lsls	r3, r3, #28
 80043e6:	491b      	ldr	r1, [pc, #108]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a18      	ldr	r2, [pc, #96]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 80043f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fd ff7c 	bl	80022f4 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004400:	f7fd ff78 	bl	80022f4 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e05f      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x47c>
 800441e:	e057      	b.n	80044d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0b      	ldr	r2, [pc, #44]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800442a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fd ff62 	bl	80022f4 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004434:	f7fd ff5e 	bl	80022f4 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e045      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004446:	4b03      	ldr	r3, [pc, #12]	; (8004454 <HAL_RCC_OscConfig+0x4d0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x4b0>
 8004452:	e03d      	b.n	80044d0 <HAL_RCC_OscConfig+0x54c>
 8004454:	40023800 	.word	0x40023800
 8004458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800445c:	4b1f      	ldr	r3, [pc, #124]	; (80044dc <HAL_RCC_OscConfig+0x558>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d030      	beq.n	80044cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d129      	bne.n	80044cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d122      	bne.n	80044cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800448c:	4013      	ands	r3, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004492:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004494:	4293      	cmp	r3, r2
 8004496:	d119      	bne.n	80044cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	3b01      	subs	r3, #1
 80044a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d10f      	bne.n	80044cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d107      	bne.n	80044cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d001      	beq.n	80044d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800

080044e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0d0      	b.n	800469a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044f8:	4b6a      	ldr	r3, [pc, #424]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d910      	bls.n	8004528 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004506:	4b67      	ldr	r3, [pc, #412]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 020f 	bic.w	r2, r3, #15
 800450e:	4965      	ldr	r1, [pc, #404]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	4313      	orrs	r3, r2
 8004514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	4b63      	ldr	r3, [pc, #396]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0b8      	b.n	800469a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d020      	beq.n	8004576 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004540:	4b59      	ldr	r3, [pc, #356]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	4a58      	ldr	r2, [pc, #352]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800454a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004558:	4b53      	ldr	r3, [pc, #332]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a52      	ldr	r2, [pc, #328]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 800455e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004562:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004564:	4b50      	ldr	r3, [pc, #320]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	494d      	ldr	r1, [pc, #308]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004572:	4313      	orrs	r3, r2
 8004574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d040      	beq.n	8004604 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d107      	bne.n	800459a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	4b47      	ldr	r3, [pc, #284]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d115      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e07f      	b.n	800469a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a2:	4b41      	ldr	r3, [pc, #260]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e073      	b.n	800469a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b2:	4b3d      	ldr	r3, [pc, #244]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e06b      	b.n	800469a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c2:	4b39      	ldr	r3, [pc, #228]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f023 0203 	bic.w	r2, r3, #3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	4936      	ldr	r1, [pc, #216]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d4:	f7fd fe8e 	bl	80022f4 <HAL_GetTick>
 80045d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045dc:	f7fd fe8a 	bl	80022f4 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e053      	b.n	800469a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	4b2d      	ldr	r3, [pc, #180]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 020c 	and.w	r2, r3, #12
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	429a      	cmp	r2, r3
 8004602:	d1eb      	bne.n	80045dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004604:	4b27      	ldr	r3, [pc, #156]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d210      	bcs.n	8004634 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b24      	ldr	r3, [pc, #144]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 020f 	bic.w	r2, r3, #15
 800461a:	4922      	ldr	r1, [pc, #136]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	4313      	orrs	r3, r2
 8004620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e032      	b.n	800469a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004640:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4916      	ldr	r1, [pc, #88]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 800464e:	4313      	orrs	r3, r2
 8004650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	490e      	ldr	r1, [pc, #56]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 800466e:	4313      	orrs	r3, r2
 8004670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004672:	f000 f821 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8004676:	4602      	mov	r2, r0
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	490a      	ldr	r1, [pc, #40]	; (80046ac <HAL_RCC_ClockConfig+0x1cc>)
 8004684:	5ccb      	ldrb	r3, [r1, r3]
 8004686:	fa22 f303 	lsr.w	r3, r2, r3
 800468a:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <HAL_RCC_ClockConfig+0x1d0>)
 800468c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800468e:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7fd fdea 	bl	800226c <HAL_InitTick>

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023c00 	.word	0x40023c00
 80046a8:	40023800 	.word	0x40023800
 80046ac:	080066b4 	.word	0x080066b4
 80046b0:	20000000 	.word	0x20000000
 80046b4:	20000004 	.word	0x20000004

080046b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b8:	b5b0      	push	{r4, r5, r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046be:	2100      	movs	r1, #0
 80046c0:	6079      	str	r1, [r7, #4]
 80046c2:	2100      	movs	r1, #0
 80046c4:	60f9      	str	r1, [r7, #12]
 80046c6:	2100      	movs	r1, #0
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80046ca:	2100      	movs	r1, #0
 80046cc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ce:	4952      	ldr	r1, [pc, #328]	; (8004818 <HAL_RCC_GetSysClockFreq+0x160>)
 80046d0:	6889      	ldr	r1, [r1, #8]
 80046d2:	f001 010c 	and.w	r1, r1, #12
 80046d6:	2908      	cmp	r1, #8
 80046d8:	d00d      	beq.n	80046f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80046da:	2908      	cmp	r1, #8
 80046dc:	f200 8094 	bhi.w	8004808 <HAL_RCC_GetSysClockFreq+0x150>
 80046e0:	2900      	cmp	r1, #0
 80046e2:	d002      	beq.n	80046ea <HAL_RCC_GetSysClockFreq+0x32>
 80046e4:	2904      	cmp	r1, #4
 80046e6:	d003      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0x38>
 80046e8:	e08e      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046ea:	4b4c      	ldr	r3, [pc, #304]	; (800481c <HAL_RCC_GetSysClockFreq+0x164>)
 80046ec:	60bb      	str	r3, [r7, #8]
      break;
 80046ee:	e08e      	b.n	800480e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046f0:	4b4b      	ldr	r3, [pc, #300]	; (8004820 <HAL_RCC_GetSysClockFreq+0x168>)
 80046f2:	60bb      	str	r3, [r7, #8]
      break;
 80046f4:	e08b      	b.n	800480e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f6:	4948      	ldr	r1, [pc, #288]	; (8004818 <HAL_RCC_GetSysClockFreq+0x160>)
 80046f8:	6849      	ldr	r1, [r1, #4]
 80046fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80046fe:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004700:	4945      	ldr	r1, [pc, #276]	; (8004818 <HAL_RCC_GetSysClockFreq+0x160>)
 8004702:	6849      	ldr	r1, [r1, #4]
 8004704:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004708:	2900      	cmp	r1, #0
 800470a:	d024      	beq.n	8004756 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470c:	4942      	ldr	r1, [pc, #264]	; (8004818 <HAL_RCC_GetSysClockFreq+0x160>)
 800470e:	6849      	ldr	r1, [r1, #4]
 8004710:	0989      	lsrs	r1, r1, #6
 8004712:	4608      	mov	r0, r1
 8004714:	f04f 0100 	mov.w	r1, #0
 8004718:	f240 14ff 	movw	r4, #511	; 0x1ff
 800471c:	f04f 0500 	mov.w	r5, #0
 8004720:	ea00 0204 	and.w	r2, r0, r4
 8004724:	ea01 0305 	and.w	r3, r1, r5
 8004728:	493d      	ldr	r1, [pc, #244]	; (8004820 <HAL_RCC_GetSysClockFreq+0x168>)
 800472a:	fb01 f003 	mul.w	r0, r1, r3
 800472e:	2100      	movs	r1, #0
 8004730:	fb01 f102 	mul.w	r1, r1, r2
 8004734:	1844      	adds	r4, r0, r1
 8004736:	493a      	ldr	r1, [pc, #232]	; (8004820 <HAL_RCC_GetSysClockFreq+0x168>)
 8004738:	fba2 0101 	umull	r0, r1, r2, r1
 800473c:	1863      	adds	r3, r4, r1
 800473e:	4619      	mov	r1, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	461a      	mov	r2, r3
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	f7fb fd7e 	bl	8000248 <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4613      	mov	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	e04a      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004756:	4b30      	ldr	r3, [pc, #192]	; (8004818 <HAL_RCC_GetSysClockFreq+0x160>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	099b      	lsrs	r3, r3, #6
 800475c:	461a      	mov	r2, r3
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004766:	f04f 0100 	mov.w	r1, #0
 800476a:	ea02 0400 	and.w	r4, r2, r0
 800476e:	ea03 0501 	and.w	r5, r3, r1
 8004772:	4620      	mov	r0, r4
 8004774:	4629      	mov	r1, r5
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	014b      	lsls	r3, r1, #5
 8004780:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004784:	0142      	lsls	r2, r0, #5
 8004786:	4610      	mov	r0, r2
 8004788:	4619      	mov	r1, r3
 800478a:	1b00      	subs	r0, r0, r4
 800478c:	eb61 0105 	sbc.w	r1, r1, r5
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	018b      	lsls	r3, r1, #6
 800479a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800479e:	0182      	lsls	r2, r0, #6
 80047a0:	1a12      	subs	r2, r2, r0
 80047a2:	eb63 0301 	sbc.w	r3, r3, r1
 80047a6:	f04f 0000 	mov.w	r0, #0
 80047aa:	f04f 0100 	mov.w	r1, #0
 80047ae:	00d9      	lsls	r1, r3, #3
 80047b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047b4:	00d0      	lsls	r0, r2, #3
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	1912      	adds	r2, r2, r4
 80047bc:	eb45 0303 	adc.w	r3, r5, r3
 80047c0:	f04f 0000 	mov.w	r0, #0
 80047c4:	f04f 0100 	mov.w	r1, #0
 80047c8:	0299      	lsls	r1, r3, #10
 80047ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047ce:	0290      	lsls	r0, r2, #10
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	461a      	mov	r2, r3
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	f7fb fd32 	bl	8000248 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4613      	mov	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <HAL_RCC_GetSysClockFreq+0x160>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	3301      	adds	r3, #1
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	60bb      	str	r3, [r7, #8]
      break;
 8004806:	e002      	b.n	800480e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004808:	4b04      	ldr	r3, [pc, #16]	; (800481c <HAL_RCC_GetSysClockFreq+0x164>)
 800480a:	60bb      	str	r3, [r7, #8]
      break;
 800480c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800480e:	68bb      	ldr	r3, [r7, #8]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bdb0      	pop	{r4, r5, r7, pc}
 8004818:	40023800 	.word	0x40023800
 800481c:	00f42400 	.word	0x00f42400
 8004820:	017d7840 	.word	0x017d7840

08004824 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004828:	4b03      	ldr	r3, [pc, #12]	; (8004838 <HAL_RCC_GetHCLKFreq+0x14>)
 800482a:	681b      	ldr	r3, [r3, #0]
}
 800482c:	4618      	mov	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000000 	.word	0x20000000

0800483c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004840:	f7ff fff0 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	0a9b      	lsrs	r3, r3, #10
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4903      	ldr	r1, [pc, #12]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40023800 	.word	0x40023800
 8004860:	080066c4 	.word	0x080066c4

08004864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004868:	f7ff ffdc 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 800486c:	4602      	mov	r2, r0
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	0b5b      	lsrs	r3, r3, #13
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	4903      	ldr	r1, [pc, #12]	; (8004888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800487a:	5ccb      	ldrb	r3, [r1, r3]
 800487c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40023800 	.word	0x40023800
 8004888:	080066c4 	.word	0x080066c4

0800488c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d012      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048b4:	4b69      	ldr	r3, [pc, #420]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a68      	ldr	r2, [pc, #416]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048be:	6093      	str	r3, [r2, #8]
 80048c0:	4b66      	ldr	r3, [pc, #408]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c8:	4964      	ldr	r1, [pc, #400]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80048d6:	2301      	movs	r3, #1
 80048d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d017      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048e6:	4b5d      	ldr	r3, [pc, #372]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f4:	4959      	ldr	r1, [pc, #356]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004904:	d101      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004906:	2301      	movs	r3, #1
 8004908:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004912:	2301      	movs	r3, #1
 8004914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d017      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004922:	4b4e      	ldr	r3, [pc, #312]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004928:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	494a      	ldr	r1, [pc, #296]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004940:	d101      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004942:	2301      	movs	r3, #1
 8004944:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800494e:	2301      	movs	r3, #1
 8004950:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800495e:	2301      	movs	r3, #1
 8004960:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 808b 	beq.w	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004970:	4b3a      	ldr	r3, [pc, #232]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	4a39      	ldr	r2, [pc, #228]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497a:	6413      	str	r3, [r2, #64]	; 0x40
 800497c:	4b37      	ldr	r3, [pc, #220]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004988:	4b35      	ldr	r3, [pc, #212]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a34      	ldr	r2, [pc, #208]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800498e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004994:	f7fd fcae 	bl	80022f4 <HAL_GetTick>
 8004998:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800499c:	f7fd fcaa 	bl	80022f4 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	; 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e38f      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049ae:	4b2c      	ldr	r3, [pc, #176]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049ba:	4b28      	ldr	r3, [pc, #160]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d035      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d02e      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049d8:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049e2:	4b1e      	ldr	r3, [pc, #120]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	4a1d      	ldr	r2, [pc, #116]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049ee:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049fa:	4a18      	ldr	r2, [pc, #96]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a00:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d114      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd fc72 	bl	80022f4 <HAL_GetTick>
 8004a10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a12:	e00a      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a14:	f7fd fc6e 	bl	80022f4 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e351      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0ee      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a42:	d111      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a52:	400b      	ands	r3, r1
 8004a54:	4901      	ldr	r1, [pc, #4]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	40007000 	.word	0x40007000
 8004a64:	0ffffcff 	.word	0x0ffffcff
 8004a68:	4bb3      	ldr	r3, [pc, #716]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	4ab2      	ldr	r2, [pc, #712]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a72:	6093      	str	r3, [r2, #8]
 8004a74:	4bb0      	ldr	r3, [pc, #704]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a80:	49ad      	ldr	r1, [pc, #692]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d010      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a92:	4ba9      	ldr	r3, [pc, #676]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a98:	4aa7      	ldr	r2, [pc, #668]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004aa2:	4ba5      	ldr	r3, [pc, #660]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aa4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	49a2      	ldr	r1, [pc, #648]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ac0:	4b9d      	ldr	r3, [pc, #628]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ace:	499a      	ldr	r1, [pc, #616]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ae2:	4b95      	ldr	r3, [pc, #596]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004af0:	4991      	ldr	r1, [pc, #580]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b04:	4b8c      	ldr	r3, [pc, #560]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b12:	4989      	ldr	r1, [pc, #548]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b26:	4b84      	ldr	r3, [pc, #528]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	4980      	ldr	r1, [pc, #512]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b48:	4b7b      	ldr	r3, [pc, #492]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	f023 0203 	bic.w	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	4978      	ldr	r1, [pc, #480]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b6a:	4b73      	ldr	r3, [pc, #460]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b70:	f023 020c 	bic.w	r2, r3, #12
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b78:	496f      	ldr	r1, [pc, #444]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b8c:	4b6a      	ldr	r3, [pc, #424]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	4967      	ldr	r1, [pc, #412]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bae:	4b62      	ldr	r3, [pc, #392]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bbc:	495e      	ldr	r1, [pc, #376]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bd0:	4b59      	ldr	r3, [pc, #356]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	4956      	ldr	r1, [pc, #344]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bf2:	4b51      	ldr	r3, [pc, #324]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	494d      	ldr	r1, [pc, #308]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c14:	4b48      	ldr	r3, [pc, #288]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c22:	4945      	ldr	r1, [pc, #276]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c36:	4b40      	ldr	r3, [pc, #256]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c44:	493c      	ldr	r1, [pc, #240]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c58:	4b37      	ldr	r3, [pc, #220]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c66:	4934      	ldr	r1, [pc, #208]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d011      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c7a:	4b2f      	ldr	r3, [pc, #188]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c80:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c88:	492b      	ldr	r1, [pc, #172]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c98:	d101      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004caa:	2301      	movs	r3, #1
 8004cac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cba:	4b1f      	ldr	r3, [pc, #124]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc8:	491b      	ldr	r1, [pc, #108]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00b      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cdc:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cec:	4912      	ldr	r1, [pc, #72]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00b      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004d00:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d10:	4909      	ldr	r1, [pc, #36]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00f      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d24:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d34:	e002      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004d36:	bf00      	nop
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	4986      	ldr	r1, [pc, #536]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00b      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d50:	4b81      	ldr	r3, [pc, #516]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d60:	497d      	ldr	r1, [pc, #500]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d006      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 80d6 	beq.w	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d7c:	4b76      	ldr	r3, [pc, #472]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a75      	ldr	r2, [pc, #468]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d88:	f7fd fab4 	bl	80022f4 <HAL_GetTick>
 8004d8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d90:	f7fd fab0 	bl	80022f4 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	; 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e195      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004da2:	4b6d      	ldr	r3, [pc, #436]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d021      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d11d      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dc2:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dd0:	4b61      	ldr	r3, [pc, #388]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd6:	0e1b      	lsrs	r3, r3, #24
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	019a      	lsls	r2, r3, #6
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	041b      	lsls	r3, r3, #16
 8004de8:	431a      	orrs	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	061b      	lsls	r3, r3, #24
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	071b      	lsls	r3, r3, #28
 8004df6:	4958      	ldr	r1, [pc, #352]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d004      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d02e      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e28:	d129      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e2a:	4b4b      	ldr	r3, [pc, #300]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e30:	0c1b      	lsrs	r3, r3, #16
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e38:	4b47      	ldr	r3, [pc, #284]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3e:	0f1b      	lsrs	r3, r3, #28
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	019a      	lsls	r2, r3, #6
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	061b      	lsls	r3, r3, #24
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	071b      	lsls	r3, r3, #28
 8004e5e:	493e      	ldr	r1, [pc, #248]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e66:	4b3c      	ldr	r3, [pc, #240]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e6c:	f023 021f 	bic.w	r2, r3, #31
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	3b01      	subs	r3, #1
 8004e76:	4938      	ldr	r1, [pc, #224]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01d      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e8a:	4b33      	ldr	r3, [pc, #204]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e90:	0e1b      	lsrs	r3, r3, #24
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e98:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e9e:	0f1b      	lsrs	r3, r3, #28
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	019a      	lsls	r2, r3, #6
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	041b      	lsls	r3, r3, #16
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	061b      	lsls	r3, r3, #24
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	071b      	lsls	r3, r3, #28
 8004ebe:	4926      	ldr	r1, [pc, #152]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d011      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	019a      	lsls	r2, r3, #6
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	061b      	lsls	r3, r3, #24
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	071b      	lsls	r3, r3, #28
 8004eee:	491a      	ldr	r1, [pc, #104]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ef6:	4b18      	ldr	r3, [pc, #96]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a17      	ldr	r2, [pc, #92]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f02:	f7fd f9f7 	bl	80022f4 <HAL_GetTick>
 8004f06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f08:	e008      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f0a:	f7fd f9f3 	bl	80022f4 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b64      	cmp	r3, #100	; 0x64
 8004f16:	d901      	bls.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e0d8      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	f040 80ce 	bne.w	80050cc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f30:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3c:	f7fd f9da 	bl	80022f4 <HAL_GetTick>
 8004f40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f42:	e00b      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f44:	f7fd f9d6 	bl	80022f4 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	; 0x64
 8004f50:	d904      	bls.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e0bb      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004f56:	bf00      	nop
 8004f58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f5c:	4b5e      	ldr	r3, [pc, #376]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f68:	d0ec      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d009      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d02e      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d12a      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f92:	4b51      	ldr	r3, [pc, #324]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fa0:	4b4d      	ldr	r3, [pc, #308]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa6:	0f1b      	lsrs	r3, r3, #28
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	019a      	lsls	r2, r3, #6
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	041b      	lsls	r3, r3, #16
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	061b      	lsls	r3, r3, #24
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	071b      	lsls	r3, r3, #28
 8004fc6:	4944      	ldr	r1, [pc, #272]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fce:	4b42      	ldr	r3, [pc, #264]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	493d      	ldr	r1, [pc, #244]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d022      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ffc:	d11d      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ffe:	4b36      	ldr	r3, [pc, #216]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	0e1b      	lsrs	r3, r3, #24
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800500c:	4b32      	ldr	r3, [pc, #200]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800500e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005012:	0f1b      	lsrs	r3, r3, #28
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	019a      	lsls	r2, r3, #6
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	431a      	orrs	r2, r3
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	061b      	lsls	r3, r3, #24
 800502c:	431a      	orrs	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	071b      	lsls	r3, r3, #28
 8005032:	4929      	ldr	r1, [pc, #164]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d028      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005046:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504c:	0e1b      	lsrs	r3, r3, #24
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005054:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	0c1b      	lsrs	r3, r3, #16
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	019a      	lsls	r2, r3, #6
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	041b      	lsls	r3, r3, #16
 800506c:	431a      	orrs	r2, r3
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	061b      	lsls	r3, r3, #24
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	071b      	lsls	r3, r3, #28
 800507a:	4917      	ldr	r1, [pc, #92]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005082:	4b15      	ldr	r3, [pc, #84]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005088:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	4911      	ldr	r1, [pc, #68]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005098:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a0e      	ldr	r2, [pc, #56]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800509e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a4:	f7fd f926 	bl	80022f4 <HAL_GetTick>
 80050a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050ac:	f7fd f922 	bl	80022f4 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b64      	cmp	r3, #100	; 0x64
 80050b8:	d901      	bls.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e007      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ca:	d1ef      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3720      	adds	r7, #32
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40023800 	.word	0x40023800

080050dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e049      	b.n	8005182 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fc ffe2 	bl	80020cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f000 f9ee 	bl	80054fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	d001      	beq.n	80051a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e04c      	b.n	800523e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a26      	ldr	r2, [pc, #152]	; (800524c <HAL_TIM_Base_Start+0xc0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d022      	beq.n	80051fc <HAL_TIM_Base_Start+0x70>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051be:	d01d      	beq.n	80051fc <HAL_TIM_Base_Start+0x70>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a22      	ldr	r2, [pc, #136]	; (8005250 <HAL_TIM_Base_Start+0xc4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d018      	beq.n	80051fc <HAL_TIM_Base_Start+0x70>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a21      	ldr	r2, [pc, #132]	; (8005254 <HAL_TIM_Base_Start+0xc8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d013      	beq.n	80051fc <HAL_TIM_Base_Start+0x70>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1f      	ldr	r2, [pc, #124]	; (8005258 <HAL_TIM_Base_Start+0xcc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00e      	beq.n	80051fc <HAL_TIM_Base_Start+0x70>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1e      	ldr	r2, [pc, #120]	; (800525c <HAL_TIM_Base_Start+0xd0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d009      	beq.n	80051fc <HAL_TIM_Base_Start+0x70>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <HAL_TIM_Base_Start+0xd4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d004      	beq.n	80051fc <HAL_TIM_Base_Start+0x70>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <HAL_TIM_Base_Start+0xd8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d115      	bne.n	8005228 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	4b19      	ldr	r3, [pc, #100]	; (8005268 <HAL_TIM_Base_Start+0xdc>)
 8005204:	4013      	ands	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b06      	cmp	r3, #6
 800520c:	d015      	beq.n	800523a <HAL_TIM_Base_Start+0xae>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005214:	d011      	beq.n	800523a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0201 	orr.w	r2, r2, #1
 8005224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005226:	e008      	b.n	800523a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	e000      	b.n	800523c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40010000 	.word	0x40010000
 8005250:	40000400 	.word	0x40000400
 8005254:	40000800 	.word	0x40000800
 8005258:	40000c00 	.word	0x40000c00
 800525c:	40010400 	.word	0x40010400
 8005260:	40014000 	.word	0x40014000
 8005264:	40001800 	.word	0x40001800
 8005268:	00010007 	.word	0x00010007

0800526c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b02      	cmp	r3, #2
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b02      	cmp	r3, #2
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0202 	mvn.w	r2, #2
 8005298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f905 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f8f7 	bl	80054aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f908 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d122      	bne.n	800531c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d11b      	bne.n	800531c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0204 	mvn.w	r2, #4
 80052ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2202      	movs	r2, #2
 80052f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f8db 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f8cd 	bl	80054aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f8de 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b08      	cmp	r3, #8
 8005328:	d122      	bne.n	8005370 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b08      	cmp	r3, #8
 8005336:	d11b      	bne.n	8005370 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0208 	mvn.w	r2, #8
 8005340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2204      	movs	r2, #4
 8005346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f8b1 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f8a3 	bl	80054aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f8b4 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b10      	cmp	r3, #16
 800537c:	d122      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b10      	cmp	r3, #16
 800538a:	d11b      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0210 	mvn.w	r2, #16
 8005394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2208      	movs	r2, #8
 800539a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f887 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 80053b0:	e005      	b.n	80053be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f879 	bl	80054aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f88a 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d10e      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d107      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0201 	mvn.w	r2, #1
 80053e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fc fd8c 	bl	8001f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b80      	cmp	r3, #128	; 0x80
 80053fc:	d10e      	bne.n	800541c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005408:	2b80      	cmp	r3, #128	; 0x80
 800540a:	d107      	bne.n	800541c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f9a8 	bl	800576c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542a:	d10e      	bne.n	800544a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d107      	bne.n	800544a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f99b 	bl	8005780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d10e      	bne.n	8005476 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005462:	2b40      	cmp	r3, #64	; 0x40
 8005464:	d107      	bne.n	8005476 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800546e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f838 	bl	80054e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b20      	cmp	r3, #32
 8005482:	d10e      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b20      	cmp	r3, #32
 8005490:	d107      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f06f 0220 	mvn.w	r2, #32
 800549a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f95b 	bl	8005758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a40      	ldr	r2, [pc, #256]	; (8005610 <TIM_Base_SetConfig+0x114>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551a:	d00f      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a3d      	ldr	r2, [pc, #244]	; (8005614 <TIM_Base_SetConfig+0x118>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00b      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a3c      	ldr	r2, [pc, #240]	; (8005618 <TIM_Base_SetConfig+0x11c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d007      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a3b      	ldr	r2, [pc, #236]	; (800561c <TIM_Base_SetConfig+0x120>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d003      	beq.n	800553c <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a3a      	ldr	r2, [pc, #232]	; (8005620 <TIM_Base_SetConfig+0x124>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d108      	bne.n	800554e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a2f      	ldr	r2, [pc, #188]	; (8005610 <TIM_Base_SetConfig+0x114>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d02b      	beq.n	80055ae <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555c:	d027      	beq.n	80055ae <TIM_Base_SetConfig+0xb2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2c      	ldr	r2, [pc, #176]	; (8005614 <TIM_Base_SetConfig+0x118>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d023      	beq.n	80055ae <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <TIM_Base_SetConfig+0x11c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d01f      	beq.n	80055ae <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a2a      	ldr	r2, [pc, #168]	; (800561c <TIM_Base_SetConfig+0x120>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d01b      	beq.n	80055ae <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a29      	ldr	r2, [pc, #164]	; (8005620 <TIM_Base_SetConfig+0x124>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d017      	beq.n	80055ae <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a28      	ldr	r2, [pc, #160]	; (8005624 <TIM_Base_SetConfig+0x128>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d013      	beq.n	80055ae <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a27      	ldr	r2, [pc, #156]	; (8005628 <TIM_Base_SetConfig+0x12c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00f      	beq.n	80055ae <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a26      	ldr	r2, [pc, #152]	; (800562c <TIM_Base_SetConfig+0x130>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00b      	beq.n	80055ae <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a25      	ldr	r2, [pc, #148]	; (8005630 <TIM_Base_SetConfig+0x134>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d007      	beq.n	80055ae <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a24      	ldr	r2, [pc, #144]	; (8005634 <TIM_Base_SetConfig+0x138>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d003      	beq.n	80055ae <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a23      	ldr	r2, [pc, #140]	; (8005638 <TIM_Base_SetConfig+0x13c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d108      	bne.n	80055c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a0a      	ldr	r2, [pc, #40]	; (8005610 <TIM_Base_SetConfig+0x114>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_Base_SetConfig+0xf8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a0c      	ldr	r2, [pc, #48]	; (8005620 <TIM_Base_SetConfig+0x124>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d103      	bne.n	80055fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	615a      	str	r2, [r3, #20]
}
 8005602:	bf00      	nop
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40010000 	.word	0x40010000
 8005614:	40000400 	.word	0x40000400
 8005618:	40000800 	.word	0x40000800
 800561c:	40000c00 	.word	0x40000c00
 8005620:	40010400 	.word	0x40010400
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400
 800562c:	40014800 	.word	0x40014800
 8005630:	40001800 	.word	0x40001800
 8005634:	40001c00 	.word	0x40001c00
 8005638:	40002000 	.word	0x40002000

0800563c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005650:	2302      	movs	r3, #2
 8005652:	e06d      	b.n	8005730 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a30      	ldr	r2, [pc, #192]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d004      	beq.n	8005688 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a2f      	ldr	r2, [pc, #188]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d108      	bne.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800568e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a20      	ldr	r2, [pc, #128]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d022      	beq.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c6:	d01d      	beq.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a1d      	ldr	r2, [pc, #116]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d018      	beq.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1c      	ldr	r2, [pc, #112]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d013      	beq.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1a      	ldr	r2, [pc, #104]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00e      	beq.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a15      	ldr	r2, [pc, #84]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d009      	beq.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a16      	ldr	r2, [pc, #88]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d004      	beq.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a15      	ldr	r2, [pc, #84]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d10c      	bne.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800570a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	4313      	orrs	r3, r2
 8005714:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	40010000 	.word	0x40010000
 8005740:	40010400 	.word	0x40010400
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800
 800574c:	40000c00 	.word	0x40000c00
 8005750:	40014000 	.word	0x40014000
 8005754:	40001800 	.word	0x40001800

08005758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e040      	b.n	8005828 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fc fcde 	bl	8002178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2224      	movs	r2, #36	; 0x24
 80057c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0201 	bic.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f8c0 	bl	8005958 <UART_SetConfig>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e022      	b.n	8005828 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fb16 	bl	8005e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800580e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fb9d 	bl	8005f60 <UART_CheckIdleState>
 8005826:	4603      	mov	r3, r0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08a      	sub	sp, #40	; 0x28
 8005834:	af02      	add	r7, sp, #8
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005844:	2b20      	cmp	r3, #32
 8005846:	f040 8081 	bne.w	800594c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <HAL_UART_Transmit+0x26>
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e079      	b.n	800594e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_UART_Transmit+0x38>
 8005864:	2302      	movs	r3, #2
 8005866:	e072      	b.n	800594e <HAL_UART_Transmit+0x11e>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2221      	movs	r2, #33	; 0x21
 800587c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800587e:	f7fc fd39 	bl	80022f4 <HAL_GetTick>
 8005882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	88fa      	ldrh	r2, [r7, #6]
 8005888:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	88fa      	ldrh	r2, [r7, #6]
 8005890:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800589c:	d108      	bne.n	80058b0 <HAL_UART_Transmit+0x80>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d104      	bne.n	80058b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	e003      	b.n	80058b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80058c0:	e02c      	b.n	800591c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2200      	movs	r2, #0
 80058ca:	2180      	movs	r1, #128	; 0x80
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fb90 	bl	8005ff2 <UART_WaitOnFlagUntilTimeout>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e038      	b.n	800594e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10b      	bne.n	80058fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	3302      	adds	r3, #2
 80058f6:	61bb      	str	r3, [r7, #24]
 80058f8:	e007      	b.n	800590a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	781a      	ldrb	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	3301      	adds	r3, #1
 8005908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1cc      	bne.n	80058c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2200      	movs	r2, #0
 8005930:	2140      	movs	r1, #64	; 0x40
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fb5d 	bl	8005ff2 <UART_WaitOnFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e005      	b.n	800594e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	e000      	b.n	800594e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800594c:	2302      	movs	r3, #2
  }
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4ba7      	ldr	r3, [pc, #668]	; (8005c20 <UART_SetConfig+0x2c8>)
 8005984:	4013      	ands	r3, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	6979      	ldr	r1, [r7, #20]
 800598c:	430b      	orrs	r3, r1
 800598e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a95      	ldr	r2, [pc, #596]	; (8005c24 <UART_SetConfig+0x2cc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d120      	bne.n	8005a16 <UART_SetConfig+0xbe>
 80059d4:	4b94      	ldr	r3, [pc, #592]	; (8005c28 <UART_SetConfig+0x2d0>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d816      	bhi.n	8005a10 <UART_SetConfig+0xb8>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <UART_SetConfig+0x90>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	080059f9 	.word	0x080059f9
 80059ec:	08005a05 	.word	0x08005a05
 80059f0:	080059ff 	.word	0x080059ff
 80059f4:	08005a0b 	.word	0x08005a0b
 80059f8:	2301      	movs	r3, #1
 80059fa:	77fb      	strb	r3, [r7, #31]
 80059fc:	e14f      	b.n	8005c9e <UART_SetConfig+0x346>
 80059fe:	2302      	movs	r3, #2
 8005a00:	77fb      	strb	r3, [r7, #31]
 8005a02:	e14c      	b.n	8005c9e <UART_SetConfig+0x346>
 8005a04:	2304      	movs	r3, #4
 8005a06:	77fb      	strb	r3, [r7, #31]
 8005a08:	e149      	b.n	8005c9e <UART_SetConfig+0x346>
 8005a0a:	2308      	movs	r3, #8
 8005a0c:	77fb      	strb	r3, [r7, #31]
 8005a0e:	e146      	b.n	8005c9e <UART_SetConfig+0x346>
 8005a10:	2310      	movs	r3, #16
 8005a12:	77fb      	strb	r3, [r7, #31]
 8005a14:	e143      	b.n	8005c9e <UART_SetConfig+0x346>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a84      	ldr	r2, [pc, #528]	; (8005c2c <UART_SetConfig+0x2d4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d132      	bne.n	8005a86 <UART_SetConfig+0x12e>
 8005a20:	4b81      	ldr	r3, [pc, #516]	; (8005c28 <UART_SetConfig+0x2d0>)
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a26:	f003 030c 	and.w	r3, r3, #12
 8005a2a:	2b0c      	cmp	r3, #12
 8005a2c:	d828      	bhi.n	8005a80 <UART_SetConfig+0x128>
 8005a2e:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <UART_SetConfig+0xdc>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a69 	.word	0x08005a69
 8005a38:	08005a81 	.word	0x08005a81
 8005a3c:	08005a81 	.word	0x08005a81
 8005a40:	08005a81 	.word	0x08005a81
 8005a44:	08005a75 	.word	0x08005a75
 8005a48:	08005a81 	.word	0x08005a81
 8005a4c:	08005a81 	.word	0x08005a81
 8005a50:	08005a81 	.word	0x08005a81
 8005a54:	08005a6f 	.word	0x08005a6f
 8005a58:	08005a81 	.word	0x08005a81
 8005a5c:	08005a81 	.word	0x08005a81
 8005a60:	08005a81 	.word	0x08005a81
 8005a64:	08005a7b 	.word	0x08005a7b
 8005a68:	2300      	movs	r3, #0
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e117      	b.n	8005c9e <UART_SetConfig+0x346>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e114      	b.n	8005c9e <UART_SetConfig+0x346>
 8005a74:	2304      	movs	r3, #4
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e111      	b.n	8005c9e <UART_SetConfig+0x346>
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e10e      	b.n	8005c9e <UART_SetConfig+0x346>
 8005a80:	2310      	movs	r3, #16
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	e10b      	b.n	8005c9e <UART_SetConfig+0x346>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a69      	ldr	r2, [pc, #420]	; (8005c30 <UART_SetConfig+0x2d8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d120      	bne.n	8005ad2 <UART_SetConfig+0x17a>
 8005a90:	4b65      	ldr	r3, [pc, #404]	; (8005c28 <UART_SetConfig+0x2d0>)
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a9a:	2b30      	cmp	r3, #48	; 0x30
 8005a9c:	d013      	beq.n	8005ac6 <UART_SetConfig+0x16e>
 8005a9e:	2b30      	cmp	r3, #48	; 0x30
 8005aa0:	d814      	bhi.n	8005acc <UART_SetConfig+0x174>
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	d009      	beq.n	8005aba <UART_SetConfig+0x162>
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d810      	bhi.n	8005acc <UART_SetConfig+0x174>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <UART_SetConfig+0x15c>
 8005aae:	2b10      	cmp	r3, #16
 8005ab0:	d006      	beq.n	8005ac0 <UART_SetConfig+0x168>
 8005ab2:	e00b      	b.n	8005acc <UART_SetConfig+0x174>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	77fb      	strb	r3, [r7, #31]
 8005ab8:	e0f1      	b.n	8005c9e <UART_SetConfig+0x346>
 8005aba:	2302      	movs	r3, #2
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e0ee      	b.n	8005c9e <UART_SetConfig+0x346>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e0eb      	b.n	8005c9e <UART_SetConfig+0x346>
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	77fb      	strb	r3, [r7, #31]
 8005aca:	e0e8      	b.n	8005c9e <UART_SetConfig+0x346>
 8005acc:	2310      	movs	r3, #16
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e0e5      	b.n	8005c9e <UART_SetConfig+0x346>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a57      	ldr	r2, [pc, #348]	; (8005c34 <UART_SetConfig+0x2dc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d120      	bne.n	8005b1e <UART_SetConfig+0x1c6>
 8005adc:	4b52      	ldr	r3, [pc, #328]	; (8005c28 <UART_SetConfig+0x2d0>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ae6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ae8:	d013      	beq.n	8005b12 <UART_SetConfig+0x1ba>
 8005aea:	2bc0      	cmp	r3, #192	; 0xc0
 8005aec:	d814      	bhi.n	8005b18 <UART_SetConfig+0x1c0>
 8005aee:	2b80      	cmp	r3, #128	; 0x80
 8005af0:	d009      	beq.n	8005b06 <UART_SetConfig+0x1ae>
 8005af2:	2b80      	cmp	r3, #128	; 0x80
 8005af4:	d810      	bhi.n	8005b18 <UART_SetConfig+0x1c0>
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <UART_SetConfig+0x1a8>
 8005afa:	2b40      	cmp	r3, #64	; 0x40
 8005afc:	d006      	beq.n	8005b0c <UART_SetConfig+0x1b4>
 8005afe:	e00b      	b.n	8005b18 <UART_SetConfig+0x1c0>
 8005b00:	2300      	movs	r3, #0
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e0cb      	b.n	8005c9e <UART_SetConfig+0x346>
 8005b06:	2302      	movs	r3, #2
 8005b08:	77fb      	strb	r3, [r7, #31]
 8005b0a:	e0c8      	b.n	8005c9e <UART_SetConfig+0x346>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e0c5      	b.n	8005c9e <UART_SetConfig+0x346>
 8005b12:	2308      	movs	r3, #8
 8005b14:	77fb      	strb	r3, [r7, #31]
 8005b16:	e0c2      	b.n	8005c9e <UART_SetConfig+0x346>
 8005b18:	2310      	movs	r3, #16
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	e0bf      	b.n	8005c9e <UART_SetConfig+0x346>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a45      	ldr	r2, [pc, #276]	; (8005c38 <UART_SetConfig+0x2e0>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d125      	bne.n	8005b74 <UART_SetConfig+0x21c>
 8005b28:	4b3f      	ldr	r3, [pc, #252]	; (8005c28 <UART_SetConfig+0x2d0>)
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b36:	d017      	beq.n	8005b68 <UART_SetConfig+0x210>
 8005b38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b3c:	d817      	bhi.n	8005b6e <UART_SetConfig+0x216>
 8005b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b42:	d00b      	beq.n	8005b5c <UART_SetConfig+0x204>
 8005b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b48:	d811      	bhi.n	8005b6e <UART_SetConfig+0x216>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <UART_SetConfig+0x1fe>
 8005b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b52:	d006      	beq.n	8005b62 <UART_SetConfig+0x20a>
 8005b54:	e00b      	b.n	8005b6e <UART_SetConfig+0x216>
 8005b56:	2300      	movs	r3, #0
 8005b58:	77fb      	strb	r3, [r7, #31]
 8005b5a:	e0a0      	b.n	8005c9e <UART_SetConfig+0x346>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e09d      	b.n	8005c9e <UART_SetConfig+0x346>
 8005b62:	2304      	movs	r3, #4
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	e09a      	b.n	8005c9e <UART_SetConfig+0x346>
 8005b68:	2308      	movs	r3, #8
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e097      	b.n	8005c9e <UART_SetConfig+0x346>
 8005b6e:	2310      	movs	r3, #16
 8005b70:	77fb      	strb	r3, [r7, #31]
 8005b72:	e094      	b.n	8005c9e <UART_SetConfig+0x346>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a30      	ldr	r2, [pc, #192]	; (8005c3c <UART_SetConfig+0x2e4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d125      	bne.n	8005bca <UART_SetConfig+0x272>
 8005b7e:	4b2a      	ldr	r3, [pc, #168]	; (8005c28 <UART_SetConfig+0x2d0>)
 8005b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b8c:	d017      	beq.n	8005bbe <UART_SetConfig+0x266>
 8005b8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b92:	d817      	bhi.n	8005bc4 <UART_SetConfig+0x26c>
 8005b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b98:	d00b      	beq.n	8005bb2 <UART_SetConfig+0x25a>
 8005b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9e:	d811      	bhi.n	8005bc4 <UART_SetConfig+0x26c>
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <UART_SetConfig+0x254>
 8005ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba8:	d006      	beq.n	8005bb8 <UART_SetConfig+0x260>
 8005baa:	e00b      	b.n	8005bc4 <UART_SetConfig+0x26c>
 8005bac:	2301      	movs	r3, #1
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e075      	b.n	8005c9e <UART_SetConfig+0x346>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	77fb      	strb	r3, [r7, #31]
 8005bb6:	e072      	b.n	8005c9e <UART_SetConfig+0x346>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e06f      	b.n	8005c9e <UART_SetConfig+0x346>
 8005bbe:	2308      	movs	r3, #8
 8005bc0:	77fb      	strb	r3, [r7, #31]
 8005bc2:	e06c      	b.n	8005c9e <UART_SetConfig+0x346>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	77fb      	strb	r3, [r7, #31]
 8005bc8:	e069      	b.n	8005c9e <UART_SetConfig+0x346>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1c      	ldr	r2, [pc, #112]	; (8005c40 <UART_SetConfig+0x2e8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d137      	bne.n	8005c44 <UART_SetConfig+0x2ec>
 8005bd4:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <UART_SetConfig+0x2d0>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bda:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005be2:	d017      	beq.n	8005c14 <UART_SetConfig+0x2bc>
 8005be4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005be8:	d817      	bhi.n	8005c1a <UART_SetConfig+0x2c2>
 8005bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bee:	d00b      	beq.n	8005c08 <UART_SetConfig+0x2b0>
 8005bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf4:	d811      	bhi.n	8005c1a <UART_SetConfig+0x2c2>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <UART_SetConfig+0x2aa>
 8005bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfe:	d006      	beq.n	8005c0e <UART_SetConfig+0x2b6>
 8005c00:	e00b      	b.n	8005c1a <UART_SetConfig+0x2c2>
 8005c02:	2300      	movs	r3, #0
 8005c04:	77fb      	strb	r3, [r7, #31]
 8005c06:	e04a      	b.n	8005c9e <UART_SetConfig+0x346>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	77fb      	strb	r3, [r7, #31]
 8005c0c:	e047      	b.n	8005c9e <UART_SetConfig+0x346>
 8005c0e:	2304      	movs	r3, #4
 8005c10:	77fb      	strb	r3, [r7, #31]
 8005c12:	e044      	b.n	8005c9e <UART_SetConfig+0x346>
 8005c14:	2308      	movs	r3, #8
 8005c16:	77fb      	strb	r3, [r7, #31]
 8005c18:	e041      	b.n	8005c9e <UART_SetConfig+0x346>
 8005c1a:	2310      	movs	r3, #16
 8005c1c:	77fb      	strb	r3, [r7, #31]
 8005c1e:	e03e      	b.n	8005c9e <UART_SetConfig+0x346>
 8005c20:	efff69f3 	.word	0xefff69f3
 8005c24:	40011000 	.word	0x40011000
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	40004400 	.word	0x40004400
 8005c30:	40004800 	.word	0x40004800
 8005c34:	40004c00 	.word	0x40004c00
 8005c38:	40005000 	.word	0x40005000
 8005c3c:	40011400 	.word	0x40011400
 8005c40:	40007800 	.word	0x40007800
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a71      	ldr	r2, [pc, #452]	; (8005e10 <UART_SetConfig+0x4b8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d125      	bne.n	8005c9a <UART_SetConfig+0x342>
 8005c4e:	4b71      	ldr	r3, [pc, #452]	; (8005e14 <UART_SetConfig+0x4bc>)
 8005c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c5c:	d017      	beq.n	8005c8e <UART_SetConfig+0x336>
 8005c5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c62:	d817      	bhi.n	8005c94 <UART_SetConfig+0x33c>
 8005c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c68:	d00b      	beq.n	8005c82 <UART_SetConfig+0x32a>
 8005c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c6e:	d811      	bhi.n	8005c94 <UART_SetConfig+0x33c>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <UART_SetConfig+0x324>
 8005c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c78:	d006      	beq.n	8005c88 <UART_SetConfig+0x330>
 8005c7a:	e00b      	b.n	8005c94 <UART_SetConfig+0x33c>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	77fb      	strb	r3, [r7, #31]
 8005c80:	e00d      	b.n	8005c9e <UART_SetConfig+0x346>
 8005c82:	2302      	movs	r3, #2
 8005c84:	77fb      	strb	r3, [r7, #31]
 8005c86:	e00a      	b.n	8005c9e <UART_SetConfig+0x346>
 8005c88:	2304      	movs	r3, #4
 8005c8a:	77fb      	strb	r3, [r7, #31]
 8005c8c:	e007      	b.n	8005c9e <UART_SetConfig+0x346>
 8005c8e:	2308      	movs	r3, #8
 8005c90:	77fb      	strb	r3, [r7, #31]
 8005c92:	e004      	b.n	8005c9e <UART_SetConfig+0x346>
 8005c94:	2310      	movs	r3, #16
 8005c96:	77fb      	strb	r3, [r7, #31]
 8005c98:	e001      	b.n	8005c9e <UART_SetConfig+0x346>
 8005c9a:	2310      	movs	r3, #16
 8005c9c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca6:	d15b      	bne.n	8005d60 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005ca8:	7ffb      	ldrb	r3, [r7, #31]
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d827      	bhi.n	8005cfe <UART_SetConfig+0x3a6>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <UART_SetConfig+0x35c>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005cd9 	.word	0x08005cd9
 8005cb8:	08005ce1 	.word	0x08005ce1
 8005cbc:	08005ce9 	.word	0x08005ce9
 8005cc0:	08005cff 	.word	0x08005cff
 8005cc4:	08005cef 	.word	0x08005cef
 8005cc8:	08005cff 	.word	0x08005cff
 8005ccc:	08005cff 	.word	0x08005cff
 8005cd0:	08005cff 	.word	0x08005cff
 8005cd4:	08005cf7 	.word	0x08005cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd8:	f7fe fdb0 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 8005cdc:	61b8      	str	r0, [r7, #24]
        break;
 8005cde:	e013      	b.n	8005d08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ce0:	f7fe fdc0 	bl	8004864 <HAL_RCC_GetPCLK2Freq>
 8005ce4:	61b8      	str	r0, [r7, #24]
        break;
 8005ce6:	e00f      	b.n	8005d08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce8:	4b4b      	ldr	r3, [pc, #300]	; (8005e18 <UART_SetConfig+0x4c0>)
 8005cea:	61bb      	str	r3, [r7, #24]
        break;
 8005cec:	e00c      	b.n	8005d08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cee:	f7fe fce3 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005cf2:	61b8      	str	r0, [r7, #24]
        break;
 8005cf4:	e008      	b.n	8005d08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfa:	61bb      	str	r3, [r7, #24]
        break;
 8005cfc:	e004      	b.n	8005d08 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	77bb      	strb	r3, [r7, #30]
        break;
 8005d06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d074      	beq.n	8005df8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	005a      	lsls	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	441a      	add	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b0f      	cmp	r3, #15
 8005d2a:	d916      	bls.n	8005d5a <UART_SetConfig+0x402>
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d32:	d212      	bcs.n	8005d5a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f023 030f 	bic.w	r3, r3, #15
 8005d3c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	085b      	lsrs	r3, r3, #1
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	89fb      	ldrh	r3, [r7, #14]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	89fa      	ldrh	r2, [r7, #14]
 8005d56:	60da      	str	r2, [r3, #12]
 8005d58:	e04e      	b.n	8005df8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	77bb      	strb	r3, [r7, #30]
 8005d5e:	e04b      	b.n	8005df8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d60:	7ffb      	ldrb	r3, [r7, #31]
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d827      	bhi.n	8005db6 <UART_SetConfig+0x45e>
 8005d66:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <UART_SetConfig+0x414>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005d99 	.word	0x08005d99
 8005d74:	08005da1 	.word	0x08005da1
 8005d78:	08005db7 	.word	0x08005db7
 8005d7c:	08005da7 	.word	0x08005da7
 8005d80:	08005db7 	.word	0x08005db7
 8005d84:	08005db7 	.word	0x08005db7
 8005d88:	08005db7 	.word	0x08005db7
 8005d8c:	08005daf 	.word	0x08005daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d90:	f7fe fd54 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 8005d94:	61b8      	str	r0, [r7, #24]
        break;
 8005d96:	e013      	b.n	8005dc0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d98:	f7fe fd64 	bl	8004864 <HAL_RCC_GetPCLK2Freq>
 8005d9c:	61b8      	str	r0, [r7, #24]
        break;
 8005d9e:	e00f      	b.n	8005dc0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da0:	4b1d      	ldr	r3, [pc, #116]	; (8005e18 <UART_SetConfig+0x4c0>)
 8005da2:	61bb      	str	r3, [r7, #24]
        break;
 8005da4:	e00c      	b.n	8005dc0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005da6:	f7fe fc87 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8005daa:	61b8      	str	r0, [r7, #24]
        break;
 8005dac:	e008      	b.n	8005dc0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005db2:	61bb      	str	r3, [r7, #24]
        break;
 8005db4:	e004      	b.n	8005dc0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	77bb      	strb	r3, [r7, #30]
        break;
 8005dbe:	bf00      	nop
    }

    if (pclk != 0U)
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d018      	beq.n	8005df8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	085a      	lsrs	r2, r3, #1
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	441a      	add	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b0f      	cmp	r3, #15
 8005de0:	d908      	bls.n	8005df4 <UART_SetConfig+0x49c>
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de8:	d204      	bcs.n	8005df4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	60da      	str	r2, [r3, #12]
 8005df2:	e001      	b.n	8005df8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e04:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	40007c00 	.word	0x40007c00
 8005e14:	40023800 	.word	0x40023800
 8005e18:	00f42400 	.word	0x00f42400

08005e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00a      	beq.n	8005e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01a      	beq.n	8005f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f1a:	d10a      	bne.n	8005f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	605a      	str	r2, [r3, #4]
  }
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f70:	f7fc f9c0 	bl	80022f4 <HAL_GetTick>
 8005f74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d10e      	bne.n	8005fa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f82d 	bl	8005ff2 <UART_WaitOnFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e023      	b.n	8005fea <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d10e      	bne.n	8005fce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f817 	bl	8005ff2 <UART_WaitOnFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e00d      	b.n	8005fea <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	603b      	str	r3, [r7, #0]
 8005ffe:	4613      	mov	r3, r2
 8006000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006002:	e05e      	b.n	80060c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d05a      	beq.n	80060c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800600c:	f7fc f972 	bl	80022f4 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	429a      	cmp	r2, r3
 800601a:	d302      	bcc.n	8006022 <UART_WaitOnFlagUntilTimeout+0x30>
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d11b      	bne.n	800605a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006030:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0201 	bic.w	r2, r2, #1
 8006040:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e043      	b.n	80060e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d02c      	beq.n	80060c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006076:	d124      	bne.n	80060c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006080:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006090:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0201 	bic.w	r2, r2, #1
 80060a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e00f      	b.n	80060e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4013      	ands	r3, r2
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	bf0c      	ite	eq
 80060d2:	2301      	moveq	r3, #1
 80060d4:	2300      	movne	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d091      	beq.n	8006004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <__libc_init_array>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4d0d      	ldr	r5, [pc, #52]	; (8006124 <__libc_init_array+0x38>)
 80060f0:	4c0d      	ldr	r4, [pc, #52]	; (8006128 <__libc_init_array+0x3c>)
 80060f2:	1b64      	subs	r4, r4, r5
 80060f4:	10a4      	asrs	r4, r4, #2
 80060f6:	2600      	movs	r6, #0
 80060f8:	42a6      	cmp	r6, r4
 80060fa:	d109      	bne.n	8006110 <__libc_init_array+0x24>
 80060fc:	4d0b      	ldr	r5, [pc, #44]	; (800612c <__libc_init_array+0x40>)
 80060fe:	4c0c      	ldr	r4, [pc, #48]	; (8006130 <__libc_init_array+0x44>)
 8006100:	f000 f864 	bl	80061cc <_init>
 8006104:	1b64      	subs	r4, r4, r5
 8006106:	10a4      	asrs	r4, r4, #2
 8006108:	2600      	movs	r6, #0
 800610a:	42a6      	cmp	r6, r4
 800610c:	d105      	bne.n	800611a <__libc_init_array+0x2e>
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	f855 3b04 	ldr.w	r3, [r5], #4
 8006114:	4798      	blx	r3
 8006116:	3601      	adds	r6, #1
 8006118:	e7ee      	b.n	80060f8 <__libc_init_array+0xc>
 800611a:	f855 3b04 	ldr.w	r3, [r5], #4
 800611e:	4798      	blx	r3
 8006120:	3601      	adds	r6, #1
 8006122:	e7f2      	b.n	800610a <__libc_init_array+0x1e>
 8006124:	080066fc 	.word	0x080066fc
 8006128:	080066fc 	.word	0x080066fc
 800612c:	080066fc 	.word	0x080066fc
 8006130:	08006700 	.word	0x08006700

08006134 <memset>:
 8006134:	4402      	add	r2, r0
 8006136:	4603      	mov	r3, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	d100      	bne.n	800613e <memset+0xa>
 800613c:	4770      	bx	lr
 800613e:	f803 1b01 	strb.w	r1, [r3], #1
 8006142:	e7f9      	b.n	8006138 <memset+0x4>

08006144 <__utoa>:
 8006144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006146:	4c1f      	ldr	r4, [pc, #124]	; (80061c4 <__utoa+0x80>)
 8006148:	b08b      	sub	sp, #44	; 0x2c
 800614a:	4605      	mov	r5, r0
 800614c:	460b      	mov	r3, r1
 800614e:	466e      	mov	r6, sp
 8006150:	f104 0c20 	add.w	ip, r4, #32
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	6861      	ldr	r1, [r4, #4]
 8006158:	4637      	mov	r7, r6
 800615a:	c703      	stmia	r7!, {r0, r1}
 800615c:	3408      	adds	r4, #8
 800615e:	4564      	cmp	r4, ip
 8006160:	463e      	mov	r6, r7
 8006162:	d1f7      	bne.n	8006154 <__utoa+0x10>
 8006164:	7921      	ldrb	r1, [r4, #4]
 8006166:	7139      	strb	r1, [r7, #4]
 8006168:	1e91      	subs	r1, r2, #2
 800616a:	6820      	ldr	r0, [r4, #0]
 800616c:	6038      	str	r0, [r7, #0]
 800616e:	2922      	cmp	r1, #34	; 0x22
 8006170:	f04f 0100 	mov.w	r1, #0
 8006174:	d904      	bls.n	8006180 <__utoa+0x3c>
 8006176:	7019      	strb	r1, [r3, #0]
 8006178:	460b      	mov	r3, r1
 800617a:	4618      	mov	r0, r3
 800617c:	b00b      	add	sp, #44	; 0x2c
 800617e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006180:	1e58      	subs	r0, r3, #1
 8006182:	4684      	mov	ip, r0
 8006184:	fbb5 f7f2 	udiv	r7, r5, r2
 8006188:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800618c:	fb02 5617 	mls	r6, r2, r7, r5
 8006190:	4476      	add	r6, lr
 8006192:	460c      	mov	r4, r1
 8006194:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006198:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800619c:	462e      	mov	r6, r5
 800619e:	42b2      	cmp	r2, r6
 80061a0:	f101 0101 	add.w	r1, r1, #1
 80061a4:	463d      	mov	r5, r7
 80061a6:	d9ed      	bls.n	8006184 <__utoa+0x40>
 80061a8:	2200      	movs	r2, #0
 80061aa:	545a      	strb	r2, [r3, r1]
 80061ac:	1919      	adds	r1, r3, r4
 80061ae:	1aa5      	subs	r5, r4, r2
 80061b0:	42aa      	cmp	r2, r5
 80061b2:	dae2      	bge.n	800617a <__utoa+0x36>
 80061b4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80061b8:	780e      	ldrb	r6, [r1, #0]
 80061ba:	7006      	strb	r6, [r0, #0]
 80061bc:	3201      	adds	r2, #1
 80061be:	f801 5901 	strb.w	r5, [r1], #-1
 80061c2:	e7f4      	b.n	80061ae <__utoa+0x6a>
 80061c4:	080066cc 	.word	0x080066cc

080061c8 <utoa>:
 80061c8:	f7ff bfbc 	b.w	8006144 <__utoa>

080061cc <_init>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	bf00      	nop
 80061d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d2:	bc08      	pop	{r3}
 80061d4:	469e      	mov	lr, r3
 80061d6:	4770      	bx	lr

080061d8 <_fini>:
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061da:	bf00      	nop
 80061dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061de:	bc08      	pop	{r3}
 80061e0:	469e      	mov	lr, r3
 80061e2:	4770      	bx	lr
