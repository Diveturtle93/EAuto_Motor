
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057fc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e00  08005e00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e00  08005e00  00015e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e08  08005e08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08005e1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08005e1c  00020144  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106a2  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aae  00000000  00000000  000306dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00033190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00033d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a15f  00000000  00000000  00034768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011615  00000000  00000000  0005e8c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbeea  00000000  00000000  0006fedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016bdc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ce4  00000000  00000000  0016be18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080059dc 	.word	0x080059dc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080059dc 	.word	0x080059dc

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b29a      	uxth	r2, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <uartTransmit+0x24>)
 8000562:	f003 feef 	bl	8004344 <HAL_UART_Transmit>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200000b8 	.word	0x200000b8

08000574 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	char str[11];

	itoa(number, str, base);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	f107 010c 	add.w	r1, r7, #12
 8000586:	4618      	mov	r0, r3
 8000588:	f005 f9dc 	bl	8005944 <itoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe51 	bl	8000238 <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	f107 010c 	add.w	r1, r7, #12
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <uartTransmitNumber+0x3c>)
 80005a4:	f003 fece 	bl	8004344 <HAL_UART_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000b8 	.word	0x200000b8

080005b4 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80005b8:	2112      	movs	r1, #18
 80005ba:	4822      	ldr	r0, [pc, #136]	; (8000644 <collectMiddlewareInfo+0x90>)
 80005bc:	f7ff ffc6 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);					// CMSIS Version anzeigen
 80005c0:	210a      	movs	r1, #10
 80005c2:	2005      	movs	r0, #5
 80005c4:	f7ff ffd6 	bl	8000574 <uartTransmitNumber>
	uartTransmit(".", 1);
 80005c8:	2101      	movs	r1, #1
 80005ca:	481f      	ldr	r0, [pc, #124]	; (8000648 <collectMiddlewareInfo+0x94>)
 80005cc:	f7ff ffbe 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);					// CMSIS Version anzeigen
 80005d0:	210a      	movs	r1, #10
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff ffce 	bl	8000574 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));		// Hal Version anzeigen
 80005d8:	2110      	movs	r1, #16
 80005da:	481c      	ldr	r0, [pc, #112]	; (800064c <collectMiddlewareInfo+0x98>)
 80005dc:	f7ff ffb6 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80005e0:	f001 fc60 	bl	8001ea4 <HAL_GetHalVersion>
 80005e4:	4603      	mov	r3, r0
 80005e6:	0e1b      	lsrs	r3, r3, #24
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	210a      	movs	r1, #10
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffc1 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 80005f2:	2101      	movs	r1, #1
 80005f4:	4814      	ldr	r0, [pc, #80]	; (8000648 <collectMiddlewareInfo+0x94>)
 80005f6:	f7ff ffa9 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 80005fa:	f001 fc53 	bl	8001ea4 <HAL_GetHalVersion>
 80005fe:	4603      	mov	r3, r0
 8000600:	0c1b      	lsrs	r3, r3, #16
 8000602:	b2db      	uxtb	r3, r3
 8000604:	210a      	movs	r1, #10
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ffb4 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 800060c:	2101      	movs	r1, #1
 800060e:	480e      	ldr	r0, [pc, #56]	; (8000648 <collectMiddlewareInfo+0x94>)
 8000610:	f7ff ff9c 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000614:	f001 fc46 	bl	8001ea4 <HAL_GetHalVersion>
 8000618:	4603      	mov	r3, r0
 800061a:	0a1b      	lsrs	r3, r3, #8
 800061c:	b2db      	uxtb	r3, r3
 800061e:	210a      	movs	r1, #10
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ffa7 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 8000626:	2101      	movs	r1, #1
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <collectMiddlewareInfo+0x94>)
 800062a:	f7ff ff8f 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 800062e:	f001 fc39 	bl	8001ea4 <HAL_GetHalVersion>
 8000632:	4603      	mov	r3, r0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	210a      	movs	r1, #10
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff9b 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);					// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);*/
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	080059f4 	.word	0x080059f4
 8000648:	08005a08 	.word	0x08005a08
 800064c:	08005a0c 	.word	0x08005a0c

08000650 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 8000654:	2110      	movs	r1, #16
 8000656:	4816      	ldr	r0, [pc, #88]	; (80006b0 <collectSoftwareInfo+0x60>)
 8000658:	f7ff ff78 	bl	800054c <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));						// Git Commit anzeigen
 800065c:	2108      	movs	r1, #8
 800065e:	4815      	ldr	r0, [pc, #84]	; (80006b4 <collectSoftwareInfo+0x64>)
 8000660:	f7ff ff74 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000664:	210f      	movs	r1, #15
 8000666:	4814      	ldr	r0, [pc, #80]	; (80006b8 <collectSoftwareInfo+0x68>)
 8000668:	f7ff ff70 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));						// Git Branch anzeigen
 800066c:	210c      	movs	r1, #12
 800066e:	4813      	ldr	r0, [pc, #76]	; (80006bc <collectSoftwareInfo+0x6c>)
 8000670:	f7ff ff6c 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000674:	210d      	movs	r1, #13
 8000676:	4812      	ldr	r0, [pc, #72]	; (80006c0 <collectSoftwareInfo+0x70>)
 8000678:	f7ff ff68 	bl	800054c <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));							// Git Hash anzeigen
 800067c:	2129      	movs	r1, #41	; 0x29
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <collectSoftwareInfo+0x74>)
 8000680:	f7ff ff64 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000684:	210f      	movs	r1, #15
 8000686:	4810      	ldr	r0, [pc, #64]	; (80006c8 <collectSoftwareInfo+0x78>)
 8000688:	f7ff ff60 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));						// Kompilierdatum anzeigen
 800068c:	210c      	movs	r1, #12
 800068e:	480f      	ldr	r0, [pc, #60]	; (80006cc <collectSoftwareInfo+0x7c>)
 8000690:	f7ff ff5c 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000694:	210f      	movs	r1, #15
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <collectSoftwareInfo+0x80>)
 8000698:	f7ff ff58 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));						// Kompilierzeit anzeigen
 800069c:	2109      	movs	r1, #9
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <collectSoftwareInfo+0x84>)
 80006a0:	f7ff ff54 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);
 80006a4:	2101      	movs	r1, #1
 80006a6:	480c      	ldr	r0, [pc, #48]	; (80006d8 <collectSoftwareInfo+0x88>)
 80006a8:	f7ff ff50 	bl	800054c <uartTransmit>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	08005a1c 	.word	0x08005a1c
 80006b4:	08005a2c 	.word	0x08005a2c
 80006b8:	08005a34 	.word	0x08005a34
 80006bc:	08005a44 	.word	0x08005a44
 80006c0:	08005a50 	.word	0x08005a50
 80006c4:	08005a60 	.word	0x08005a60
 80006c8:	08005a8c 	.word	0x08005a8c
 80006cc:	08005a9c 	.word	0x08005a9c
 80006d0:	08005aa8 	.word	0x08005aa8
 80006d4:	08005ab8 	.word	0x08005ab8
 80006d8:	08005ac4 	.word	0x08005ac4

080006dc <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80006e2:	2113      	movs	r1, #19
 80006e4:	483b      	ldr	r0, [pc, #236]	; (80007d4 <collectHardwareInfo+0xf8>)
 80006e6:	f7ff ff31 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);								// Mikrocontroller Typ
 80006ea:	f001 fbf1 	bl	8001ed0 <HAL_GetDEVID>
 80006ee:	4603      	mov	r3, r0
 80006f0:	210a      	movs	r1, #10
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff3e 	bl	8000574 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80006f8:	2115      	movs	r1, #21
 80006fa:	4837      	ldr	r0, [pc, #220]	; (80007d8 <collectHardwareInfo+0xfc>)
 80006fc:	f7ff ff26 	bl	800054c <uartTransmit>
	
	switch(HAL_GetREVID())												// Mikrocontroller Revision
 8000700:	f001 fbda 	bl	8001eb8 <HAL_GetREVID>
 8000704:	4603      	mov	r3, r0
 8000706:	f242 0201 	movw	r2, #8193	; 0x2001
 800070a:	4293      	cmp	r3, r2
 800070c:	d016      	beq.n	800073c <collectHardwareInfo+0x60>
 800070e:	f242 0201 	movw	r2, #8193	; 0x2001
 8000712:	4293      	cmp	r3, r2
 8000714:	d817      	bhi.n	8000746 <collectHardwareInfo+0x6a>
 8000716:	f241 0201 	movw	r2, #4097	; 0x1001
 800071a:	4293      	cmp	r3, r2
 800071c:	d004      	beq.n	8000728 <collectHardwareInfo+0x4c>
 800071e:	f241 0203 	movw	r2, #4099	; 0x1003
 8000722:	4293      	cmp	r3, r2
 8000724:	d005      	beq.n	8000732 <collectHardwareInfo+0x56>
 8000726:	e00e      	b.n	8000746 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000728:	2101      	movs	r1, #1
 800072a:	482c      	ldr	r0, [pc, #176]	; (80007dc <collectHardwareInfo+0x100>)
 800072c:	f7ff ff0e 	bl	800054c <uartTransmit>
			break;
 8000730:	e011      	b.n	8000756 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000732:	2101      	movs	r1, #1
 8000734:	482a      	ldr	r0, [pc, #168]	; (80007e0 <collectHardwareInfo+0x104>)
 8000736:	f7ff ff09 	bl	800054c <uartTransmit>
			break;
 800073a:	e00c      	b.n	8000756 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 800073c:	2101      	movs	r1, #1
 800073e:	4829      	ldr	r0, [pc, #164]	; (80007e4 <collectHardwareInfo+0x108>)
 8000740:	f7ff ff04 	bl	800054c <uartTransmit>
			break;
 8000744:	e007      	b.n	8000756 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000746:	f001 fbb7 	bl	8001eb8 <HAL_GetREVID>
 800074a:	4603      	mov	r3, r0
 800074c:	210a      	movs	r1, #10
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff10 	bl	8000574 <uartTransmitNumber>
			break;
 8000754:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000756:	2113      	movs	r1, #19
 8000758:	4823      	ldr	r0, [pc, #140]	; (80007e8 <collectHardwareInfo+0x10c>)
 800075a:	f7ff fef7 	bl	800054c <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();					// Systemfrequenz ausgeben
 800075e:	f003 f881 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8000762:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a21      	ldr	r2, [pc, #132]	; (80007ec <collectHardwareInfo+0x110>)
 8000768:	fba2 2303 	umull	r2, r3, r2, r3
 800076c:	0c9b      	lsrs	r3, r3, #18
 800076e:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000770:	210a      	movs	r1, #10
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff fefe 	bl	8000574 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000778:	2104      	movs	r1, #4
 800077a:	481d      	ldr	r0, [pc, #116]	; (80007f0 <collectHardwareInfo+0x114>)
 800077c:	f7ff fee6 	bl	800054c <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000780:	210f      	movs	r1, #15
 8000782:	481c      	ldr	r0, [pc, #112]	; (80007f4 <collectHardwareInfo+0x118>)
 8000784:	f7ff fee2 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);								// UID0 ausgeben
 8000788:	f001 fbb0 	bl	8001eec <HAL_GetUIDw0>
 800078c:	4603      	mov	r3, r0
 800078e:	2110      	movs	r1, #16
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff feef 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000796:	2101      	movs	r1, #1
 8000798:	4817      	ldr	r0, [pc, #92]	; (80007f8 <collectHardwareInfo+0x11c>)
 800079a:	f7ff fed7 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);								// UID1 ausgeben
 800079e:	f001 fbb1 	bl	8001f04 <HAL_GetUIDw1>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2110      	movs	r1, #16
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fee4 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80007ac:	2101      	movs	r1, #1
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <collectHardwareInfo+0x11c>)
 80007b0:	f7ff fecc 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);								// UID2 ausgeben
 80007b4:	f001 fbb2 	bl	8001f1c <HAL_GetUIDw2>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2110      	movs	r1, #16
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fed9 	bl	8000574 <uartTransmitNumber>

	uartTransmit("\n", 1);
 80007c2:	2101      	movs	r1, #1
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <collectHardwareInfo+0x120>)
 80007c6:	f7ff fec1 	bl	800054c <uartTransmit>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	08005ac8 	.word	0x08005ac8
 80007d8:	08005adc 	.word	0x08005adc
 80007dc:	08005af4 	.word	0x08005af4
 80007e0:	08005af8 	.word	0x08005af8
 80007e4:	08005afc 	.word	0x08005afc
 80007e8:	08005b00 	.word	0x08005b00
 80007ec:	431bde83 	.word	0x431bde83
 80007f0:	08005b14 	.word	0x08005b14
 80007f4:	08005b1c 	.word	0x08005b1c
 80007f8:	08005b2c 	.word	0x08005b2c
 80007fc:	08005ac4 	.word	0x08005ac4

08000800 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000804:	2111      	movs	r1, #17
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <collectSystemInfo+0x34>)
 8000808:	f7ff fea0 	bl	800054c <uartTransmit>
	collectHardwareInfo();												// Sammelt Hardware Informationen und gibt diese über Uart aus
 800080c:	f7ff ff66 	bl	80006dc <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000810:	2111      	movs	r1, #17
 8000812:	4809      	ldr	r0, [pc, #36]	; (8000838 <collectSystemInfo+0x38>)
 8000814:	f7ff fe9a 	bl	800054c <uartTransmit>
	collectSoftwareInfo();												// Sammelt Software Informationen und gibt diese über Uart aus
 8000818:	f7ff ff1a 	bl	8000650 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 800081c:	2113      	movs	r1, #19
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <collectSystemInfo+0x3c>)
 8000820:	f7ff fe94 	bl	800054c <uartTransmit>
	collectMiddlewareInfo();											// Sammelt Middleware Informationen und gibt diese über Uart aus
 8000824:	f7ff fec6 	bl	80005b4 <collectMiddlewareInfo>

	uartTransmit("\n\n\n", 3);
 8000828:	2103      	movs	r1, #3
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <collectSystemInfo+0x40>)
 800082c:	f7ff fe8e 	bl	800054c <uartTransmit>
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08005b30 	.word	0x08005b30
 8000838:	08005b44 	.word	0x08005b44
 800083c:	08005b58 	.word	0x08005b58
 8000840:	08005b6c 	.word	0x08005b6c

08000844 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <readResetSource+0xa0>)
 8000850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	3301      	adds	r3, #1
 800085e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000860:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <readResetSource+0xa0>)
 8000862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000864:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000868:	2b00      	cmp	r3, #0
 800086a:	d002      	beq.n	8000872 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	3302      	adds	r3, #2
 8000870:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <readResetSource+0xa0>)
 8000874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000876:	2b00      	cmp	r3, #0
 8000878:	da02      	bge.n	8000880 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	3304      	adds	r3, #4
 800087e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <readResetSource+0xa0>)
 8000882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000888:	2b00      	cmp	r3, #0
 800088a:	d002      	beq.n	8000892 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	3308      	adds	r3, #8
 8000890:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <readResetSource+0xa0>)
 8000894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800089a:	2b00      	cmp	r3, #0
 800089c:	d002      	beq.n	80008a4 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	3310      	adds	r3, #16
 80008a2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <readResetSource+0xa0>)
 80008a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	3320      	adds	r3, #32
 80008b4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <readResetSource+0xa0>)
 80008b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	3340      	adds	r3, #64	; 0x40
 80008c6:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <readResetSource+0xa0>)
 80008ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008cc:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <readResetSource+0xa0>)
 80008ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008d2:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80008d4:	79fb      	ldrb	r3, [r7, #7]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	if (reset_flags == STARTUP)											// Regulaerer Start
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d104      	bne.n	8000902 <printResetSource+0x1a>
	{
		uartTransmit("Regular Start\r\n", 15);
 80008f8:	210f      	movs	r1, #15
 80008fa:	4827      	ldr	r0, [pc, #156]	; (8000998 <printResetSource+0xb0>)
 80008fc:	f7ff fe26 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)										//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000900:	e046      	b.n	8000990 <printResetSource+0xa8>
		if (reset_flags & IWDG1)										// Interner watchdog Reset
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	2b00      	cmp	r3, #0
 800090a:	d003      	beq.n	8000914 <printResetSource+0x2c>
			uartTransmit("Interner Watchdog Reset\n", 24);
 800090c:	2118      	movs	r1, #24
 800090e:	4823      	ldr	r0, [pc, #140]	; (800099c <printResetSource+0xb4>)
 8000910:	f7ff fe1c 	bl	800054c <uartTransmit>
		if (reset_flags & WWDG1)										// Window watchdog Reset
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <printResetSource+0x3e>
			uartTransmit("Window Watchdog Reset\n", 22);
 800091e:	2116      	movs	r1, #22
 8000920:	481f      	ldr	r0, [pc, #124]	; (80009a0 <printResetSource+0xb8>)
 8000922:	f7ff fe13 	bl	800054c <uartTransmit>
		if (reset_flags & CPURST1)										// CPU Reset
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	2b00      	cmp	r3, #0
 800092e:	d003      	beq.n	8000938 <printResetSource+0x50>
			uartTransmit("CPU Reset\n", 10);
 8000930:	210a      	movs	r1, #10
 8000932:	481c      	ldr	r0, [pc, #112]	; (80009a4 <printResetSource+0xbc>)
 8000934:	f7ff fe0a 	bl	800054c <uartTransmit>
		if (reset_flags & BORST1)										// Brown out Reset
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	2b00      	cmp	r3, #0
 8000940:	d003      	beq.n	800094a <printResetSource+0x62>
			uartTransmit("Brown Out Reset\n", 16);
 8000942:	2110      	movs	r1, #16
 8000944:	4818      	ldr	r0, [pc, #96]	; (80009a8 <printResetSource+0xc0>)
 8000946:	f7ff fe01 	bl	800054c <uartTransmit>
		if (reset_flags & PORST1)										//Power on Reset / Power down Reser
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f003 0310 	and.w	r3, r3, #16
 8000950:	2b00      	cmp	r3, #0
 8000952:	d003      	beq.n	800095c <printResetSource+0x74>
			uartTransmit("Power On Reset\n", 15);
 8000954:	210f      	movs	r1, #15
 8000956:	4815      	ldr	r0, [pc, #84]	; (80009ac <printResetSource+0xc4>)
 8000958:	f7ff fdf8 	bl	800054c <uartTransmit>
		if (reset_flags & SFTRST1)										// Software Reset
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	f003 0320 	and.w	r3, r3, #32
 8000962:	2b00      	cmp	r3, #0
 8000964:	d003      	beq.n	800096e <printResetSource+0x86>
			uartTransmit("Software Reset\n", 15);
 8000966:	210f      	movs	r1, #15
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <printResetSource+0xc8>)
 800096a:	f7ff fdef 	bl	800054c <uartTransmit>
		if (reset_flags & PINRST1)										//NRST pin
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000974:	2b00      	cmp	r3, #0
 8000976:	d003      	beq.n	8000980 <printResetSource+0x98>
			uartTransmit("PIN Reset\n", 10);
 8000978:	210a      	movs	r1, #10
 800097a:	480e      	ldr	r0, [pc, #56]	; (80009b4 <printResetSource+0xcc>)
 800097c:	f7ff fde6 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)										//NRST pin
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da03      	bge.n	8000990 <printResetSource+0xa8>
			uartTransmit("RMVF\n", 5);
 8000988:	2105      	movs	r1, #5
 800098a:	480b      	ldr	r0, [pc, #44]	; (80009b8 <printResetSource+0xd0>)
 800098c:	f7ff fdde 	bl	800054c <uartTransmit>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	08005b70 	.word	0x08005b70
 800099c:	08005b80 	.word	0x08005b80
 80009a0:	08005b9c 	.word	0x08005b9c
 80009a4:	08005bb4 	.word	0x08005bb4
 80009a8:	08005bc0 	.word	0x08005bc0
 80009ac:	08005bd4 	.word	0x08005bd4
 80009b0:	08005be4 	.word	0x08005be4
 80009b4:	08005bf4 	.word	0x08005bf4
 80009b8:	08005c00 	.word	0x08005c00

080009bc <ADC_Gaspedal>:
//----------------------------------------------------------------------

// Gaspedal einlesen
//----------------------------------------------------------------------
uint16_t ADC_Gaspedal(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_6;										// ADC Kanal einstellen
 80009d2:	2306      	movs	r3, #6
 80009d4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 80009d6:	2301      	movs	r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 80009da:	2307      	movs	r3, #7
 80009dc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	4811      	ldr	r0, [pc, #68]	; (8000a28 <ADC_Gaspedal+0x6c>)
 80009e4:	f001 fc84 	bl	80022f0 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <ADC_Gaspedal+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 80009ee:	f001 f8a5 	bl	8001b3c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <ADC_Gaspedal+0x6c>)
 80009f4:	f001 fae2 	bl	8001fbc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 80009f8:	2164      	movs	r1, #100	; 0x64
 80009fa:	480b      	ldr	r0, [pc, #44]	; (8000a28 <ADC_Gaspedal+0x6c>)
 80009fc:	f001 fbe0 	bl	80021c0 <HAL_ADC_PollForConversion>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d105      	bne.n	8000a12 <ADC_Gaspedal+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000a06:	4808      	ldr	r0, [pc, #32]	; (8000a28 <ADC_Gaspedal+0x6c>)
 8000a08:	f001 fc65 	bl	80022d6 <HAL_ADC_GetValue>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	82fb      	strh	r3, [r7, #22]
 8000a10:	e002      	b.n	8000a18 <ADC_Gaspedal+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f000 fa04 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <ADC_Gaspedal+0x6c>)
 8000a1a:	f001 fb9d 	bl	8002158 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000a1e:	8afb      	ldrh	r3, [r7, #22]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000028 	.word	0x20000028

08000a2c <ADC_Bremsdruck>:
//----------------------------------------------------------------------

// Bremsdruck einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdruck(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;										// ADC Kanal einstellen
 8000a42:	230e      	movs	r3, #14
 8000a44:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000a46:	2301      	movs	r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <ADC_Bremsdruck+0x6c>)
 8000a54:	f001 fc4c 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <ADC_Bremsdruck+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000a5e:	f001 f86d 	bl	8001b3c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <ADC_Bremsdruck+0x6c>)
 8000a64:	f001 faaa 	bl	8001fbc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000a68:	2164      	movs	r1, #100	; 0x64
 8000a6a:	480b      	ldr	r0, [pc, #44]	; (8000a98 <ADC_Bremsdruck+0x6c>)
 8000a6c:	f001 fba8 	bl	80021c0 <HAL_ADC_PollForConversion>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d105      	bne.n	8000a82 <ADC_Bremsdruck+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000a76:	4808      	ldr	r0, [pc, #32]	; (8000a98 <ADC_Bremsdruck+0x6c>)
 8000a78:	f001 fc2d 	bl	80022d6 <HAL_ADC_GetValue>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	82fb      	strh	r3, [r7, #22]
 8000a80:	e002      	b.n	8000a88 <ADC_Bremsdruck+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000a82:	2003      	movs	r0, #3
 8000a84:	f000 f9cc 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <ADC_Bremsdruck+0x6c>)
 8000a8a:	f001 fb65 	bl	8002158 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000a8e:	8afb      	ldrh	r3, [r7, #22]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000028 	.word	0x20000028

08000a9c <ADC_KL15>:
//----------------------------------------------------------------------

// Spannung KL15 einlesen
//----------------------------------------------------------------------
uint16_t ADC_KL15 (void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_3;										// ADC Kanal einstellen
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000aba:	2307      	movs	r3, #7
 8000abc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4811      	ldr	r0, [pc, #68]	; (8000b08 <ADC_KL15+0x6c>)
 8000ac4:	f001 fc14 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <ADC_KL15+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000ace:	f001 f835 	bl	8001b3c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <ADC_KL15+0x6c>)
 8000ad4:	f001 fa72 	bl	8001fbc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000ad8:	2164      	movs	r1, #100	; 0x64
 8000ada:	480b      	ldr	r0, [pc, #44]	; (8000b08 <ADC_KL15+0x6c>)
 8000adc:	f001 fb70 	bl	80021c0 <HAL_ADC_PollForConversion>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d105      	bne.n	8000af2 <ADC_KL15+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000ae6:	4808      	ldr	r0, [pc, #32]	; (8000b08 <ADC_KL15+0x6c>)
 8000ae8:	f001 fbf5 	bl	80022d6 <HAL_ADC_GetValue>
 8000aec:	4603      	mov	r3, r0
 8000aee:	82fb      	strh	r3, [r7, #22]
 8000af0:	e002      	b.n	8000af8 <ADC_KL15+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000af2:	2003      	movs	r0, #3
 8000af4:	f000 f994 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <ADC_KL15+0x6c>)
 8000afa:	f001 fb2d 	bl	8002158 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000afe:	8afb      	ldrh	r3, [r7, #22]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000028 	.word	0x20000028

08000b0c <ADC_Kuhlwassertemperatur>:
//----------------------------------------------------------------------

// Kuehlwassertemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Kuhlwassertemperatur (void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;										// ADC Kanal einstellen
 8000b22:	2304      	movs	r3, #4
 8000b24:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000b26:	2301      	movs	r3, #1
 8000b28:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4811      	ldr	r0, [pc, #68]	; (8000b78 <ADC_Kuhlwassertemperatur+0x6c>)
 8000b34:	f001 fbdc 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <ADC_Kuhlwassertemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000b3e:	f000 fffd 	bl	8001b3c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000b42:	480d      	ldr	r0, [pc, #52]	; (8000b78 <ADC_Kuhlwassertemperatur+0x6c>)
 8000b44:	f001 fa3a 	bl	8001fbc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000b48:	2164      	movs	r1, #100	; 0x64
 8000b4a:	480b      	ldr	r0, [pc, #44]	; (8000b78 <ADC_Kuhlwassertemperatur+0x6c>)
 8000b4c:	f001 fb38 	bl	80021c0 <HAL_ADC_PollForConversion>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d105      	bne.n	8000b62 <ADC_Kuhlwassertemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000b56:	4808      	ldr	r0, [pc, #32]	; (8000b78 <ADC_Kuhlwassertemperatur+0x6c>)
 8000b58:	f001 fbbd 	bl	80022d6 <HAL_ADC_GetValue>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	82fb      	strh	r3, [r7, #22]
 8000b60:	e002      	b.n	8000b68 <ADC_Kuhlwassertemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000b62:	2003      	movs	r0, #3
 8000b64:	f000 f95c 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <ADC_Kuhlwassertemperatur+0x6c>)
 8000b6a:	f001 faf5 	bl	8002158 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000b6e:	8afb      	ldrh	r3, [r7, #22]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000028 	.word	0x20000028

08000b7c <ADC_Klimaflap>:
//----------------------------------------------------------------------

// Klimaflapstellung einlesen (Position ueber Poti)
//----------------------------------------------------------------------
uint16_t ADC_Klimaflap (void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;										// ADC Kanal einstellen
 8000b92:	2305      	movs	r3, #5
 8000b94:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000b96:	2301      	movs	r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4811      	ldr	r0, [pc, #68]	; (8000be8 <ADC_Klimaflap+0x6c>)
 8000ba4:	f001 fba4 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <ADC_Klimaflap+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000bae:	f000 ffc5 	bl	8001b3c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <ADC_Klimaflap+0x6c>)
 8000bb4:	f001 fa02 	bl	8001fbc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000bb8:	2164      	movs	r1, #100	; 0x64
 8000bba:	480b      	ldr	r0, [pc, #44]	; (8000be8 <ADC_Klimaflap+0x6c>)
 8000bbc:	f001 fb00 	bl	80021c0 <HAL_ADC_PollForConversion>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d105      	bne.n	8000bd2 <ADC_Klimaflap+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000bc6:	4808      	ldr	r0, [pc, #32]	; (8000be8 <ADC_Klimaflap+0x6c>)
 8000bc8:	f001 fb85 	bl	80022d6 <HAL_ADC_GetValue>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	82fb      	strh	r3, [r7, #22]
 8000bd0:	e002      	b.n	8000bd8 <ADC_Klimaflap+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f000 f924 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <ADC_Klimaflap+0x6c>)
 8000bda:	f001 fabd 	bl	8002158 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000bde:	8afb      	ldrh	r3, [r7, #22]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000028 	.word	0x20000028

08000bec <ADC_PCBTemperatur>:
//----------------------------------------------------------------------

// PCB Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_PCBTemperatur (void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;										// ADC Kanal einstellen
 8000c02:	2307      	movs	r3, #7
 8000c04:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000c06:	2301      	movs	r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <ADC_PCBTemperatur+0x6c>)
 8000c14:	f001 fb6c 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <ADC_PCBTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000c1e:	f000 ff8d 	bl	8001b3c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <ADC_PCBTemperatur+0x6c>)
 8000c24:	f001 f9ca 	bl	8001fbc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000c28:	2164      	movs	r1, #100	; 0x64
 8000c2a:	480b      	ldr	r0, [pc, #44]	; (8000c58 <ADC_PCBTemperatur+0x6c>)
 8000c2c:	f001 fac8 	bl	80021c0 <HAL_ADC_PollForConversion>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d105      	bne.n	8000c42 <ADC_PCBTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000c36:	4808      	ldr	r0, [pc, #32]	; (8000c58 <ADC_PCBTemperatur+0x6c>)
 8000c38:	f001 fb4d 	bl	80022d6 <HAL_ADC_GetValue>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	82fb      	strh	r3, [r7, #22]
 8000c40:	e002      	b.n	8000c48 <ADC_PCBTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000c42:	2003      	movs	r0, #3
 8000c44:	f000 f8ec 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <ADC_PCBTemperatur+0x6c>)
 8000c4a:	f001 fa85 	bl	8002158 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000c4e:	8afb      	ldrh	r3, [r7, #22]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000028 	.word	0x20000028

08000c5c <ADC_Return>:
//----------------------------------------------------------------------

// Navibedienelement Return einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Return (void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;										// ADC Kanal einstellen
 8000c72:	2308      	movs	r3, #8
 8000c74:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000c76:	2301      	movs	r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <ADC_Return+0x6c>)
 8000c84:	f001 fb34 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <ADC_Return+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000c8e:	f000 ff55 	bl	8001b3c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <ADC_Return+0x6c>)
 8000c94:	f001 f992 	bl	8001fbc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000c98:	2164      	movs	r1, #100	; 0x64
 8000c9a:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <ADC_Return+0x6c>)
 8000c9c:	f001 fa90 	bl	80021c0 <HAL_ADC_PollForConversion>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d105      	bne.n	8000cb2 <ADC_Return+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000ca6:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <ADC_Return+0x6c>)
 8000ca8:	f001 fb15 	bl	80022d6 <HAL_ADC_GetValue>
 8000cac:	4603      	mov	r3, r0
 8000cae:	82fb      	strh	r3, [r7, #22]
 8000cb0:	e002      	b.n	8000cb8 <ADC_Return+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f000 f8b4 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <ADC_Return+0x6c>)
 8000cba:	f001 fa4d 	bl	8002158 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000cbe:	8afb      	ldrh	r3, [r7, #22]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000028 	.word	0x20000028

08000ccc <ADC_Info>:
//----------------------------------------------------------------------

// Navibedienelement Info einlesen (2 Schalter mit unterschiedlichen Widerstaenden)
//----------------------------------------------------------------------
uint16_t ADC_Info (void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;										// ADC Kanal einstellen
 8000ce2:	2309      	movs	r3, #9
 8000ce4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000cea:	2307      	movs	r3, #7
 8000cec:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <ADC_Info+0x6c>)
 8000cf4:	f001 fafc 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <ADC_Info+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000cfe:	f000 ff1d 	bl	8001b3c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000d02:	480d      	ldr	r0, [pc, #52]	; (8000d38 <ADC_Info+0x6c>)
 8000d04:	f001 f95a 	bl	8001fbc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000d08:	2164      	movs	r1, #100	; 0x64
 8000d0a:	480b      	ldr	r0, [pc, #44]	; (8000d38 <ADC_Info+0x6c>)
 8000d0c:	f001 fa58 	bl	80021c0 <HAL_ADC_PollForConversion>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d105      	bne.n	8000d22 <ADC_Info+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000d16:	4808      	ldr	r0, [pc, #32]	; (8000d38 <ADC_Info+0x6c>)
 8000d18:	f001 fadd 	bl	80022d6 <HAL_ADC_GetValue>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	82fb      	strh	r3, [r7, #22]
 8000d20:	e002      	b.n	8000d28 <ADC_Info+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 f87c 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <ADC_Info+0x6c>)
 8000d2a:	f001 fa15 	bl	8002158 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000d2e:	8afb      	ldrh	r3, [r7, #22]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000028 	.word	0x20000028

08000d3c <ADC_Bremsdrucktemperatur>:
//----------------------------------------------------------------------

// Bremsdrucktemperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_Bremsdrucktemperatur (void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_15;										// ADC Kanal einstellen
 8000d52:	230f      	movs	r3, #15
 8000d54:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000d56:	2301      	movs	r3, #1
 8000d58:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4811      	ldr	r0, [pc, #68]	; (8000da8 <ADC_Bremsdrucktemperatur+0x6c>)
 8000d64:	f001 fac4 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <ADC_Bremsdrucktemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000d6e:	f000 fee5 	bl	8001b3c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000d72:	480d      	ldr	r0, [pc, #52]	; (8000da8 <ADC_Bremsdrucktemperatur+0x6c>)
 8000d74:	f001 f922 	bl	8001fbc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000d78:	2164      	movs	r1, #100	; 0x64
 8000d7a:	480b      	ldr	r0, [pc, #44]	; (8000da8 <ADC_Bremsdrucktemperatur+0x6c>)
 8000d7c:	f001 fa20 	bl	80021c0 <HAL_ADC_PollForConversion>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d105      	bne.n	8000d92 <ADC_Bremsdrucktemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000d86:	4808      	ldr	r0, [pc, #32]	; (8000da8 <ADC_Bremsdrucktemperatur+0x6c>)
 8000d88:	f001 faa5 	bl	80022d6 <HAL_ADC_GetValue>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	82fb      	strh	r3, [r7, #22]
 8000d90:	e002      	b.n	8000d98 <ADC_Bremsdrucktemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000d92:	2003      	movs	r0, #3
 8000d94:	f000 f844 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <ADC_Bremsdrucktemperatur+0x6c>)
 8000d9a:	f001 f9dd 	bl	8002158 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000d9e:	8afb      	ldrh	r3, [r7, #22]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000028 	.word	0x20000028

08000dac <ADC_STMTemperatur>:
//----------------------------------------------------------------------

// STM32 Temperatur einlesen
//----------------------------------------------------------------------
uint16_t ADC_STMTemperatur (void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
	// Temporaere Variable anlegen
	uint16_t ADC_Data = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	82fb      	strh	r3, [r7, #22]

	// ADC1 konfigurieren
	ADC_ChannelConfTypeDef sConfig = {0};
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;								// ADC Kanal einstellen
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <ADC_STMTemperatur+0x6c>)
 8000dc4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;														// Rang einstellen
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;							// ADC Sampletime einstellen
 8000dca:	2307      	movs	r3, #7
 8000dcc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)					// Wenn Config nicht Ok ist
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4812      	ldr	r0, [pc, #72]	; (8000e1c <ADC_STMTemperatur+0x70>)
 8000dd4:	f001 fa8c 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <ADC_STMTemperatur+0x36>
	{
		Error_Handler();													// Fehler HAL ausgeben
 8000dde:	f000 fead 	bl	8001b3c <Error_Handler>
	}

	// ADC Starten, Wert einlesen und ADC Stoppen
	HAL_ADC_Start(&hadc1);													// ADC starten
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <ADC_STMTemperatur+0x70>)
 8000de4:	f001 f8ea 	bl	8001fbc <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)					// Wenn ADC funktioniert
 8000de8:	2164      	movs	r1, #100	; 0x64
 8000dea:	480c      	ldr	r0, [pc, #48]	; (8000e1c <ADC_STMTemperatur+0x70>)
 8000dec:	f001 f9e8 	bl	80021c0 <HAL_ADC_PollForConversion>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d105      	bne.n	8000e02 <ADC_STMTemperatur+0x56>
	{
		// ADC Wert holen
		ADC_Data = HAL_ADC_GetValue(&hadc1);
 8000df6:	4809      	ldr	r0, [pc, #36]	; (8000e1c <ADC_STMTemperatur+0x70>)
 8000df8:	f001 fa6d 	bl	80022d6 <HAL_ADC_GetValue>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	82fb      	strh	r3, [r7, #22]
 8000e00:	e002      	b.n	8000e08 <ADC_STMTemperatur+0x5c>
	}
	else																	// Falls ADC nicht funktioniert
	{
		// Software Error ausgeben
		software_error(ERROR_ADC);
 8000e02:	2003      	movs	r0, #3
 8000e04:	f000 f80c 	bl	8000e20 <software_error>
	}
	HAL_ADC_Stop(&hadc1);													// ADC stoppen
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <ADC_STMTemperatur+0x70>)
 8000e0a:	f001 f9a5 	bl	8002158 <HAL_ADC_Stop>

	//ADC Wert zurueck geben
	return ADC_Data;
 8000e0e:	8afb      	ldrh	r3, [r7, #22]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	10000012 	.word	0x10000012
 8000e1c:	20000028 	.word	0x20000028

08000e20 <software_error>:
//----------------------------------------------------------------------

// Diagnose Funktion falls ein Fehler auftritt
//----------------------------------------------------------------------
void software_error(uint8_t errorcode)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2a:	b672      	cpsid	i
}
 8000e2c:	bf00      	nop
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	//leuchten_out.RedLed = 1;												// Setze Variable
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);		// Fehler LED einschalten
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2104      	movs	r1, #4
 8000e32:	480b      	ldr	r0, [pc, #44]	; (8000e60 <software_error+0x40>)
 8000e34:	f002 f8f8 	bl	8003028 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	//leuchten_out.GreenLed = 0;											// Zuruechsetzen Variable
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);	// Fehler LED ausschalten
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e3e:	4808      	ldr	r0, [pc, #32]	; (8000e60 <software_error+0x40>)
 8000e40:	f002 f8f2 	bl	8003028 <HAL_GPIO_WritePin>

#ifdef DEBUG																// Serielle Kommunukation nur waehrend Debugging
#define SOFTERRORMESSAGE			"\nSoftware Error Handler ausgeloest\n"	// Ausgabe das Fehler aufgetreten ist
	uartTransmit(SOFTERRORMESSAGE,sizeof(SOFTERRORMESSAGE));
 8000e44:	2124      	movs	r1, #36	; 0x24
 8000e46:	4807      	ldr	r0, [pc, #28]	; (8000e64 <software_error+0x44>)
 8000e48:	f7ff fb80 	bl	800054c <uartTransmit>

#define ERRORCODE					"Error Code:\t"							// Ausgabe des Fehlers anhand von Fehlercode
	uartTransmit(ERRORCODE,sizeof(ERRORCODE));
 8000e4c:	210d      	movs	r1, #13
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <software_error+0x48>)
 8000e50:	f7ff fb7c 	bl	800054c <uartTransmit>
	uartTransmitNumber(errorcode, 10);										// Fehlercode ausgeben
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	210a      	movs	r1, #10
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb8b 	bl	8000574 <uartTransmitNumber>
#endif
	while (1);																// Endlosschleife
 8000e5e:	e7fe      	b.n	8000e5e <software_error+0x3e>
 8000e60:	40020400 	.word	0x40020400
 8000e64:	08005c38 	.word	0x08005c38
 8000e68:	08005c5c 	.word	0x08005c5c

08000e6c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e72:	463b      	mov	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e80:	4a21      	ldr	r2, [pc, #132]	; (8000f08 <MX_ADC1_Init+0x9c>)
 8000e82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000eae:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <MX_ADC1_Init+0xa0>)
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000ece:	f001 f831 	bl	8001f34 <HAL_ADC_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ed8:	f000 fe30 	bl	8001b3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000edc:	230e      	movs	r3, #14
 8000ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ee4:	2307      	movs	r3, #7
 8000ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee8:	463b      	mov	r3, r7
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_ADC1_Init+0x98>)
 8000eee:	f001 f9ff 	bl	80022f0 <HAL_ADC_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ef8:	f000 fe20 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000028 	.word	0x20000028
 8000f08:	40012000 	.word	0x40012000
 8000f0c:	0f000001 	.word	0x0f000001

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a2d      	ldr	r2, [pc, #180]	; (8000fe4 <HAL_ADC_MspInit+0xd4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d153      	bne.n	8000fda <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f32:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a2c      	ldr	r2, [pc, #176]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	61bb      	str	r3, [r7, #24]
 8000f48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a1a      	ldr	r2, [pc, #104]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_ADC_MspInit+0xd8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 8000f92:	23f8      	movs	r3, #248	; 0xf8
 8000f94:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f96:	2303      	movs	r3, #3
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4811      	ldr	r0, [pc, #68]	; (8000fec <HAL_ADC_MspInit+0xdc>)
 8000fa6:	f001 fe93 	bl	8002cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8000faa:	2330      	movs	r3, #48	; 0x30
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <HAL_ADC_MspInit+0xe0>)
 8000fbe:	f001 fe87 	bl	8002cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <HAL_ADC_MspInit+0xe4>)
 8000fd6:	f001 fe7b 	bl	8002cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40012000 	.word	0x40012000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_CAN3_Init+0x64>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <MX_CAN3_Init+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_CAN3_Init+0x64>)
 8001004:	2206      	movs	r2, #6
 8001006:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_CAN3_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_CAN3_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_CAN3_Init+0x64>)
 8001016:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800101a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_CAN3_Init+0x64>)
 800101e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001022:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_CAN3_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_CAN3_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_CAN3_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_CAN3_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_CAN3_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_CAN3_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_CAN3_Init+0x64>)
 800104a:	f001 fba1 	bl	8002790 <HAL_CAN_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001054:	f000 fd72 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000070 	.word	0x20000070
 8001060:	40003400 	.word	0x40003400

08001064 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_CAN_MspInit+0x7c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d128      	bne.n	80010d8 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_CAN_MspInit+0x80>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_CAN_MspInit+0x80>)
 800108c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_CAN_MspInit+0x80>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_CAN_MspInit+0x80>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <HAL_CAN_MspInit+0x80>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_CAN_MspInit+0x80>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 80010b6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80010c8:	230b      	movs	r3, #11
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HAL_CAN_MspInit+0x84>)
 80010d4:	f001 fdfc 	bl	8002cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40003400 	.word	0x40003400
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000

080010ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	; 0x38
 80010f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001102:	4bb6      	ldr	r3, [pc, #728]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4ab5      	ldr	r2, [pc, #724]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001108:	f043 0310 	orr.w	r3, r3, #16
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4bb3      	ldr	r3, [pc, #716]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	623b      	str	r3, [r7, #32]
 8001118:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4bb0      	ldr	r3, [pc, #704]	; (80013dc <MX_GPIO_Init+0x2f0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4aaf      	ldr	r2, [pc, #700]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4bad      	ldr	r3, [pc, #692]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001132:	4baa      	ldr	r3, [pc, #680]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4aa9      	ldr	r2, [pc, #676]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001138:	f043 0320 	orr.w	r3, r3, #32
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4ba7      	ldr	r3, [pc, #668]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0320 	and.w	r3, r3, #32
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	4ba4      	ldr	r3, [pc, #656]	; (80013dc <MX_GPIO_Init+0x2f0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4aa3      	ldr	r2, [pc, #652]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4ba1      	ldr	r3, [pc, #644]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b9e      	ldr	r3, [pc, #632]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a9d      	ldr	r2, [pc, #628]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b9b      	ldr	r3, [pc, #620]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b98      	ldr	r3, [pc, #608]	; (80013dc <MX_GPIO_Init+0x2f0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a97      	ldr	r2, [pc, #604]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b95      	ldr	r3, [pc, #596]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001192:	4b92      	ldr	r3, [pc, #584]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a91      	ldr	r2, [pc, #580]	; (80013dc <MX_GPIO_Init+0x2f0>)
 8001198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b8f      	ldr	r3, [pc, #572]	; (80013dc <MX_GPIO_Init+0x2f0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	4b8c      	ldr	r3, [pc, #560]	; (80013dc <MX_GPIO_Init+0x2f0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a8b      	ldr	r2, [pc, #556]	; (80013dc <MX_GPIO_Init+0x2f0>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b89      	ldr	r3, [pc, #548]	; (80013dc <MX_GPIO_Init+0x2f0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80011c2:	2200      	movs	r2, #0
 80011c4:	f248 0187 	movw	r1, #32903	; 0x8087
 80011c8:	4885      	ldr	r0, [pc, #532]	; (80013e0 <MX_GPIO_Init+0x2f4>)
 80011ca:	f001 ff2d 	bl	8003028 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f242 0108 	movw	r1, #8200	; 0x2008
 80011d4:	4883      	ldr	r0, [pc, #524]	; (80013e4 <MX_GPIO_Init+0x2f8>)
 80011d6:	f001 ff27 	bl	8003028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80011da:	2200      	movs	r2, #0
 80011dc:	f24f 013c 	movw	r1, #61500	; 0xf03c
 80011e0:	4881      	ldr	r0, [pc, #516]	; (80013e8 <MX_GPIO_Init+0x2fc>)
 80011e2:	f001 ff21 	bl	8003028 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80011e6:	2200      	movs	r2, #0
 80011e8:	f647 0194 	movw	r1, #30868	; 0x7894
 80011ec:	487f      	ldr	r0, [pc, #508]	; (80013ec <MX_GPIO_Init+0x300>)
 80011ee:	f001 ff1b 	bl	8003028 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80011f2:	2200      	movs	r2, #0
 80011f4:	f64e 2188 	movw	r1, #60040	; 0xea88
 80011f8:	487d      	ldr	r0, [pc, #500]	; (80013f0 <MX_GPIO_Init+0x304>)
 80011fa:	f001 ff15 	bl	8003028 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80011fe:	2200      	movs	r2, #0
 8001200:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8001204:	487b      	ldr	r0, [pc, #492]	; (80013f4 <MX_GPIO_Init+0x308>)
 8001206:	f001 ff0f 	bl	8003028 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001210:	4879      	ldr	r0, [pc, #484]	; (80013f8 <MX_GPIO_Init+0x30c>)
 8001212:	f001 ff09 	bl	8003028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001216:	f248 0387 	movw	r3, #32903	; 0x8087
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	486c      	ldr	r0, [pc, #432]	; (80013e0 <MX_GPIO_Init+0x2f4>)
 8001230:	f001 fd4e 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8001234:	f647 7378 	movw	r3, #32632	; 0x7f78
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	4619      	mov	r1, r3
 8001248:	4865      	ldr	r0, [pc, #404]	; (80013e0 <MX_GPIO_Init+0x2f4>)
 800124a:	f001 fd41 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800124e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	485f      	ldr	r0, [pc, #380]	; (80013e4 <MX_GPIO_Init+0x2f8>)
 8001268:	f001 fd32 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800126c:	f64d 7347 	movw	r3, #57159	; 0xdf47
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001272:	2303      	movs	r3, #3
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	4619      	mov	r1, r3
 8001280:	4858      	ldr	r0, [pc, #352]	; (80013e4 <MX_GPIO_Init+0x2f8>)
 8001282:	f001 fd25 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8001286:	f640 0303 	movw	r3, #2051	; 0x803
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	4853      	ldr	r0, [pc, #332]	; (80013e8 <MX_GPIO_Init+0x2fc>)
 800129c:	f001 fd18 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80012a0:	f24f 033c 	movw	r3, #61500	; 0xf03c
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b6:	4619      	mov	r1, r3
 80012b8:	484b      	ldr	r0, [pc, #300]	; (80013e8 <MX_GPIO_Init+0x2fc>)
 80012ba:	f001 fd09 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 80012be:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c4:	2303      	movs	r3, #3
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	4845      	ldr	r0, [pc, #276]	; (80013e8 <MX_GPIO_Init+0x2fc>)
 80012d4:	f001 fcfc 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 80012d8:	2308      	movs	r3, #8
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e4:	2302      	movs	r3, #2
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	483d      	ldr	r0, [pc, #244]	; (80013e4 <MX_GPIO_Init+0x2f8>)
 80012f0:	f001 fcee 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 80012f4:	f640 6307 	movw	r3, #3591	; 0xe07
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	483b      	ldr	r0, [pc, #236]	; (80013f8 <MX_GPIO_Init+0x30c>)
 800130a:	f001 fce1 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 800130e:	f647 0394 	movw	r3, #30868	; 0x7894
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	4619      	mov	r1, r3
 8001326:	4831      	ldr	r0, [pc, #196]	; (80013ec <MX_GPIO_Init+0x300>)
 8001328:	f001 fcd2 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 800132c:	f241 13f3 	movw	r3, #4595	; 0x11f3
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	482c      	ldr	r0, [pc, #176]	; (80013f4 <MX_GPIO_Init+0x308>)
 8001342:	f001 fcc5 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 8001346:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	4824      	ldr	r0, [pc, #144]	; (80013ec <MX_GPIO_Init+0x300>)
 800135c:	f001 fcb8 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 8001360:	f241 5310 	movw	r3, #5392	; 0x1510
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	481e      	ldr	r0, [pc, #120]	; (80013f0 <MX_GPIO_Init+0x304>)
 8001376:	f001 fcab 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 800137a:	f64e 2388 	movw	r3, #60040	; 0xea88
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	4817      	ldr	r0, [pc, #92]	; (80013f0 <MX_GPIO_Init+0x304>)
 8001394:	f001 fc9c 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001398:	f64e 630c 	movw	r3, #60940	; 0xee0c
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	4619      	mov	r1, r3
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <MX_GPIO_Init+0x308>)
 80013b2:	f001 fc8d 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	4806      	ldr	r0, [pc, #24]	; (80013e4 <MX_GPIO_Init+0x2f8>)
 80013ca:	f001 fc81 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 80013ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	e00f      	b.n	80013fc <MX_GPIO_Init+0x310>
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40021400 	.word	0x40021400
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021800 	.word	0x40021800
 80013f8:	40020000 	.word	0x40020000
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	480f      	ldr	r0, [pc, #60]	; (8001448 <MX_GPIO_Init+0x35c>)
 800140a:	f001 fc61 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 800140e:	2307      	movs	r3, #7
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001412:	2303      	movs	r3, #3
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141e:	4619      	mov	r1, r3
 8001420:	480a      	ldr	r0, [pc, #40]	; (800144c <MX_GPIO_Init+0x360>)
 8001422:	f001 fc55 	bl	8002cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001426:	f44f 7358 	mov.w	r3, #864	; 0x360
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142c:	2303      	movs	r3, #3
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_GPIO_Init+0x364>)
 800143c:	f001 fc48 	bl	8002cd0 <HAL_GPIO_Init>

}
 8001440:	bf00      	nop
 8001442:	3738      	adds	r7, #56	; 0x38
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40020000 	.word	0x40020000
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40020400 	.word	0x40020400

08001454 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001458:	f3bf 8f4f 	dsb	sy
}
 800145c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <__NVIC_SystemReset+0x24>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001466:	4904      	ldr	r1, [pc, #16]	; (8001478 <__NVIC_SystemReset+0x24>)
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_SystemReset+0x28>)
 800146a:	4313      	orrs	r3, r2
 800146c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800146e:	f3bf 8f4f 	dsb	sy
}
 8001472:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <__NVIC_SystemReset+0x20>
 8001478:	e000ed00 	.word	0xe000ed00
 800147c:	05fa0004 	.word	0x05fa0004

08001480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t ADC_VAL[10] = {0};
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001494:	f000 fc85 	bl	8001da2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001498:	f000 fa50 	bl	800193c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149c:	f7ff fe26 	bl	80010ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014a0:	f000 fbc0 	bl	8001c24 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 80014a4:	f7ff fda8 	bl	8000ff8 <MX_CAN3_Init>
  MX_ADC1_Init();
 80014a8:	f7ff fce0 	bl	8000e6c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 80014ac:	f7ff f9ca 	bl	8000844 <readResetSource>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fa18 	bl	80008e8 <printResetSource>

  	/* Teste serielle Schnittstelle*/
  	#define TEST_STRING_UART  "\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80014b8:	213a      	movs	r1, #58	; 0x3a
 80014ba:	48bc      	ldr	r0, [pc, #752]	; (80017ac <main+0x32c>)
 80014bc:	f7ff f846 	bl	800054c <uartTransmit>

  	/* Sammel Systeminformationen */
  	collectSystemInfo();
 80014c0:	f7ff f99e 	bl	8000800 <collectSystemInfo>
#endif

    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	48b9      	ldr	r0, [pc, #740]	; (80017b0 <main+0x330>)
 80014ca:	f001 fdad 	bl	8003028 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80014ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d2:	f000 fcc3 	bl	8001e5c <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	48b5      	ldr	r0, [pc, #724]	; (80017b0 <main+0x330>)
 80014dc:	f001 fda4 	bl	8003028 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80014e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014e4:	f000 fcba 	bl	8001e5c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ee:	48b0      	ldr	r0, [pc, #704]	; (80017b0 <main+0x330>)
 80014f0:	f001 fd9a 	bl	8003028 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80014f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f8:	f000 fcb0 	bl	8001e5c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001502:	48ab      	ldr	r0, [pc, #684]	; (80017b0 <main+0x330>)
 8001504:	f001 fd90 	bl	8003028 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800150c:	f000 fca6 	bl	8001e5c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2104      	movs	r1, #4
 8001514:	48a6      	ldr	r0, [pc, #664]	; (80017b0 <main+0x330>)
 8001516:	f001 fd87 	bl	8003028 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800151a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151e:	f000 fc9d 	bl	8001e5c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2104      	movs	r1, #4
 8001526:	48a2      	ldr	r0, [pc, #648]	; (80017b0 <main+0x330>)
 8001528:	f001 fd7e 	bl	8003028 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800152c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001530:	f000 fc94 	bl	8001e5c <HAL_Delay>

  	/* Lese alle Eingaenge */
  	//readall_inputs();

  	// Lese Temperatur
  	uartTransmit("Temperatur messen\n", 18);
 8001534:	2112      	movs	r1, #18
 8001536:	489f      	ldr	r0, [pc, #636]	; (80017b4 <main+0x334>)
 8001538:	f7ff f808 	bl	800054c <uartTransmit>
	uartTransmitNumber(*TEMP30_CAL_VALUE, 10);
 800153c:	4b9e      	ldr	r3, [pc, #632]	; (80017b8 <main+0x338>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	210a      	movs	r1, #10
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f816 	bl	8000574 <uartTransmitNumber>
	uartTransmit("\n", 1);
 8001548:	2101      	movs	r1, #1
 800154a:	489c      	ldr	r0, [pc, #624]	; (80017bc <main+0x33c>)
 800154c:	f7fe fffe 	bl	800054c <uartTransmit>
	uartTransmitNumber(*TEMP110_CAL_VALUE, 10);
 8001550:	4b9b      	ldr	r3, [pc, #620]	; (80017c0 <main+0x340>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	210a      	movs	r1, #10
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f80c 	bl	8000574 <uartTransmitNumber>
	uartTransmit("\n", 1);
 800155c:	2101      	movs	r1, #1
 800155e:	4897      	ldr	r0, [pc, #604]	; (80017bc <main+0x33c>)
 8001560:	f7fe fff4 	bl	800054c <uartTransmit>

	ADC_VAL[4] = ADC_STMTemperatur();
 8001564:	f7ff fc22 	bl	8000dac <ADC_STMTemperatur>
 8001568:	4603      	mov	r3, r0
 800156a:	81bb      	strh	r3, [r7, #12]
	if(ADC_VAL[4] > 900 && ADC_VAL[4] < 1100)
 800156c:	89bb      	ldrh	r3, [r7, #12]
 800156e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001572:	d930      	bls.n	80015d6 <main+0x156>
 8001574:	89bb      	ldrh	r3, [r7, #12]
 8001576:	f240 424b 	movw	r2, #1099	; 0x44b
 800157a:	4293      	cmp	r3, r2
 800157c:	d82b      	bhi.n	80015d6 <main+0x156>
	{
		temperature = (int32_t)((TEMP110 - TEMP30) / ((float)(*TEMP110_CAL_VALUE) - (float)(*TEMP30_CAL_VALUE)) * (ADC_VAL[4] - (float)(*TEMP30_CAL_VALUE)) + TEMP30);
 800157e:	4b90      	ldr	r3, [pc, #576]	; (80017c0 <main+0x340>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800158a:	4b8b      	ldr	r3, [pc, #556]	; (80017b8 <main+0x338>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159a:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80017c4 <main+0x344>
 800159e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015a2:	89bb      	ldrh	r3, [r7, #12]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ac:	4b82      	ldr	r3, [pc, #520]	; (80017b8 <main+0x338>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80015c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015cc:	ee17 2a90 	vmov	r2, s15
 80015d0:	4b7d      	ldr	r3, [pc, #500]	; (80017c8 <main+0x348>)
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e003      	b.n	80015de <main+0x15e>
	}
	else
	{
		temperature = -273;
 80015d6:	4b7c      	ldr	r3, [pc, #496]	; (80017c8 <main+0x348>)
 80015d8:	f46f 7288 	mvn.w	r2, #272	; 0x110
 80015dc:	601a      	str	r2, [r3, #0]
	}
	uartTransmitNumber(temperature, 10);
 80015de:	4b7a      	ldr	r3, [pc, #488]	; (80017c8 <main+0x348>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	210a      	movs	r1, #10
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ffc5 	bl	8000574 <uartTransmitNumber>
	uartTransmit("\n", 1);
 80015ea:	2101      	movs	r1, #1
 80015ec:	4873      	ldr	r0, [pc, #460]	; (80017bc <main+0x33c>)
 80015ee:	f7fe ffad 	bl	800054c <uartTransmit>

	// Lese alle ADC-Eingaenge
	ADC_VAL[0] = ADC_KL15();
 80015f2:	f7ff fa53 	bl	8000a9c <ADC_KL15>
 80015f6:	4603      	mov	r3, r0
 80015f8:	80bb      	strh	r3, [r7, #4]
	ADC_VAL[1] = ADC_Kuhlwassertemperatur();
 80015fa:	f7ff fa87 	bl	8000b0c <ADC_Kuhlwassertemperatur>
 80015fe:	4603      	mov	r3, r0
 8001600:	80fb      	strh	r3, [r7, #6]
	ADC_VAL[2] = ADC_Klimaflap();
 8001602:	f7ff fabb 	bl	8000b7c <ADC_Klimaflap>
 8001606:	4603      	mov	r3, r0
 8001608:	813b      	strh	r3, [r7, #8]
	ADC_VAL[3] = ADC_Gaspedal();
 800160a:	f7ff f9d7 	bl	80009bc <ADC_Gaspedal>
 800160e:	4603      	mov	r3, r0
 8001610:	817b      	strh	r3, [r7, #10]
	ADC_VAL[4] = ADC_PCBTemperatur();
 8001612:	f7ff faeb 	bl	8000bec <ADC_PCBTemperatur>
 8001616:	4603      	mov	r3, r0
 8001618:	81bb      	strh	r3, [r7, #12]
	ADC_VAL[5] = ADC_Return();
 800161a:	f7ff fb1f 	bl	8000c5c <ADC_Return>
 800161e:	4603      	mov	r3, r0
 8001620:	81fb      	strh	r3, [r7, #14]
	ADC_VAL[6] = ADC_Info();
 8001622:	f7ff fb53 	bl	8000ccc <ADC_Info>
 8001626:	4603      	mov	r3, r0
 8001628:	823b      	strh	r3, [r7, #16]
	ADC_VAL[7] = ADC_Bremsdruck();
 800162a:	f7ff f9ff 	bl	8000a2c <ADC_Bremsdruck>
 800162e:	4603      	mov	r3, r0
 8001630:	827b      	strh	r3, [r7, #18]
	ADC_VAL[8] = ADC_Bremsdrucktemperatur();
 8001632:	f7ff fb83 	bl	8000d3c <ADC_Bremsdrucktemperatur>
 8001636:	4603      	mov	r3, r0
 8001638:	82bb      	strh	r3, [r7, #20]
	ADC_VAL[9] = ADC_STMTemperatur();
 800163a:	f7ff fbb7 	bl	8000dac <ADC_STMTemperatur>
 800163e:	4603      	mov	r3, r0
 8001640:	82fb      	strh	r3, [r7, #22]

	// Auswertung
	#define ADC_OK				"\nADC Value ist in Ordnung\n"
	#define ADC_NOK				"\nADC Value ist nicht in Ordnung\n"

	uartTransmit("KL15: ", 6);
 8001642:	2106      	movs	r1, #6
 8001644:	4861      	ldr	r0, [pc, #388]	; (80017cc <main+0x34c>)
 8001646:	f7fe ff81 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[0], 10);
 800164a:	88bb      	ldrh	r3, [r7, #4]
 800164c:	210a      	movs	r1, #10
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff90 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[0] > 3030 || ADC_VAL[0] < 2980)						// @12V Versorgungsspannung
 8001654:	88bb      	ldrh	r3, [r7, #4]
 8001656:	f640 32d6 	movw	r2, #3030	; 0xbd6
 800165a:	4293      	cmp	r3, r2
 800165c:	d804      	bhi.n	8001668 <main+0x1e8>
 800165e:	88bb      	ldrh	r3, [r7, #4]
 8001660:	f640 32a3 	movw	r2, #2979	; 0xba3
 8001664:	4293      	cmp	r3, r2
 8001666:	d804      	bhi.n	8001672 <main+0x1f2>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 8001668:	2121      	movs	r1, #33	; 0x21
 800166a:	4859      	ldr	r0, [pc, #356]	; (80017d0 <main+0x350>)
 800166c:	f7fe ff6e 	bl	800054c <uartTransmit>
 8001670:	e003      	b.n	800167a <main+0x1fa>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 8001672:	211b      	movs	r1, #27
 8001674:	4857      	ldr	r0, [pc, #348]	; (80017d4 <main+0x354>)
 8001676:	f7fe ff69 	bl	800054c <uartTransmit>

	uartTransmit("\nKühlwasser: ", 14);
 800167a:	210e      	movs	r1, #14
 800167c:	4856      	ldr	r0, [pc, #344]	; (80017d8 <main+0x358>)
 800167e:	f7fe ff65 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[1], 10);
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	210a      	movs	r1, #10
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff74 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[1] > 3480 || ADC_VAL[1] < 3455)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	f640 5298 	movw	r2, #3480	; 0xd98
 8001692:	4293      	cmp	r3, r2
 8001694:	d804      	bhi.n	80016a0 <main+0x220>
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	f640 527e 	movw	r2, #3454	; 0xd7e
 800169c:	4293      	cmp	r3, r2
 800169e:	d804      	bhi.n	80016aa <main+0x22a>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 80016a0:	2121      	movs	r1, #33	; 0x21
 80016a2:	484b      	ldr	r0, [pc, #300]	; (80017d0 <main+0x350>)
 80016a4:	f7fe ff52 	bl	800054c <uartTransmit>
 80016a8:	e003      	b.n	80016b2 <main+0x232>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 80016aa:	211b      	movs	r1, #27
 80016ac:	4849      	ldr	r0, [pc, #292]	; (80017d4 <main+0x354>)
 80016ae:	f7fe ff4d 	bl	800054c <uartTransmit>

	uartTransmit("\nKlimaFlap: ", 12);
 80016b2:	210c      	movs	r1, #12
 80016b4:	4849      	ldr	r0, [pc, #292]	; (80017dc <main+0x35c>)
 80016b6:	f7fe ff49 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[2], 10);
 80016ba:	893b      	ldrh	r3, [r7, #8]
 80016bc:	210a      	movs	r1, #10
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff58 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[2] > 20)
 80016c4:	893b      	ldrh	r3, [r7, #8]
 80016c6:	2b14      	cmp	r3, #20
 80016c8:	d904      	bls.n	80016d4 <main+0x254>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 80016ca:	2121      	movs	r1, #33	; 0x21
 80016cc:	4840      	ldr	r0, [pc, #256]	; (80017d0 <main+0x350>)
 80016ce:	f7fe ff3d 	bl	800054c <uartTransmit>
 80016d2:	e003      	b.n	80016dc <main+0x25c>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 80016d4:	211b      	movs	r1, #27
 80016d6:	483f      	ldr	r0, [pc, #252]	; (80017d4 <main+0x354>)
 80016d8:	f7fe ff38 	bl	800054c <uartTransmit>

	uartTransmit("\nGas: ", 6);
 80016dc:	2106      	movs	r1, #6
 80016de:	4840      	ldr	r0, [pc, #256]	; (80017e0 <main+0x360>)
 80016e0:	f7fe ff34 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[3], 10);
 80016e4:	897b      	ldrh	r3, [r7, #10]
 80016e6:	210a      	movs	r1, #10
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff43 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[3] > 250 || ADC_VAL[3] < 200)
 80016ee:	897b      	ldrh	r3, [r7, #10]
 80016f0:	2bfa      	cmp	r3, #250	; 0xfa
 80016f2:	d802      	bhi.n	80016fa <main+0x27a>
 80016f4:	897b      	ldrh	r3, [r7, #10]
 80016f6:	2bc7      	cmp	r3, #199	; 0xc7
 80016f8:	d804      	bhi.n	8001704 <main+0x284>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 80016fa:	2121      	movs	r1, #33	; 0x21
 80016fc:	4834      	ldr	r0, [pc, #208]	; (80017d0 <main+0x350>)
 80016fe:	f7fe ff25 	bl	800054c <uartTransmit>
 8001702:	e003      	b.n	800170c <main+0x28c>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 8001704:	211b      	movs	r1, #27
 8001706:	4833      	ldr	r0, [pc, #204]	; (80017d4 <main+0x354>)
 8001708:	f7fe ff20 	bl	800054c <uartTransmit>

	uartTransmit("\nPCB: ", 6);
 800170c:	2106      	movs	r1, #6
 800170e:	4835      	ldr	r0, [pc, #212]	; (80017e4 <main+0x364>)
 8001710:	f7fe ff1c 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[4], 10);
 8001714:	89bb      	ldrh	r3, [r7, #12]
 8001716:	210a      	movs	r1, #10
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ff2b 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[4] > 2000 || ADC_VAL[4] < 1970)
 800171e:	89bb      	ldrh	r3, [r7, #12]
 8001720:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001724:	d804      	bhi.n	8001730 <main+0x2b0>
 8001726:	89bb      	ldrh	r3, [r7, #12]
 8001728:	f240 72b1 	movw	r2, #1969	; 0x7b1
 800172c:	4293      	cmp	r3, r2
 800172e:	d804      	bhi.n	800173a <main+0x2ba>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 8001730:	2121      	movs	r1, #33	; 0x21
 8001732:	4827      	ldr	r0, [pc, #156]	; (80017d0 <main+0x350>)
 8001734:	f7fe ff0a 	bl	800054c <uartTransmit>
 8001738:	e003      	b.n	8001742 <main+0x2c2>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 800173a:	211b      	movs	r1, #27
 800173c:	4825      	ldr	r0, [pc, #148]	; (80017d4 <main+0x354>)
 800173e:	f7fe ff05 	bl	800054c <uartTransmit>

	uartTransmit("\nReturn: ", 9);
 8001742:	2109      	movs	r1, #9
 8001744:	4828      	ldr	r0, [pc, #160]	; (80017e8 <main+0x368>)
 8001746:	f7fe ff01 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[5], 10);
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	210a      	movs	r1, #10
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe ff10 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[5] > 3070 || ADC_VAL[5] < 3000)						// Mit Konsolenelement
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	f640 32fe 	movw	r2, #3070	; 0xbfe
 800175a:	4293      	cmp	r3, r2
 800175c:	d804      	bhi.n	8001768 <main+0x2e8>
 800175e:	89fb      	ldrh	r3, [r7, #14]
 8001760:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001764:	4293      	cmp	r3, r2
 8001766:	d804      	bhi.n	8001772 <main+0x2f2>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 8001768:	2121      	movs	r1, #33	; 0x21
 800176a:	4819      	ldr	r0, [pc, #100]	; (80017d0 <main+0x350>)
 800176c:	f7fe feee 	bl	800054c <uartTransmit>
 8001770:	e003      	b.n	800177a <main+0x2fa>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 8001772:	211b      	movs	r1, #27
 8001774:	4817      	ldr	r0, [pc, #92]	; (80017d4 <main+0x354>)
 8001776:	f7fe fee9 	bl	800054c <uartTransmit>

	uartTransmit("\nInfo: ", 7);
 800177a:	2107      	movs	r1, #7
 800177c:	481b      	ldr	r0, [pc, #108]	; (80017ec <main+0x36c>)
 800177e:	f7fe fee5 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[6], 10);
 8001782:	8a3b      	ldrh	r3, [r7, #16]
 8001784:	210a      	movs	r1, #10
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fef4 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[6] > 3070 || ADC_VAL[6] < 3000)						// Mit Konsolenelement
 800178c:	8a3b      	ldrh	r3, [r7, #16]
 800178e:	f640 32fe 	movw	r2, #3070	; 0xbfe
 8001792:	4293      	cmp	r3, r2
 8001794:	d804      	bhi.n	80017a0 <main+0x320>
 8001796:	8a3b      	ldrh	r3, [r7, #16]
 8001798:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800179c:	4293      	cmp	r3, r2
 800179e:	d827      	bhi.n	80017f0 <main+0x370>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 80017a0:	2121      	movs	r1, #33	; 0x21
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <main+0x350>)
 80017a4:	f7fe fed2 	bl	800054c <uartTransmit>
 80017a8:	e026      	b.n	80017f8 <main+0x378>
 80017aa:	bf00      	nop
 80017ac:	08005c6c 	.word	0x08005c6c
 80017b0:	40020400 	.word	0x40020400
 80017b4:	08005ca8 	.word	0x08005ca8
 80017b8:	1ff0f44c 	.word	0x1ff0f44c
 80017bc:	08005cbc 	.word	0x08005cbc
 80017c0:	1ff0f44e 	.word	0x1ff0f44e
 80017c4:	42a00000 	.word	0x42a00000
 80017c8:	20000098 	.word	0x20000098
 80017cc:	08005cc0 	.word	0x08005cc0
 80017d0:	08005cc8 	.word	0x08005cc8
 80017d4:	08005cec 	.word	0x08005cec
 80017d8:	08005d08 	.word	0x08005d08
 80017dc:	08005d18 	.word	0x08005d18
 80017e0:	08005d28 	.word	0x08005d28
 80017e4:	08005d30 	.word	0x08005d30
 80017e8:	08005d38 	.word	0x08005d38
 80017ec:	08005d44 	.word	0x08005d44
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 80017f0:	211b      	movs	r1, #27
 80017f2:	4847      	ldr	r0, [pc, #284]	; (8001910 <main+0x490>)
 80017f4:	f7fe feaa 	bl	800054c <uartTransmit>

	uartTransmit("\nBremsdruck: ", 13);
 80017f8:	210d      	movs	r1, #13
 80017fa:	4846      	ldr	r0, [pc, #280]	; (8001914 <main+0x494>)
 80017fc:	f7fe fea6 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[7], 10);
 8001800:	8a7b      	ldrh	r3, [r7, #18]
 8001802:	210a      	movs	r1, #10
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe feb5 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[7] > 1500 || ADC_VAL[7] < 1450)						// @Umgebungsdruck
 800180a:	8a7b      	ldrh	r3, [r7, #18]
 800180c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001810:	4293      	cmp	r3, r2
 8001812:	d804      	bhi.n	800181e <main+0x39e>
 8001814:	8a7b      	ldrh	r3, [r7, #18]
 8001816:	f240 52a9 	movw	r2, #1449	; 0x5a9
 800181a:	4293      	cmp	r3, r2
 800181c:	d804      	bhi.n	8001828 <main+0x3a8>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 800181e:	2121      	movs	r1, #33	; 0x21
 8001820:	483d      	ldr	r0, [pc, #244]	; (8001918 <main+0x498>)
 8001822:	f7fe fe93 	bl	800054c <uartTransmit>
 8001826:	e003      	b.n	8001830 <main+0x3b0>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 8001828:	211b      	movs	r1, #27
 800182a:	4839      	ldr	r0, [pc, #228]	; (8001910 <main+0x490>)
 800182c:	f7fe fe8e 	bl	800054c <uartTransmit>

	uartTransmit("\nBremstemp: ", 12);
 8001830:	210c      	movs	r1, #12
 8001832:	483a      	ldr	r0, [pc, #232]	; (800191c <main+0x49c>)
 8001834:	f7fe fe8a 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[8], 10);
 8001838:	8abb      	ldrh	r3, [r7, #20]
 800183a:	210a      	movs	r1, #10
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe99 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[8] > 2300 || ADC_VAL[8] < 2250)						// @Zimmertemperatur
 8001842:	8abb      	ldrh	r3, [r7, #20]
 8001844:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001848:	4293      	cmp	r3, r2
 800184a:	d804      	bhi.n	8001856 <main+0x3d6>
 800184c:	8abb      	ldrh	r3, [r7, #20]
 800184e:	f640 02c9 	movw	r2, #2249	; 0x8c9
 8001852:	4293      	cmp	r3, r2
 8001854:	d804      	bhi.n	8001860 <main+0x3e0>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 8001856:	2121      	movs	r1, #33	; 0x21
 8001858:	482f      	ldr	r0, [pc, #188]	; (8001918 <main+0x498>)
 800185a:	f7fe fe77 	bl	800054c <uartTransmit>
 800185e:	e003      	b.n	8001868 <main+0x3e8>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 8001860:	211b      	movs	r1, #27
 8001862:	482b      	ldr	r0, [pc, #172]	; (8001910 <main+0x490>)
 8001864:	f7fe fe72 	bl	800054c <uartTransmit>

	uartTransmit("\nSTM Temp: ", 11);
 8001868:	210b      	movs	r1, #11
 800186a:	482d      	ldr	r0, [pc, #180]	; (8001920 <main+0x4a0>)
 800186c:	f7fe fe6e 	bl	800054c <uartTransmit>
	uartTransmitNumber(ADC_VAL[9], 10);
 8001870:	8afb      	ldrh	r3, [r7, #22]
 8001872:	210a      	movs	r1, #10
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe7d 	bl	8000574 <uartTransmitNumber>
	if (ADC_VAL[9] > 955 || ADC_VAL[9] < 935)						// Nach 2h Betrieb
 800187a:	8afb      	ldrh	r3, [r7, #22]
 800187c:	f5b3 7f6f 	cmp.w	r3, #956	; 0x3bc
 8001880:	d204      	bcs.n	800188c <main+0x40c>
 8001882:	8afb      	ldrh	r3, [r7, #22]
 8001884:	f240 32a6 	movw	r2, #934	; 0x3a6
 8001888:	4293      	cmp	r3, r2
 800188a:	d804      	bhi.n	8001896 <main+0x416>
		uartTransmit(ADC_NOK, sizeof(ADC_NOK));
 800188c:	2121      	movs	r1, #33	; 0x21
 800188e:	4822      	ldr	r0, [pc, #136]	; (8001918 <main+0x498>)
 8001890:	f7fe fe5c 	bl	800054c <uartTransmit>
 8001894:	e003      	b.n	800189e <main+0x41e>
	else
		uartTransmit(ADC_OK, sizeof(ADC_OK));
 8001896:	211b      	movs	r1, #27
 8001898:	481d      	ldr	r0, [pc, #116]	; (8001910 <main+0x490>)
 800189a:	f7fe fe57 	bl	800054c <uartTransmit>

	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a4:	481f      	ldr	r0, [pc, #124]	; (8001924 <main+0x4a4>)
 80018a6:	f001 fbbf 	bl	8003028 <HAL_GPIO_WritePin>
	HAL_Delay(4500);
 80018aa:	f241 1094 	movw	r0, #4500	; 0x1194
 80018ae:	f000 fad5 	bl	8001e5c <HAL_Delay>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b8:	481a      	ldr	r0, [pc, #104]	; (8001924 <main+0x4a4>)
 80018ba:	f001 fbb5 	bl	8003028 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80018be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018c2:	f000 facb 	bl	8001e5c <HAL_Delay>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018cc:	4815      	ldr	r0, [pc, #84]	; (8001924 <main+0x4a4>)
 80018ce:	f001 fbab 	bl	8003028 <HAL_GPIO_WritePin>
    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <main+0x4a8>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <main+0x4ac>)
 80018da:	4413      	add	r3, r2
 80018dc:	2201      	movs	r2, #1
 80018de:	4619      	mov	r1, r3
 80018e0:	4813      	ldr	r0, [pc, #76]	; (8001930 <main+0x4b0>)
 80018e2:	f002 fdb2 	bl	800444a <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (UART2_msg[0] == 1)
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <main+0x4b4>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <main+0x47e>
	  {
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\nSystem Reset\r\n", 15, 100);
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	220f      	movs	r2, #15
 80018f2:	4911      	ldr	r1, [pc, #68]	; (8001938 <main+0x4b8>)
 80018f4:	480e      	ldr	r0, [pc, #56]	; (8001930 <main+0x4b0>)
 80018f6:	f002 fd25 	bl	8004344 <HAL_UART_Transmit>
		  NVIC_SystemReset();
 80018fa:	f7ff fdab 	bl	8001454 <__NVIC_SystemReset>
	  }
	  HAL_Delay(1000);
 80018fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001902:	f000 faab 	bl	8001e5c <HAL_Delay>
	  HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	4806      	ldr	r0, [pc, #24]	; (8001924 <main+0x4a4>)
 800190a:	f001 fba6 	bl	800305a <HAL_GPIO_TogglePin>
	  if (UART2_msg[0] == 1)
 800190e:	e7ea      	b.n	80018e6 <main+0x466>
 8001910:	08005cec 	.word	0x08005cec
 8001914:	08005d4c 	.word	0x08005d4c
 8001918:	08005cc8 	.word	0x08005cc8
 800191c:	08005d5c 	.word	0x08005d5c
 8001920:	08005d6c 	.word	0x08005d6c
 8001924:	40020400 	.word	0x40020400
 8001928:	200000b4 	.word	0x200000b4
 800192c:	2000009c 	.word	0x2000009c
 8001930:	200000b8 	.word	0x200000b8
 8001934:	200000a8 	.word	0x200000a8
 8001938:	08005d78 	.word	0x08005d78

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b094      	sub	sp, #80	; 0x50
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	2234      	movs	r2, #52	; 0x34
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f003 fffc 	bl	8005948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001960:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <SystemClock_Config+0xd8>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	4a2b      	ldr	r2, [pc, #172]	; (8001a14 <SystemClock_Config+0xd8>)
 8001966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196a:	6413      	str	r3, [r2, #64]	; 0x40
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <SystemClock_Config+0xd8>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <SystemClock_Config+0xdc>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001980:	4a25      	ldr	r2, [pc, #148]	; (8001a18 <SystemClock_Config+0xdc>)
 8001982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <SystemClock_Config+0xdc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001994:	2301      	movs	r3, #1
 8001996:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800199e:	2302      	movs	r3, #2
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80019a8:	2319      	movs	r3, #25
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80019ac:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80019b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019b6:	2302      	movs	r3, #2
 80019b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019ba:	2302      	movs	r3, #2
 80019bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 fbb4 	bl	8003130 <HAL_RCC_OscConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019ce:	f000 f8b5 	bl	8001b3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019d2:	f001 fb5d 	bl	8003090 <HAL_PWREx_EnableOverDrive>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80019dc:	f000 f8ae 	bl	8001b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e0:	230f      	movs	r3, #15
 80019e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e4:	2302      	movs	r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	2103      	movs	r1, #3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 fe45 	bl	800368c <HAL_RCC_ClockConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001a08:	f000 f898 	bl	8001b3c <Error_Handler>
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3750      	adds	r7, #80	; 0x50
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40007000 	.word	0x40007000

08001a1c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &UART2_rxBuffer[uart_count], 1, 100);
 8001a24:	4b3c      	ldr	r3, [pc, #240]	; (8001b18 <HAL_UART_RxCpltCallback+0xfc>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b3c      	ldr	r3, [pc, #240]	; (8001b1c <HAL_UART_RxCpltCallback+0x100>)
 8001a2c:	18d1      	adds	r1, r2, r3
 8001a2e:	2364      	movs	r3, #100	; 0x64
 8001a30:	2201      	movs	r2, #1
 8001a32:	483b      	ldr	r0, [pc, #236]	; (8001b20 <HAL_UART_RxCpltCallback+0x104>)
 8001a34:	f002 fc86 	bl	8004344 <HAL_UART_Transmit>

	if (UART2_rxBuffer[uart_count] == 0x7F)
 8001a38:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <HAL_UART_RxCpltCallback+0xfc>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <HAL_UART_RxCpltCallback+0x100>)
 8001a40:	5c9b      	ldrb	r3, [r3, r2]
 8001a42:	2b7f      	cmp	r3, #127	; 0x7f
 8001a44:	d106      	bne.n	8001a54 <HAL_UART_RxCpltCallback+0x38>
	{
		uart_count--;
 8001a46:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <HAL_UART_RxCpltCallback+0xfc>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <HAL_UART_RxCpltCallback+0xfc>)
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	e005      	b.n	8001a60 <HAL_UART_RxCpltCallback+0x44>
	}
	else
	{
		uart_count++;
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <HAL_UART_RxCpltCallback+0xfc>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <HAL_UART_RxCpltCallback+0xfc>)
 8001a5e:	701a      	strb	r2, [r3, #0]
	}

	if (UART2_rxBuffer[uart_count-1] == '\r')
 8001a60:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <HAL_UART_RxCpltCallback+0xfc>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	4a2d      	ldr	r2, [pc, #180]	; (8001b1c <HAL_UART_RxCpltCallback+0x100>)
 8001a68:	5cd3      	ldrb	r3, [r2, r3]
 8001a6a:	2b0d      	cmp	r3, #13
 8001a6c:	d12a      	bne.n	8001ac4 <HAL_UART_RxCpltCallback+0xa8>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"\nEingabe OK\r\n", 13, 100);
 8001a6e:	2364      	movs	r3, #100	; 0x64
 8001a70:	220d      	movs	r2, #13
 8001a72:	492c      	ldr	r1, [pc, #176]	; (8001b24 <HAL_UART_RxCpltCallback+0x108>)
 8001a74:	482a      	ldr	r0, [pc, #168]	; (8001b20 <HAL_UART_RxCpltCallback+0x104>)
 8001a76:	f002 fc65 	bl	8004344 <HAL_UART_Transmit>
		if (UART2_rxBuffer[0] == 'R' && UART2_rxBuffer[1] == 'E' && UART2_rxBuffer[2] == 'S')
 8001a7a:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_UART_RxCpltCallback+0x100>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b52      	cmp	r3, #82	; 0x52
 8001a80:	d11d      	bne.n	8001abe <HAL_UART_RxCpltCallback+0xa2>
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <HAL_UART_RxCpltCallback+0x100>)
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	2b45      	cmp	r3, #69	; 0x45
 8001a88:	d119      	bne.n	8001abe <HAL_UART_RxCpltCallback+0xa2>
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_UART_RxCpltCallback+0x100>)
 8001a8c:	789b      	ldrb	r3, [r3, #2]
 8001a8e:	2b53      	cmp	r3, #83	; 0x53
 8001a90:	d115      	bne.n	8001abe <HAL_UART_RxCpltCallback+0xa2>
		{
			uint8_t c[10] = {204, 205, 205, 205, 205, 205, 205, 205, 205, 185};
 8001a92:	4a25      	ldr	r2, [pc, #148]	; (8001b28 <HAL_UART_RxCpltCallback+0x10c>)
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a9a:	c303      	stmia	r3!, {r0, r1}
 8001a9c:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)"\a", 1, 100);
 8001a9e:	2364      	movs	r3, #100	; 0x64
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4922      	ldr	r1, [pc, #136]	; (8001b2c <HAL_UART_RxCpltCallback+0x110>)
 8001aa4:	481e      	ldr	r0, [pc, #120]	; (8001b20 <HAL_UART_RxCpltCallback+0x104>)
 8001aa6:	f002 fc4d 	bl	8004344 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, c, 10, 100);
 8001aaa:	f107 010c 	add.w	r1, r7, #12
 8001aae:	2364      	movs	r3, #100	; 0x64
 8001ab0:	220a      	movs	r2, #10
 8001ab2:	481b      	ldr	r0, [pc, #108]	; (8001b20 <HAL_UART_RxCpltCallback+0x104>)
 8001ab4:	f002 fc46 	bl	8004344 <HAL_UART_Transmit>
			UART2_msg[0] = 1;
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <HAL_UART_RxCpltCallback+0x114>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
		}
		uart_count = 0;
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_UART_RxCpltCallback+0xfc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
	}

	if (uart_count == 12)
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_UART_RxCpltCallback+0xfc>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	d117      	bne.n	8001afc <HAL_UART_RxCpltCallback+0xe0>
	{
		uint8_t tmp = 0x81;
 8001acc:	2381      	movs	r3, #129	; 0x81
 8001ace:	72fb      	strb	r3, [r7, #11]
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r\nEingabe Ung", 13, 100);
 8001ad0:	2364      	movs	r3, #100	; 0x64
 8001ad2:	220d      	movs	r2, #13
 8001ad4:	4917      	ldr	r1, [pc, #92]	; (8001b34 <HAL_UART_RxCpltCallback+0x118>)
 8001ad6:	4812      	ldr	r0, [pc, #72]	; (8001b20 <HAL_UART_RxCpltCallback+0x104>)
 8001ad8:	f002 fc34 	bl	8004344 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, &tmp, 1, 100);
 8001adc:	f107 010b 	add.w	r1, r7, #11
 8001ae0:	2364      	movs	r3, #100	; 0x64
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	480e      	ldr	r0, [pc, #56]	; (8001b20 <HAL_UART_RxCpltCallback+0x104>)
 8001ae6:	f002 fc2d 	bl	8004344 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*) "ltig\r\n", 6, 100);
 8001aea:	2364      	movs	r3, #100	; 0x64
 8001aec:	2206      	movs	r2, #6
 8001aee:	4912      	ldr	r1, [pc, #72]	; (8001b38 <HAL_UART_RxCpltCallback+0x11c>)
 8001af0:	480b      	ldr	r0, [pc, #44]	; (8001b20 <HAL_UART_RxCpltCallback+0x104>)
 8001af2:	f002 fc27 	bl	8004344 <HAL_UART_Transmit>
		uart_count = 0;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_UART_RxCpltCallback+0xfc>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
	}
    HAL_UART_Receive_IT(&huart2, &UART2_rxBuffer[uart_count], 1);
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_UART_RxCpltCallback+0xfc>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_UART_RxCpltCallback+0x100>)
 8001b04:	4413      	add	r3, r2
 8001b06:	2201      	movs	r2, #1
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_UART_RxCpltCallback+0x104>)
 8001b0c:	f002 fc9d 	bl	800444a <HAL_UART_Receive_IT>
}
 8001b10:	bf00      	nop
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200000b4 	.word	0x200000b4
 8001b1c:	2000009c 	.word	0x2000009c
 8001b20:	200000b8 	.word	0x200000b8
 8001b24:	08005d88 	.word	0x08005d88
 8001b28:	08005db4 	.word	0x08005db4
 8001b2c:	08005d98 	.word	0x08005d98
 8001b30:	200000a8 	.word	0x200000a8
 8001b34:	08005d9c 	.word	0x08005d9c
 8001b38:	08005dac 	.word	0x08005dac

08001b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
}
 8001b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <Error_Handler+0x8>
	...

08001b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_MspInit+0x44>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <HAL_MspInit+0x44>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_MspInit+0x44>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_MspInit+0x44>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_MspInit+0x44>)
 8001b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_MspInit+0x44>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800

08001b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <NMI_Handler+0x4>

08001b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <BusFault_Handler+0x4>

08001ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <UsageFault_Handler+0x4>

08001bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bdc:	f000 f91e 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <USART2_IRQHandler+0x10>)
 8001bea:	f002 fc73 	bl	80044d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200000b8 	.word	0x200000b8

08001bf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <SystemInit+0x28>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <SystemInit+0x28>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <SystemInit+0x28>)
 8001c0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c12:	609a      	str	r2, [r3, #8]
#endif
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c2a:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <MX_USART2_UART_Init+0x5c>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_USART2_UART_Init+0x58>)
 8001c68:	f002 fb1e 	bl	80042a8 <HAL_UART_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c72:	f7ff ff63 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200000b8 	.word	0x200000b8
 8001c80:	40004400 	.word	0x40004400

08001c84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b0ae      	sub	sp, #184	; 0xb8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2290      	movs	r2, #144	; 0x90
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 fe4f 	bl	8005948 <memset>
  if(uartHandle->Instance==USART2)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a25      	ldr	r2, [pc, #148]	; (8001d44 <HAL_UART_MspInit+0xc0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d142      	bne.n	8001d3a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 fec9 	bl	8003a58 <HAL_RCCEx_PeriphCLKConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ccc:	f7ff ff36 	bl	8001b3c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_UART_MspInit+0xc4>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	4a1c      	ldr	r2, [pc, #112]	; (8001d48 <HAL_UART_MspInit+0xc4>)
 8001cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cda:	6413      	str	r3, [r2, #64]	; 0x40
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_UART_MspInit+0xc4>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce8:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_UART_MspInit+0xc4>)
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <HAL_UART_MspInit+0xc4>)
 8001cee:	f043 0308 	orr.w	r3, r3, #8
 8001cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_UART_MspInit+0xc4>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8001d00:	2360      	movs	r3, #96	; 0x60
 8001d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4809      	ldr	r0, [pc, #36]	; (8001d4c <HAL_UART_MspInit+0xc8>)
 8001d26:	f000 ffd3 	bl	8002cd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2026      	movs	r0, #38	; 0x26
 8001d30:	f000 ff05 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d34:	2026      	movs	r0, #38	; 0x26
 8001d36:	f000 ff1e 	bl	8002b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	37b8      	adds	r7, #184	; 0xb8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40004400 	.word	0x40004400
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020c00 	.word	0x40020c00

08001d50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d56:	e003      	b.n	8001d60 <LoopCopyDataInit>

08001d58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d5e:	3104      	adds	r1, #4

08001d60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d60:	480b      	ldr	r0, [pc, #44]	; (8001d90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d68:	d3f6      	bcc.n	8001d58 <CopyDataInit>
  ldr  r2, =_sbss
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d6c:	e002      	b.n	8001d74 <LoopFillZerobss>

08001d6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d70:	f842 3b04 	str.w	r3, [r2], #4

08001d74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d78:	d3f9      	bcc.n	8001d6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d7a:	f7ff ff3d 	bl	8001bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d7e:	f003 fda5 	bl	80058cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d82:	f7ff fb7d 	bl	8001480 <main>
  bx  lr    
 8001d86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d88:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001d8c:	08005e10 	.word	0x08005e10
  ldr  r0, =_sdata
 8001d90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d94:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001d98:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001d9c:	20000144 	.word	0x20000144

08001da0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da0:	e7fe      	b.n	8001da0 <ADC_IRQHandler>

08001da2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da6:	2003      	movs	r0, #3
 8001da8:	f000 febe 	bl	8002b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dac:	2000      	movs	r0, #0
 8001dae:	f000 f805 	bl	8001dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db2:	f7ff fec9 	bl	8001b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_InitTick+0x54>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x58>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fed9 	bl	8002b92 <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00e      	b.n	8001e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d80a      	bhi.n	8001e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f000 fea1 	bl	8002b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dfc:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <HAL_InitTick+0x5c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000008 	.word	0x20000008
 8001e18:	20000004 	.word	0x20000004

08001e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_IncTick+0x20>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_IncTick+0x24>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <HAL_IncTick+0x24>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000008 	.word	0x20000008
 8001e40:	20000140 	.word	0x20000140

08001e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_GetTick+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000140 	.word	0x20000140

08001e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff ffee 	bl	8001e44 <HAL_GetTick>
 8001e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d005      	beq.n	8001e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_Delay+0x44>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e82:	bf00      	nop
 8001e84:	f7ff ffde 	bl	8001e44 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d8f7      	bhi.n	8001e84 <HAL_Delay+0x28>
  {
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000008 	.word	0x20000008

08001ea4 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <HAL_GetHalVersion+0x10>)
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	01030000 	.word	0x01030000

08001eb8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_GetREVID+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	0c1b      	lsrs	r3, r3, #16
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e0042000 	.word	0xe0042000

08001ed0 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <HAL_GetDEVID+0x18>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e0042000 	.word	0xe0042000

08001eec <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_GetUIDw0+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	1ff0f420 	.word	0x1ff0f420

08001f04 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_GetUIDw1+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	1ff0f424 	.word	0x1ff0f424

08001f1c <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_GetUIDw2+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	1ff0f428 	.word	0x1ff0f428

08001f34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e031      	b.n	8001fae <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe ffdc 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d116      	bne.n	8001fa0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_ADC_Init+0x84>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	f043 0202 	orr.w	r2, r3, #2
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fb0a 	bl	800259c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f023 0303 	bic.w	r3, r3, #3
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f9e:	e001      	b.n	8001fa4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	ffffeefd 	.word	0xffffeefd

08001fbc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Start+0x1a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e0ad      	b.n	8002132 <HAL_ADC_Start+0x176>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d018      	beq.n	800201e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001ffc:	4b50      	ldr	r3, [pc, #320]	; (8002140 <HAL_ADC_Start+0x184>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a50      	ldr	r2, [pc, #320]	; (8002144 <HAL_ADC_Start+0x188>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	0c9a      	lsrs	r2, r3, #18
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002010:	e002      	b.n	8002018 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3b01      	subs	r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f9      	bne.n	8002012 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d175      	bne.n	8002118 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002030:	4b45      	ldr	r3, [pc, #276]	; (8002148 <HAL_ADC_Start+0x18c>)
 8002032:	4013      	ands	r3, r2
 8002034:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002052:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002066:	d106      	bne.n	8002076 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	f023 0206 	bic.w	r2, r3, #6
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	645a      	str	r2, [r3, #68]	; 0x44
 8002074:	e002      	b.n	800207c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800208c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800208e:	4b2f      	ldr	r3, [pc, #188]	; (800214c <HAL_ADC_Start+0x190>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10f      	bne.n	80020ba <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d143      	bne.n	8002130 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	e03a      	b.n	8002130 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a24      	ldr	r2, [pc, #144]	; (8002150 <HAL_ADC_Start+0x194>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d10e      	bne.n	80020e2 <HAL_ADC_Start+0x126>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d107      	bne.n	80020e2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020e0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_ADC_Start+0x190>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d120      	bne.n	8002130 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a18      	ldr	r2, [pc, #96]	; (8002154 <HAL_ADC_Start+0x198>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d11b      	bne.n	8002130 <HAL_ADC_Start+0x174>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d114      	bne.n	8002130 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	e00b      	b.n	8002130 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f043 0210 	orr.w	r2, r3, #16
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000000 	.word	0x20000000
 8002144:	431bde83 	.word	0x431bde83
 8002148:	fffff8fe 	.word	0xfffff8fe
 800214c:	40012300 	.word	0x40012300
 8002150:	40012000 	.word	0x40012000
 8002154:	40012200 	.word	0x40012200

08002158 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_ADC_Stop+0x16>
 800216a:	2302      	movs	r3, #2
 800216c:	e01f      	b.n	80021ae <HAL_ADC_Stop+0x56>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0201 	bic.w	r2, r2, #1
 8002184:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d107      	bne.n	80021a4 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_ADC_Stop+0x64>)
 800219a:	4013      	ands	r3, r2
 800219c:	f043 0201 	orr.w	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	ffffeefe 	.word	0xffffeefe

080021c0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021dc:	d113      	bne.n	8002206 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ec:	d10b      	bne.n	8002206 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f043 0220 	orr.w	r2, r3, #32
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e063      	b.n	80022ce <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002206:	f7ff fe1d 	bl	8001e44 <HAL_GetTick>
 800220a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800220c:	e021      	b.n	8002252 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d01d      	beq.n	8002252 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <HAL_ADC_PollForConversion+0x6c>
 800221c:	f7ff fe12 	bl	8001e44 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d212      	bcs.n	8002252 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b02      	cmp	r3, #2
 8002238:	d00b      	beq.n	8002252 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f043 0204 	orr.w	r2, r3, #4
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e03d      	b.n	80022ce <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b02      	cmp	r3, #2
 800225e:	d1d6      	bne.n	800220e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0212 	mvn.w	r2, #18
 8002268:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d123      	bne.n	80022cc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	d11f      	bne.n	80022cc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d105      	bne.n	80022cc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_ADC_ConfigChannel+0x1c>
 8002308:	2302      	movs	r3, #2
 800230a:	e136      	b.n	800257a <HAL_ADC_ConfigChannel+0x28a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b09      	cmp	r3, #9
 800231a:	d93a      	bls.n	8002392 <HAL_ADC_ConfigChannel+0xa2>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002324:	d035      	beq.n	8002392 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68d9      	ldr	r1, [r3, #12]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	3b1e      	subs	r3, #30
 800233c:	2207      	movs	r2, #7
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	400a      	ands	r2, r1
 800234a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a8d      	ldr	r2, [pc, #564]	; (8002588 <HAL_ADC_ConfigChannel+0x298>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10a      	bne.n	800236c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68d9      	ldr	r1, [r3, #12]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	061a      	lsls	r2, r3, #24
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800236a:	e035      	b.n	80023d8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68d9      	ldr	r1, [r3, #12]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	4618      	mov	r0, r3
 800237e:	4603      	mov	r3, r0
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4403      	add	r3, r0
 8002384:	3b1e      	subs	r3, #30
 8002386:	409a      	lsls	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002390:	e022      	b.n	80023d8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6919      	ldr	r1, [r3, #16]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	2207      	movs	r2, #7
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43da      	mvns	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	400a      	ands	r2, r1
 80023b4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6919      	ldr	r1, [r3, #16]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	4603      	mov	r3, r0
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4403      	add	r3, r0
 80023ce:	409a      	lsls	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b06      	cmp	r3, #6
 80023de:	d824      	bhi.n	800242a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	3b05      	subs	r3, #5
 80023f2:	221f      	movs	r2, #31
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43da      	mvns	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	400a      	ands	r2, r1
 8002400:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	3b05      	subs	r3, #5
 800241c:	fa00 f203 	lsl.w	r2, r0, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	635a      	str	r2, [r3, #52]	; 0x34
 8002428:	e04c      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b0c      	cmp	r3, #12
 8002430:	d824      	bhi.n	800247c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	3b23      	subs	r3, #35	; 0x23
 8002444:	221f      	movs	r2, #31
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	400a      	ands	r2, r1
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	3b23      	subs	r3, #35	; 0x23
 800246e:	fa00 f203 	lsl.w	r2, r0, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
 800247a:	e023      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	3b41      	subs	r3, #65	; 0x41
 800248e:	221f      	movs	r2, #31
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43da      	mvns	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	400a      	ands	r2, r1
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	3b41      	subs	r3, #65	; 0x41
 80024b8:	fa00 f203 	lsl.w	r2, r0, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a30      	ldr	r2, [pc, #192]	; (800258c <HAL_ADC_ConfigChannel+0x29c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10a      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x1f4>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024d6:	d105      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a2c      	ldr	r2, [pc, #176]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 80024de:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80024e2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a28      	ldr	r2, [pc, #160]	; (800258c <HAL_ADC_ConfigChannel+0x29c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d10f      	bne.n	800250e <HAL_ADC_ConfigChannel+0x21e>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b12      	cmp	r3, #18
 80024f4:	d10b      	bne.n	800250e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4a25      	ldr	r2, [pc, #148]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 80024fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002500:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4a22      	ldr	r2, [pc, #136]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 8002508:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800250c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1e      	ldr	r2, [pc, #120]	; (800258c <HAL_ADC_ConfigChannel+0x29c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d12b      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x280>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1a      	ldr	r2, [pc, #104]	; (8002588 <HAL_ADC_ConfigChannel+0x298>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d003      	beq.n	800252a <HAL_ADC_ConfigChannel+0x23a>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b11      	cmp	r3, #17
 8002528:	d122      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800252a:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a18      	ldr	r2, [pc, #96]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 8002530:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002534:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002536:	4b16      	ldr	r3, [pc, #88]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4a15      	ldr	r2, [pc, #84]	; (8002590 <HAL_ADC_ConfigChannel+0x2a0>)
 800253c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002540:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <HAL_ADC_ConfigChannel+0x298>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d111      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_ADC_ConfigChannel+0x2a4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_ADC_ConfigChannel+0x2a8>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	0c9a      	lsrs	r2, r3, #18
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002562:	e002      	b.n	800256a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3b01      	subs	r3, #1
 8002568:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f9      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	10000012 	.word	0x10000012
 800258c:	40012000 	.word	0x40012000
 8002590:	40012300 	.word	0x40012300
 8002594:	20000000 	.word	0x20000000
 8002598:	431bde83 	.word	0x431bde83

0800259c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80025a4:	4b78      	ldr	r3, [pc, #480]	; (8002788 <ADC_Init+0x1ec>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a77      	ldr	r2, [pc, #476]	; (8002788 <ADC_Init+0x1ec>)
 80025aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80025ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80025b0:	4b75      	ldr	r3, [pc, #468]	; (8002788 <ADC_Init+0x1ec>)
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4973      	ldr	r1, [pc, #460]	; (8002788 <ADC_Init+0x1ec>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	021a      	lsls	r2, r3, #8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6899      	ldr	r1, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	4a58      	ldr	r2, [pc, #352]	; (800278c <ADC_Init+0x1f0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d022      	beq.n	8002676 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800263e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6899      	ldr	r1, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6899      	ldr	r1, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	e00f      	b.n	8002696 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002694:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0202 	bic.w	r2, r2, #2
 80026a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6899      	ldr	r1, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	005a      	lsls	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01b      	beq.n	80026fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	3b01      	subs	r3, #1
 80026f0:	035a      	lsls	r2, r3, #13
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	e007      	b.n	800270c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	3b01      	subs	r3, #1
 8002728:	051a      	lsls	r2, r3, #20
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002740:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6899      	ldr	r1, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800274e:	025a      	lsls	r2, r3, #9
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002766:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6899      	ldr	r1, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	029a      	lsls	r2, r3, #10
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	609a      	str	r2, [r3, #8]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40012300 	.word	0x40012300
 800278c:	0f000001 	.word	0x0f000001

08002790 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0ed      	b.n	800297e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe fc58 	bl	8001064 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027c4:	f7ff fb3e 	bl	8001e44 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027ca:	e012      	b.n	80027f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027cc:	f7ff fb3a 	bl	8001e44 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b0a      	cmp	r3, #10
 80027d8:	d90b      	bls.n	80027f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2205      	movs	r2, #5
 80027ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0c5      	b.n	800297e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0e5      	beq.n	80027cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0202 	bic.w	r2, r2, #2
 800280e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002810:	f7ff fb18 	bl	8001e44 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002816:	e012      	b.n	800283e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002818:	f7ff fb14 	bl	8001e44 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b0a      	cmp	r3, #10
 8002824:	d90b      	bls.n	800283e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2205      	movs	r2, #5
 8002836:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e09f      	b.n	800297e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e5      	bne.n	8002818 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7e1b      	ldrb	r3, [r3, #24]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d108      	bne.n	8002866 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e007      	b.n	8002876 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7e5b      	ldrb	r3, [r3, #25]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d108      	bne.n	8002890 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e007      	b.n	80028a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800289e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7e9b      	ldrb	r3, [r3, #26]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d108      	bne.n	80028ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0220 	orr.w	r2, r2, #32
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e007      	b.n	80028ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0220 	bic.w	r2, r2, #32
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7edb      	ldrb	r3, [r3, #27]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d108      	bne.n	80028e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0210 	bic.w	r2, r2, #16
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e007      	b.n	80028f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0210 	orr.w	r2, r2, #16
 80028f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7f1b      	ldrb	r3, [r3, #28]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d108      	bne.n	800290e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0208 	orr.w	r2, r2, #8
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	e007      	b.n	800291e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0208 	bic.w	r2, r2, #8
 800291c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7f5b      	ldrb	r3, [r3, #29]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d108      	bne.n	8002938 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0204 	orr.w	r2, r2, #4
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e007      	b.n	8002948 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0204 	bic.w	r2, r2, #4
 8002946:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	ea42 0103 	orr.w	r1, r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <__NVIC_SetPriorityGrouping>:
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <__NVIC_SetPriorityGrouping+0x40>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a4:	4013      	ands	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b6:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <__NVIC_SetPriorityGrouping+0x40>)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	60d3      	str	r3, [r2, #12]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00
 80029cc:	05fa0000 	.word	0x05fa0000

080029d0 <__NVIC_GetPriorityGrouping>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <__NVIC_GetPriorityGrouping+0x18>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	f003 0307 	and.w	r3, r3, #7
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_EnableIRQ>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	db0b      	blt.n	8002a16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	4907      	ldr	r1, [pc, #28]	; (8002a24 <__NVIC_EnableIRQ+0x38>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000e100 	.word	0xe000e100

08002a28 <__NVIC_SetPriority>:
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	db0a      	blt.n	8002a52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	490c      	ldr	r1, [pc, #48]	; (8002a74 <__NVIC_SetPriority+0x4c>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	0112      	lsls	r2, r2, #4
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a50:	e00a      	b.n	8002a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4908      	ldr	r1, [pc, #32]	; (8002a78 <__NVIC_SetPriority+0x50>)
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	3b04      	subs	r3, #4
 8002a60:	0112      	lsls	r2, r2, #4
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	440b      	add	r3, r1
 8002a66:	761a      	strb	r2, [r3, #24]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000e100 	.word	0xe000e100
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <NVIC_EncodePriority>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f1c3 0307 	rsb	r3, r3, #7
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	bf28      	it	cs
 8002a9a:	2304      	movcs	r3, #4
 8002a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d902      	bls.n	8002aac <NVIC_EncodePriority+0x30>
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3b03      	subs	r3, #3
 8002aaa:	e000      	b.n	8002aae <NVIC_EncodePriority+0x32>
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	401a      	ands	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	43d9      	mvns	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	4313      	orrs	r3, r2
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3724      	adds	r7, #36	; 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af4:	d301      	bcc.n	8002afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00f      	b.n	8002b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <SysTick_Config+0x40>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b02:	210f      	movs	r1, #15
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	f7ff ff8e 	bl	8002a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <SysTick_Config+0x40>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b12:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <SysTick_Config+0x40>)
 8002b14:	2207      	movs	r2, #7
 8002b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	e000e010 	.word	0xe000e010

08002b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff29 	bl	8002988 <__NVIC_SetPriorityGrouping>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b50:	f7ff ff3e 	bl	80029d0 <__NVIC_GetPriorityGrouping>
 8002b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	6978      	ldr	r0, [r7, #20]
 8002b5c:	f7ff ff8e 	bl	8002a7c <NVIC_EncodePriority>
 8002b60:	4602      	mov	r2, r0
 8002b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff5d 	bl	8002a28 <__NVIC_SetPriority>
}
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff31 	bl	80029ec <__NVIC_EnableIRQ>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ffa2 	bl	8002ae4 <SysTick_Config>
 8002ba0:	4603      	mov	r3, r0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bb8:	f7ff f944 	bl	8001e44 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d008      	beq.n	8002bdc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2280      	movs	r2, #128	; 0x80
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e052      	b.n	8002c82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0216 	bic.w	r2, r2, #22
 8002bea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bfa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d103      	bne.n	8002c0c <HAL_DMA_Abort+0x62>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0208 	bic.w	r2, r2, #8
 8002c1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2c:	e013      	b.n	8002c56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c2e:	f7ff f909 	bl	8001e44 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d90c      	bls.n	8002c56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2203      	movs	r2, #3
 8002c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e015      	b.n	8002c82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e4      	bne.n	8002c2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c68:	223f      	movs	r2, #63	; 0x3f
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d004      	beq.n	8002ca8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e00c      	b.n	8002cc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2205      	movs	r2, #5
 8002cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	; 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e175      	b.n	8002fdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	f040 8164 	bne.w	8002fd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d005      	beq.n	8002d26 <HAL_GPIO_Init+0x56>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d130      	bne.n	8002d88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 0201 	and.w	r2, r3, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d017      	beq.n	8002dc4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d123      	bne.n	8002e18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3208      	adds	r2, #8
 8002dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	69b9      	ldr	r1, [r7, #24]
 8002e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2203      	movs	r2, #3
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0203 	and.w	r2, r3, #3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80be 	beq.w	8002fd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	4b66      	ldr	r3, [pc, #408]	; (8002ff4 <HAL_GPIO_Init+0x324>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	4a65      	ldr	r2, [pc, #404]	; (8002ff4 <HAL_GPIO_Init+0x324>)
 8002e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e64:	6453      	str	r3, [r2, #68]	; 0x44
 8002e66:	4b63      	ldr	r3, [pc, #396]	; (8002ff4 <HAL_GPIO_Init+0x324>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e72:	4a61      	ldr	r2, [pc, #388]	; (8002ff8 <HAL_GPIO_Init+0x328>)
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	3302      	adds	r3, #2
 8002e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	220f      	movs	r2, #15
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a58      	ldr	r2, [pc, #352]	; (8002ffc <HAL_GPIO_Init+0x32c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d037      	beq.n	8002f0e <HAL_GPIO_Init+0x23e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a57      	ldr	r2, [pc, #348]	; (8003000 <HAL_GPIO_Init+0x330>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d031      	beq.n	8002f0a <HAL_GPIO_Init+0x23a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a56      	ldr	r2, [pc, #344]	; (8003004 <HAL_GPIO_Init+0x334>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d02b      	beq.n	8002f06 <HAL_GPIO_Init+0x236>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a55      	ldr	r2, [pc, #340]	; (8003008 <HAL_GPIO_Init+0x338>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d025      	beq.n	8002f02 <HAL_GPIO_Init+0x232>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a54      	ldr	r2, [pc, #336]	; (800300c <HAL_GPIO_Init+0x33c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d01f      	beq.n	8002efe <HAL_GPIO_Init+0x22e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a53      	ldr	r2, [pc, #332]	; (8003010 <HAL_GPIO_Init+0x340>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d019      	beq.n	8002efa <HAL_GPIO_Init+0x22a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a52      	ldr	r2, [pc, #328]	; (8003014 <HAL_GPIO_Init+0x344>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_GPIO_Init+0x226>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a51      	ldr	r2, [pc, #324]	; (8003018 <HAL_GPIO_Init+0x348>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00d      	beq.n	8002ef2 <HAL_GPIO_Init+0x222>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a50      	ldr	r2, [pc, #320]	; (800301c <HAL_GPIO_Init+0x34c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d007      	beq.n	8002eee <HAL_GPIO_Init+0x21e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a4f      	ldr	r2, [pc, #316]	; (8003020 <HAL_GPIO_Init+0x350>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_GPIO_Init+0x21a>
 8002ee6:	2309      	movs	r3, #9
 8002ee8:	e012      	b.n	8002f10 <HAL_GPIO_Init+0x240>
 8002eea:	230a      	movs	r3, #10
 8002eec:	e010      	b.n	8002f10 <HAL_GPIO_Init+0x240>
 8002eee:	2308      	movs	r3, #8
 8002ef0:	e00e      	b.n	8002f10 <HAL_GPIO_Init+0x240>
 8002ef2:	2307      	movs	r3, #7
 8002ef4:	e00c      	b.n	8002f10 <HAL_GPIO_Init+0x240>
 8002ef6:	2306      	movs	r3, #6
 8002ef8:	e00a      	b.n	8002f10 <HAL_GPIO_Init+0x240>
 8002efa:	2305      	movs	r3, #5
 8002efc:	e008      	b.n	8002f10 <HAL_GPIO_Init+0x240>
 8002efe:	2304      	movs	r3, #4
 8002f00:	e006      	b.n	8002f10 <HAL_GPIO_Init+0x240>
 8002f02:	2303      	movs	r3, #3
 8002f04:	e004      	b.n	8002f10 <HAL_GPIO_Init+0x240>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e002      	b.n	8002f10 <HAL_GPIO_Init+0x240>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_GPIO_Init+0x240>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	f002 0203 	and.w	r2, r2, #3
 8002f16:	0092      	lsls	r2, r2, #2
 8002f18:	4093      	lsls	r3, r2
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f20:	4935      	ldr	r1, [pc, #212]	; (8002ff8 <HAL_GPIO_Init+0x328>)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	089b      	lsrs	r3, r3, #2
 8002f26:	3302      	adds	r3, #2
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_GPIO_Init+0x354>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f52:	4a34      	ldr	r2, [pc, #208]	; (8003024 <HAL_GPIO_Init+0x354>)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f58:	4b32      	ldr	r3, [pc, #200]	; (8003024 <HAL_GPIO_Init+0x354>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f7c:	4a29      	ldr	r2, [pc, #164]	; (8003024 <HAL_GPIO_Init+0x354>)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f82:	4b28      	ldr	r3, [pc, #160]	; (8003024 <HAL_GPIO_Init+0x354>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fa6:	4a1f      	ldr	r2, [pc, #124]	; (8003024 <HAL_GPIO_Init+0x354>)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <HAL_GPIO_Init+0x354>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd0:	4a14      	ldr	r2, [pc, #80]	; (8003024 <HAL_GPIO_Init+0x354>)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b0f      	cmp	r3, #15
 8002fe0:	f67f ae86 	bls.w	8002cf0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3724      	adds	r7, #36	; 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40013800 	.word	0x40013800
 8002ffc:	40020000 	.word	0x40020000
 8003000:	40020400 	.word	0x40020400
 8003004:	40020800 	.word	0x40020800
 8003008:	40020c00 	.word	0x40020c00
 800300c:	40021000 	.word	0x40021000
 8003010:	40021400 	.word	0x40021400
 8003014:	40021800 	.word	0x40021800
 8003018:	40021c00 	.word	0x40021c00
 800301c:	40022000 	.word	0x40022000
 8003020:	40022400 	.word	0x40022400
 8003024:	40013c00 	.word	0x40013c00

08003028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	807b      	strh	r3, [r7, #2]
 8003034:	4613      	mov	r3, r2
 8003036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003038:	787b      	ldrb	r3, [r7, #1]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800303e:	887a      	ldrh	r2, [r7, #2]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003044:	e003      	b.n	800304e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	041a      	lsls	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	619a      	str	r2, [r3, #24]
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800306c:	887a      	ldrh	r2, [r7, #2]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4013      	ands	r3, r2
 8003072:	041a      	lsls	r2, r3, #16
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	43d9      	mvns	r1, r3
 8003078:	887b      	ldrh	r3, [r7, #2]
 800307a:	400b      	ands	r3, r1
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	619a      	str	r2, [r3, #24]
}
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <HAL_PWREx_EnableOverDrive+0x98>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a22      	ldr	r2, [pc, #136]	; (8003128 <HAL_PWREx_EnableOverDrive+0x98>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_PWREx_EnableOverDrive+0x98>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1d      	ldr	r2, [pc, #116]	; (800312c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030be:	f7fe fec1 	bl	8001e44 <HAL_GetTick>
 80030c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030c4:	e009      	b.n	80030da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030c6:	f7fe febd 	bl	8001e44 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030d4:	d901      	bls.n	80030da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e022      	b.n	8003120 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e6:	d1ee      	bne.n	80030c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030e8:	4b10      	ldr	r3, [pc, #64]	; (800312c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0f      	ldr	r2, [pc, #60]	; (800312c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f4:	f7fe fea6 	bl	8001e44 <HAL_GetTick>
 80030f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030fa:	e009      	b.n	8003110 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030fc:	f7fe fea2 	bl	8001e44 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800310a:	d901      	bls.n	8003110 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e007      	b.n	8003120 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800311c:	d1ee      	bne.n	80030fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	40007000 	.word	0x40007000

08003130 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e29b      	b.n	800367e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8087 	beq.w	8003262 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003154:	4b96      	ldr	r3, [pc, #600]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b04      	cmp	r3, #4
 800315e:	d00c      	beq.n	800317a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003160:	4b93      	ldr	r3, [pc, #588]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b08      	cmp	r3, #8
 800316a:	d112      	bne.n	8003192 <HAL_RCC_OscConfig+0x62>
 800316c:	4b90      	ldr	r3, [pc, #576]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003178:	d10b      	bne.n	8003192 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317a:	4b8d      	ldr	r3, [pc, #564]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d06c      	beq.n	8003260 <HAL_RCC_OscConfig+0x130>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d168      	bne.n	8003260 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e275      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319a:	d106      	bne.n	80031aa <HAL_RCC_OscConfig+0x7a>
 800319c:	4b84      	ldr	r3, [pc, #528]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a83      	ldr	r2, [pc, #524]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	e02e      	b.n	8003208 <HAL_RCC_OscConfig+0xd8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x9c>
 80031b2:	4b7f      	ldr	r3, [pc, #508]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a7e      	ldr	r2, [pc, #504]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b7c      	ldr	r3, [pc, #496]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a7b      	ldr	r2, [pc, #492]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e01d      	b.n	8003208 <HAL_RCC_OscConfig+0xd8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0xc0>
 80031d6:	4b76      	ldr	r3, [pc, #472]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a75      	ldr	r2, [pc, #468]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b73      	ldr	r3, [pc, #460]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a72      	ldr	r2, [pc, #456]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0xd8>
 80031f0:	4b6f      	ldr	r3, [pc, #444]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a6e      	ldr	r2, [pc, #440]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b6c      	ldr	r3, [pc, #432]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a6b      	ldr	r2, [pc, #428]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fe fe18 	bl	8001e44 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fe fe14 	bl	8001e44 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e229      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b61      	ldr	r3, [pc, #388]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0xe8>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fe04 	bl	8001e44 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003240:	f7fe fe00 	bl	8001e44 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	; 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e215      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003252:	4b57      	ldr	r3, [pc, #348]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x110>
 800325e:	e000      	b.n	8003262 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d069      	beq.n	8003342 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800326e:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327a:	4b4d      	ldr	r3, [pc, #308]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b08      	cmp	r3, #8
 8003284:	d11c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x190>
 8003286:	4b4a      	ldr	r3, [pc, #296]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d116      	bne.n	80032c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_RCC_OscConfig+0x17a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d001      	beq.n	80032aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e1e9      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	493d      	ldr	r1, [pc, #244]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	e040      	b.n	8003342 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d023      	beq.n	8003310 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c8:	4b39      	ldr	r3, [pc, #228]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a38      	ldr	r2, [pc, #224]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe fdb6 	bl	8001e44 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032dc:	f7fe fdb2 	bl	8001e44 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e1c7      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ee:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4929      	ldr	r1, [pc, #164]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
 800330e:	e018      	b.n	8003342 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a26      	ldr	r2, [pc, #152]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003316:	f023 0301 	bic.w	r3, r3, #1
 800331a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe fd92 	bl	8001e44 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003324:	f7fe fd8e 	bl	8001e44 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e1a3      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003336:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d038      	beq.n	80033c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d019      	beq.n	800338a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003362:	f7fe fd6f 	bl	8001e44 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336a:	f7fe fd6b 	bl	8001e44 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e180      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800337e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x23a>
 8003388:	e01a      	b.n	80033c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 800338c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338e:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <HAL_RCC_OscConfig+0x280>)
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003396:	f7fe fd55 	bl	8001e44 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800339c:	e00a      	b.n	80033b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339e:	f7fe fd51 	bl	8001e44 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d903      	bls.n	80033b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e166      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
 80033b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b4:	4b92      	ldr	r3, [pc, #584]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 80033b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ee      	bne.n	800339e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80a4 	beq.w	8003516 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ce:	4b8c      	ldr	r3, [pc, #560]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10d      	bne.n	80033f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	4b89      	ldr	r3, [pc, #548]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	4a88      	ldr	r2, [pc, #544]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 80033e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e4:	6413      	str	r3, [r2, #64]	; 0x40
 80033e6:	4b86      	ldr	r3, [pc, #536]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f2:	2301      	movs	r3, #1
 80033f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f6:	4b83      	ldr	r3, [pc, #524]	; (8003604 <HAL_RCC_OscConfig+0x4d4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d118      	bne.n	8003434 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003402:	4b80      	ldr	r3, [pc, #512]	; (8003604 <HAL_RCC_OscConfig+0x4d4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7f      	ldr	r2, [pc, #508]	; (8003604 <HAL_RCC_OscConfig+0x4d4>)
 8003408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340e:	f7fe fd19 	bl	8001e44 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003416:	f7fe fd15 	bl	8001e44 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b64      	cmp	r3, #100	; 0x64
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e12a      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003428:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x4d4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d106      	bne.n	800344a <HAL_RCC_OscConfig+0x31a>
 800343c:	4b70      	ldr	r3, [pc, #448]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	4a6f      	ldr	r2, [pc, #444]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6713      	str	r3, [r2, #112]	; 0x70
 8003448:	e02d      	b.n	80034a6 <HAL_RCC_OscConfig+0x376>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x33c>
 8003452:	4b6b      	ldr	r3, [pc, #428]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	4a6a      	ldr	r2, [pc, #424]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003458:	f023 0301 	bic.w	r3, r3, #1
 800345c:	6713      	str	r3, [r2, #112]	; 0x70
 800345e:	4b68      	ldr	r3, [pc, #416]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	4a67      	ldr	r2, [pc, #412]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	6713      	str	r3, [r2, #112]	; 0x70
 800346a:	e01c      	b.n	80034a6 <HAL_RCC_OscConfig+0x376>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b05      	cmp	r3, #5
 8003472:	d10c      	bne.n	800348e <HAL_RCC_OscConfig+0x35e>
 8003474:	4b62      	ldr	r3, [pc, #392]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	4a61      	ldr	r2, [pc, #388]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 800347a:	f043 0304 	orr.w	r3, r3, #4
 800347e:	6713      	str	r3, [r2, #112]	; 0x70
 8003480:	4b5f      	ldr	r3, [pc, #380]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4a5e      	ldr	r2, [pc, #376]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
 800348c:	e00b      	b.n	80034a6 <HAL_RCC_OscConfig+0x376>
 800348e:	4b5c      	ldr	r3, [pc, #368]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	4a5b      	ldr	r2, [pc, #364]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	6713      	str	r3, [r2, #112]	; 0x70
 800349a:	4b59      	ldr	r3, [pc, #356]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a58      	ldr	r2, [pc, #352]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 80034a0:	f023 0304 	bic.w	r3, r3, #4
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d015      	beq.n	80034da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ae:	f7fe fcc9 	bl	8001e44 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fe fcc5 	bl	8001e44 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e0d8      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034cc:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ee      	beq.n	80034b6 <HAL_RCC_OscConfig+0x386>
 80034d8:	e014      	b.n	8003504 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034da:	f7fe fcb3 	bl	8001e44 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e0:	e00a      	b.n	80034f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7fe fcaf 	bl	8001e44 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e0c2      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f8:	4b41      	ldr	r3, [pc, #260]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1ee      	bne.n	80034e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003504:	7dfb      	ldrb	r3, [r7, #23]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d105      	bne.n	8003516 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800350a:	4b3d      	ldr	r3, [pc, #244]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	4a3c      	ldr	r2, [pc, #240]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003514:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80ae 	beq.w	800367c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003520:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 030c 	and.w	r3, r3, #12
 8003528:	2b08      	cmp	r3, #8
 800352a:	d06d      	beq.n	8003608 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d14b      	bne.n	80035cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003534:	4b32      	ldr	r3, [pc, #200]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a31      	ldr	r2, [pc, #196]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 800353a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800353e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fe fc80 	bl	8001e44 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003548:	f7fe fc7c 	bl	8001e44 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e091      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355a:	4b29      	ldr	r3, [pc, #164]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	019b      	lsls	r3, r3, #6
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	3b01      	subs	r3, #1
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	071b      	lsls	r3, r3, #28
 8003592:	491b      	ldr	r1, [pc, #108]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a18      	ldr	r2, [pc, #96]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 800359e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe fc4e 	bl	8001e44 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fe fc4a 	bl	8001e44 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e05f      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x47c>
 80035ca:	e057      	b.n	800367c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0b      	ldr	r2, [pc, #44]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 80035d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fe fc34 	bl	8001e44 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fe fc30 	bl	8001e44 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e045      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_RCC_OscConfig+0x4d0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x4b0>
 80035fe:	e03d      	b.n	800367c <HAL_RCC_OscConfig+0x54c>
 8003600:	40023800 	.word	0x40023800
 8003604:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003608:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <HAL_RCC_OscConfig+0x558>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d030      	beq.n	8003678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d129      	bne.n	8003678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d122      	bne.n	8003678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003638:	4013      	ands	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800363e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003640:	4293      	cmp	r3, r2
 8003642:	d119      	bne.n	8003678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	3b01      	subs	r3, #1
 8003652:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d10f      	bne.n	8003678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d107      	bne.n	8003678 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800

0800368c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0d0      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b6a      	ldr	r3, [pc, #424]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d910      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b67      	ldr	r3, [pc, #412]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 020f 	bic.w	r2, r3, #15
 80036ba:	4965      	ldr	r1, [pc, #404]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b63      	ldr	r3, [pc, #396]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0b8      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ec:	4b59      	ldr	r3, [pc, #356]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a58      	ldr	r2, [pc, #352]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 80036f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003704:	4b53      	ldr	r3, [pc, #332]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a52      	ldr	r2, [pc, #328]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 800370a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800370e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003710:	4b50      	ldr	r3, [pc, #320]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	494d      	ldr	r1, [pc, #308]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d040      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b47      	ldr	r3, [pc, #284]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d115      	bne.n	800376e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e07f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	4b41      	ldr	r3, [pc, #260]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e073      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06b      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376e:	4b39      	ldr	r3, [pc, #228]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f023 0203 	bic.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4936      	ldr	r1, [pc, #216]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 800377c:	4313      	orrs	r3, r2
 800377e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003780:	f7fe fb60 	bl	8001e44 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	e00a      	b.n	800379e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003788:	f7fe fb5c 	bl	8001e44 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	; 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e053      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	4b2d      	ldr	r3, [pc, #180]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 020c 	and.w	r2, r3, #12
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d1eb      	bne.n	8003788 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b0:	4b27      	ldr	r3, [pc, #156]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d210      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 020f 	bic.w	r2, r3, #15
 80037c6:	4922      	ldr	r1, [pc, #136]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e032      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4916      	ldr	r1, [pc, #88]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	490e      	ldr	r1, [pc, #56]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800381e:	f000 f821 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003822:	4602      	mov	r2, r0
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	490a      	ldr	r1, [pc, #40]	; (8003858 <HAL_RCC_ClockConfig+0x1cc>)
 8003830:	5ccb      	ldrb	r3, [r1, r3]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	4a09      	ldr	r2, [pc, #36]	; (800385c <HAL_RCC_ClockConfig+0x1d0>)
 8003838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RCC_ClockConfig+0x1d4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fabc 	bl	8001dbc <HAL_InitTick>

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023c00 	.word	0x40023c00
 8003854:	40023800 	.word	0x40023800
 8003858:	08005dc0 	.word	0x08005dc0
 800385c:	20000000 	.word	0x20000000
 8003860:	20000004 	.word	0x20000004

08003864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003868:	b090      	sub	sp, #64	; 0x40
 800386a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	637b      	str	r3, [r7, #52]	; 0x34
 8003870:	2300      	movs	r3, #0
 8003872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003874:	2300      	movs	r3, #0
 8003876:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800387c:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b08      	cmp	r3, #8
 8003886:	d00d      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003888:	2b08      	cmp	r3, #8
 800388a:	f200 80a1 	bhi.w	80039d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x34>
 8003892:	2b04      	cmp	r3, #4
 8003894:	d003      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0x3a>
 8003896:	e09b      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003898:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800389a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800389c:	e09b      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800389e:	4b53      	ldr	r3, [pc, #332]	; (80039ec <HAL_RCC_GetSysClockFreq+0x188>)
 80038a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038a2:	e098      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a4:	4b4f      	ldr	r3, [pc, #316]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80038ae:	4b4d      	ldr	r3, [pc, #308]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d028      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ba:	4b4a      	ldr	r3, [pc, #296]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	099b      	lsrs	r3, r3, #6
 80038c0:	2200      	movs	r2, #0
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	627a      	str	r2, [r7, #36]	; 0x24
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038cc:	2100      	movs	r1, #0
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_RCC_GetSysClockFreq+0x188>)
 80038d0:	fb03 f201 	mul.w	r2, r3, r1
 80038d4:	2300      	movs	r3, #0
 80038d6:	fb00 f303 	mul.w	r3, r0, r3
 80038da:	4413      	add	r3, r2
 80038dc:	4a43      	ldr	r2, [pc, #268]	; (80039ec <HAL_RCC_GetSysClockFreq+0x188>)
 80038de:	fba0 1202 	umull	r1, r2, r0, r2
 80038e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038e4:	460a      	mov	r2, r1
 80038e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80038e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ea:	4413      	add	r3, r2
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f0:	2200      	movs	r2, #0
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	61fa      	str	r2, [r7, #28]
 80038f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038fe:	f7fc fca3 	bl	8000248 <__aeabi_uldivmod>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4613      	mov	r3, r2
 8003908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800390a:	e053      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390c:	4b35      	ldr	r3, [pc, #212]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	2200      	movs	r2, #0
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	617a      	str	r2, [r7, #20]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800391e:	f04f 0b00 	mov.w	fp, #0
 8003922:	4652      	mov	r2, sl
 8003924:	465b      	mov	r3, fp
 8003926:	f04f 0000 	mov.w	r0, #0
 800392a:	f04f 0100 	mov.w	r1, #0
 800392e:	0159      	lsls	r1, r3, #5
 8003930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003934:	0150      	lsls	r0, r2, #5
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	ebb2 080a 	subs.w	r8, r2, sl
 800393e:	eb63 090b 	sbc.w	r9, r3, fp
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800394e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003952:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003956:	ebb2 0408 	subs.w	r4, r2, r8
 800395a:	eb63 0509 	sbc.w	r5, r3, r9
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	00eb      	lsls	r3, r5, #3
 8003968:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800396c:	00e2      	lsls	r2, r4, #3
 800396e:	4614      	mov	r4, r2
 8003970:	461d      	mov	r5, r3
 8003972:	eb14 030a 	adds.w	r3, r4, sl
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	eb45 030b 	adc.w	r3, r5, fp
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800398a:	4629      	mov	r1, r5
 800398c:	028b      	lsls	r3, r1, #10
 800398e:	4621      	mov	r1, r4
 8003990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003994:	4621      	mov	r1, r4
 8003996:	028a      	lsls	r2, r1, #10
 8003998:	4610      	mov	r0, r2
 800399a:	4619      	mov	r1, r3
 800399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399e:	2200      	movs	r2, #0
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	60fa      	str	r2, [r7, #12]
 80039a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039a8:	f7fc fc4e 	bl	8000248 <__aeabi_uldivmod>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4613      	mov	r3, r2
 80039b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	0c1b      	lsrs	r3, r3, #16
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	3301      	adds	r3, #1
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80039c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039ce:	e002      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80039d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3740      	adds	r7, #64	; 0x40
 80039dc:	46bd      	mov	sp, r7
 80039de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800
 80039e8:	00f42400 	.word	0x00f42400
 80039ec:	017d7840 	.word	0x017d7840

080039f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000000 	.word	0x20000000

08003a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a0c:	f7ff fff0 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	0a9b      	lsrs	r3, r3, #10
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4903      	ldr	r1, [pc, #12]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	08005dd0 	.word	0x08005dd0

08003a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a34:	f7ff ffdc 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	0b5b      	lsrs	r3, r3, #13
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4903      	ldr	r1, [pc, #12]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40023800 	.word	0x40023800
 8003a54:	08005dd0 	.word	0x08005dd0

08003a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d012      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a80:	4b69      	ldr	r3, [pc, #420]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a68      	ldr	r2, [pc, #416]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a8a:	6093      	str	r3, [r2, #8]
 8003a8c:	4b66      	ldr	r3, [pc, #408]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a94:	4964      	ldr	r1, [pc, #400]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d017      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ab2:	4b5d      	ldr	r3, [pc, #372]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac0:	4959      	ldr	r1, [pc, #356]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d017      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aee:	4b4e      	ldr	r3, [pc, #312]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	494a      	ldr	r1, [pc, #296]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 808b 	beq.w	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b3c:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	4a39      	ldr	r2, [pc, #228]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b46:	6413      	str	r3, [r2, #64]	; 0x40
 8003b48:	4b37      	ldr	r3, [pc, #220]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b54:	4b35      	ldr	r3, [pc, #212]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a34      	ldr	r2, [pc, #208]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b60:	f7fe f970 	bl	8001e44 <HAL_GetTick>
 8003b64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b68:	f7fe f96c 	bl	8001e44 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e38f      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b7a:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b86:	4b28      	ldr	r3, [pc, #160]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d035      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d02e      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ba4:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bae:	4b1e      	ldr	r3, [pc, #120]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bba:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003bc6:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bcc:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d114      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fe f934 	bl	8001e44 <HAL_GetTick>
 8003bdc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be0:	f7fe f930 	bl	8001e44 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e351      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0ee      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c0e:	d111      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c1e:	400b      	ands	r3, r1
 8003c20:	4901      	ldr	r1, [pc, #4]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
 8003c26:	e00b      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40007000 	.word	0x40007000
 8003c30:	0ffffcff 	.word	0x0ffffcff
 8003c34:	4bac      	ldr	r3, [pc, #688]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4aab      	ldr	r2, [pc, #684]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c3e:	6093      	str	r3, [r2, #8]
 8003c40:	4ba9      	ldr	r3, [pc, #676]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c4c:	49a6      	ldr	r1, [pc, #664]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d010      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c5e:	4ba2      	ldr	r3, [pc, #648]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c64:	4aa0      	ldr	r2, [pc, #640]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c6e:	4b9e      	ldr	r3, [pc, #632]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c70:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	499b      	ldr	r1, [pc, #620]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c8c:	4b96      	ldr	r3, [pc, #600]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9a:	4993      	ldr	r1, [pc, #588]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cae:	4b8e      	ldr	r3, [pc, #568]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cbc:	498a      	ldr	r1, [pc, #552]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cd0:	4b85      	ldr	r3, [pc, #532]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cde:	4982      	ldr	r1, [pc, #520]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cf2:	4b7d      	ldr	r3, [pc, #500]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	4979      	ldr	r1, [pc, #484]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d14:	4b74      	ldr	r3, [pc, #464]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	f023 0203 	bic.w	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	4971      	ldr	r1, [pc, #452]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d36:	4b6c      	ldr	r3, [pc, #432]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3c:	f023 020c 	bic.w	r2, r3, #12
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d44:	4968      	ldr	r1, [pc, #416]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d58:	4b63      	ldr	r3, [pc, #396]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	4960      	ldr	r1, [pc, #384]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d7a:	4b5b      	ldr	r3, [pc, #364]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d88:	4957      	ldr	r1, [pc, #348]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d9c:	4b52      	ldr	r3, [pc, #328]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	494f      	ldr	r1, [pc, #316]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003dbe:	4b4a      	ldr	r3, [pc, #296]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dcc:	4946      	ldr	r1, [pc, #280]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003de0:	4b41      	ldr	r3, [pc, #260]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dee:	493e      	ldr	r1, [pc, #248]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e02:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e10:	4935      	ldr	r1, [pc, #212]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e24:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e32:	492d      	ldr	r1, [pc, #180]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d011      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e46:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e54:	4924      	ldr	r1, [pc, #144]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e64:	d101      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e66:	2301      	movs	r3, #1
 8003e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e76:	2301      	movs	r3, #1
 8003e78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e86:	4b18      	ldr	r3, [pc, #96]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e94:	4914      	ldr	r1, [pc, #80]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00b      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb8:	490b      	ldr	r1, [pc, #44]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00f      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003edc:	4902      	ldr	r1, [pc, #8]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ee4:	e002      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003ee6:	bf00      	nop
 8003ee8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00b      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ef8:	4b8a      	ldr	r3, [pc, #552]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003efe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	4986      	ldr	r1, [pc, #536]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00b      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f1c:	4b81      	ldr	r3, [pc, #516]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f22:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f2c:	497d      	ldr	r1, [pc, #500]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d006      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80d6 	beq.w	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f48:	4b76      	ldr	r3, [pc, #472]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a75      	ldr	r2, [pc, #468]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f54:	f7fd ff76 	bl	8001e44 <HAL_GetTick>
 8003f58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f5c:	f7fd ff72 	bl	8001e44 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	; 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e195      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f6e:	4b6d      	ldr	r3, [pc, #436]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d021      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d11d      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f8e:	4b65      	ldr	r3, [pc, #404]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f94:	0c1b      	lsrs	r3, r3, #16
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f9c:	4b61      	ldr	r3, [pc, #388]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa2:	0e1b      	lsrs	r3, r3, #24
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	019a      	lsls	r2, r3, #6
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	071b      	lsls	r3, r3, #28
 8003fc2:	4958      	ldr	r1, [pc, #352]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d004      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d02e      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ff4:	d129      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ff6:	4b4b      	ldr	r3, [pc, #300]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004004:	4b47      	ldr	r3, [pc, #284]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400a:	0f1b      	lsrs	r3, r3, #28
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	019a      	lsls	r2, r3, #6
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	041b      	lsls	r3, r3, #16
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	071b      	lsls	r3, r3, #28
 800402a:	493e      	ldr	r1, [pc, #248]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004032:	4b3c      	ldr	r3, [pc, #240]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004038:	f023 021f 	bic.w	r2, r3, #31
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	3b01      	subs	r3, #1
 8004042:	4938      	ldr	r1, [pc, #224]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01d      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004056:	4b33      	ldr	r3, [pc, #204]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405c:	0e1b      	lsrs	r3, r3, #24
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004064:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800406a:	0f1b      	lsrs	r3, r3, #28
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	019a      	lsls	r2, r3, #6
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	431a      	orrs	r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	061b      	lsls	r3, r3, #24
 8004084:	431a      	orrs	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	071b      	lsls	r3, r3, #28
 800408a:	4926      	ldr	r1, [pc, #152]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d011      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	019a      	lsls	r2, r3, #6
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	071b      	lsls	r3, r3, #28
 80040ba:	491a      	ldr	r1, [pc, #104]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040c2:	4b18      	ldr	r3, [pc, #96]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a17      	ldr	r2, [pc, #92]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ce:	f7fd feb9 	bl	8001e44 <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040d6:	f7fd feb5 	bl	8001e44 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b64      	cmp	r3, #100	; 0x64
 80040e2:	d901      	bls.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e0d8      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040e8:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	f040 80ce 	bne.w	8004298 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a08      	ldr	r2, [pc, #32]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004108:	f7fd fe9c 	bl	8001e44 <HAL_GetTick>
 800410c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800410e:	e00b      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004110:	f7fd fe98 	bl	8001e44 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	; 0x64
 800411c:	d904      	bls.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e0bb      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004128:	4b5e      	ldr	r3, [pc, #376]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004134:	d0ec      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004152:	2b00      	cmp	r3, #0
 8004154:	d02e      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d12a      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800415e:	4b51      	ldr	r3, [pc, #324]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800416c:	4b4d      	ldr	r3, [pc, #308]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	0f1b      	lsrs	r3, r3, #28
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	019a      	lsls	r2, r3, #6
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	041b      	lsls	r3, r3, #16
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	061b      	lsls	r3, r3, #24
 800418c:	431a      	orrs	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	071b      	lsls	r3, r3, #28
 8004192:	4944      	ldr	r1, [pc, #272]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800419a:	4b42      	ldr	r3, [pc, #264]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800419c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	3b01      	subs	r3, #1
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	493d      	ldr	r1, [pc, #244]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d022      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041c8:	d11d      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041ca:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d0:	0e1b      	lsrs	r3, r3, #24
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041d8:	4b32      	ldr	r3, [pc, #200]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	0f1b      	lsrs	r3, r3, #28
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	019a      	lsls	r2, r3, #6
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	041b      	lsls	r3, r3, #16
 80041f2:	431a      	orrs	r2, r3
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	061b      	lsls	r3, r3, #24
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	071b      	lsls	r3, r3, #28
 80041fe:	4929      	ldr	r1, [pc, #164]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d028      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004212:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004218:	0e1b      	lsrs	r3, r3, #24
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004220:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	0c1b      	lsrs	r3, r3, #16
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	019a      	lsls	r2, r3, #6
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	041b      	lsls	r3, r3, #16
 8004238:	431a      	orrs	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	061b      	lsls	r3, r3, #24
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	071b      	lsls	r3, r3, #28
 8004246:	4917      	ldr	r1, [pc, #92]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800424e:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004254:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	4911      	ldr	r1, [pc, #68]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004264:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a0e      	ldr	r2, [pc, #56]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800426a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004270:	f7fd fde8 	bl	8001e44 <HAL_GetTick>
 8004274:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004276:	e008      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004278:	f7fd fde4 	bl	8001e44 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e007      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004292:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004296:	d1ef      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800

080042a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e040      	b.n	800433c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd fcda 	bl	8001c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2224      	movs	r2, #36	; 0x24
 80042d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0201 	bic.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fc06 	bl	8004af8 <UART_SetConfig>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e022      	b.n	800433c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fe5e 	bl	8004fc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fee5 	bl	8005104 <UART_CheckIdleState>
 800433a:	4603      	mov	r3, r0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004358:	2b20      	cmp	r3, #32
 800435a:	d171      	bne.n	8004440 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_UART_Transmit+0x24>
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e06a      	b.n	8004442 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2221      	movs	r2, #33	; 0x21
 8004378:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800437a:	f7fd fd63 	bl	8001e44 <HAL_GetTick>
 800437e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	88fa      	ldrh	r2, [r7, #6]
 8004384:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004398:	d108      	bne.n	80043ac <HAL_UART_Transmit+0x68>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	e003      	b.n	80043b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043b4:	e02c      	b.n	8004410 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2200      	movs	r2, #0
 80043be:	2180      	movs	r1, #128	; 0x80
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 feec 	bl	800519e <UART_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e038      	b.n	8004442 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	3302      	adds	r3, #2
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	e007      	b.n	80043fe <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	781a      	ldrb	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	3301      	adds	r3, #1
 80043fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1cc      	bne.n	80043b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2200      	movs	r2, #0
 8004424:	2140      	movs	r1, #64	; 0x40
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 feb9 	bl	800519e <UART_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e005      	b.n	8004442 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e000      	b.n	8004442 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004440:	2302      	movs	r3, #2
  }
}
 8004442:	4618      	mov	r0, r3
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b08a      	sub	sp, #40	; 0x28
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	4613      	mov	r3, r2
 8004456:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800445e:	2b20      	cmp	r3, #32
 8004460:	d132      	bne.n	80044c8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_UART_Receive_IT+0x24>
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e02b      	b.n	80044ca <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d018      	beq.n	80044b8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	613b      	str	r3, [r7, #16]
   return(result);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	623b      	str	r3, [r7, #32]
 80044a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	69f9      	ldr	r1, [r7, #28]
 80044aa:	6a3a      	ldr	r2, [r7, #32]
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e6      	bne.n	8004486 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	461a      	mov	r2, r3
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 ff34 	bl	800532c <UART_Start_Receive_IT>
 80044c4:	4603      	mov	r3, r0
 80044c6:	e000      	b.n	80044ca <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
  }
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3728      	adds	r7, #40	; 0x28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b0ba      	sub	sp, #232	; 0xe8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80044fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004502:	4013      	ands	r3, r2
 8004504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d115      	bne.n	800453c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00f      	beq.n	800453c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800451c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d009      	beq.n	800453c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 82ac 	beq.w	8004a8a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	4798      	blx	r3
      }
      return;
 800453a:	e2a6      	b.n	8004a8a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800453c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8117 	beq.w	8004774 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004552:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004556:	4b85      	ldr	r3, [pc, #532]	; (800476c <HAL_UART_IRQHandler+0x298>)
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 810a 	beq.w	8004774 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d011      	beq.n	8004590 <HAL_UART_IRQHandler+0xbc>
 800456c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2201      	movs	r2, #1
 800457e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004586:	f043 0201 	orr.w	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d011      	beq.n	80045c0 <HAL_UART_IRQHandler+0xec>
 800459c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00b      	beq.n	80045c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2202      	movs	r2, #2
 80045ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b6:	f043 0204 	orr.w	r2, r3, #4
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d011      	beq.n	80045f0 <HAL_UART_IRQHandler+0x11c>
 80045cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2204      	movs	r2, #4
 80045de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e6:	f043 0202 	orr.w	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d017      	beq.n	800462c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d105      	bne.n	8004614 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800460c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00b      	beq.n	800462c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2208      	movs	r2, #8
 800461a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004622:	f043 0208 	orr.w	r2, r3, #8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800462c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004634:	2b00      	cmp	r3, #0
 8004636:	d012      	beq.n	800465e <HAL_UART_IRQHandler+0x18a>
 8004638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800463c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00c      	beq.n	800465e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800464c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004654:	f043 0220 	orr.w	r2, r3, #32
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8212 	beq.w	8004a8e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00d      	beq.n	8004692 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004698:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d005      	beq.n	80046b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d04f      	beq.n	8004756 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fefe 	bl	80054b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c6:	2b40      	cmp	r3, #64	; 0x40
 80046c8:	d141      	bne.n	800474e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3308      	adds	r3, #8
 80046d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3308      	adds	r3, #8
 80046f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800470e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1d9      	bne.n	80046ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471a:	2b00      	cmp	r3, #0
 800471c:	d013      	beq.n	8004746 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004722:	4a13      	ldr	r2, [pc, #76]	; (8004770 <HAL_UART_IRQHandler+0x29c>)
 8004724:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe faad 	bl	8002c8a <HAL_DMA_Abort_IT>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d017      	beq.n	8004766 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004740:	4610      	mov	r0, r2
 8004742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004744:	e00f      	b.n	8004766 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f9b6 	bl	8004ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474c:	e00b      	b.n	8004766 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f9b2 	bl	8004ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004754:	e007      	b.n	8004766 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f9ae 	bl	8004ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004764:	e193      	b.n	8004a8e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004766:	bf00      	nop
    return;
 8004768:	e191      	b.n	8004a8e <HAL_UART_IRQHandler+0x5ba>
 800476a:	bf00      	nop
 800476c:	04000120 	.word	0x04000120
 8004770:	08005581 	.word	0x08005581

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004778:	2b01      	cmp	r3, #1
 800477a:	f040 814c 	bne.w	8004a16 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8145 	beq.w	8004a16 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800478c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 813e 	beq.w	8004a16 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2210      	movs	r2, #16
 80047a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b40      	cmp	r3, #64	; 0x40
 80047ae:	f040 80b6 	bne.w	800491e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 8165 	beq.w	8004a92 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047d2:	429a      	cmp	r2, r3
 80047d4:	f080 815d 	bcs.w	8004a92 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ec:	f000 8086 	beq.w	80048fc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800481a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800481e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004826:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1da      	bne.n	80047f0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3308      	adds	r3, #8
 8004840:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800484a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3308      	adds	r3, #8
 800485a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800485e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004862:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004866:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e1      	bne.n	800483a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3308      	adds	r3, #8
 800487c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800488c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3308      	adds	r3, #8
 8004896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800489a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800489c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e3      	bne.n	8004876 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048cc:	f023 0310 	bic.w	r3, r3, #16
 80048d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048de:	65bb      	str	r3, [r7, #88]	; 0x58
 80048e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e4      	bne.n	80048bc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe f957 	bl	8002baa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800490e:	b29b      	uxth	r3, r3
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	b29b      	uxth	r3, r3
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f8d8 	bl	8004acc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800491c:	e0b9      	b.n	8004a92 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800492a:	b29b      	uxth	r3, r3
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80ab 	beq.w	8004a96 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80a6 	beq.w	8004a96 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800495e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800496c:	647b      	str	r3, [r7, #68]	; 0x44
 800496e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004972:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800497a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e4      	bne.n	800494a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3308      	adds	r3, #8
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	623b      	str	r3, [r7, #32]
   return(result);
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3308      	adds	r3, #8
 80049a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049a4:	633a      	str	r2, [r7, #48]	; 0x30
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e3      	bne.n	8004980 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f023 0310 	bic.w	r3, r3, #16
 80049e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	69b9      	ldr	r1, [r7, #24]
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	617b      	str	r3, [r7, #20]
   return(result);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e4      	bne.n	80049cc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f85c 	bl	8004acc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a14:	e03f      	b.n	8004a96 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00e      	beq.n	8004a40 <HAL_UART_IRQHandler+0x56c>
 8004a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d008      	beq.n	8004a40 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f853 	bl	8004ae4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a3e:	e02d      	b.n	8004a9c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00e      	beq.n	8004a6a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d008      	beq.n	8004a6a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01c      	beq.n	8004a9a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	4798      	blx	r3
    }
    return;
 8004a68:	e017      	b.n	8004a9a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d012      	beq.n	8004a9c <HAL_UART_IRQHandler+0x5c8>
 8004a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00c      	beq.n	8004a9c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fd92 	bl	80055ac <UART_EndTransmit_IT>
    return;
 8004a88:	e008      	b.n	8004a9c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004a8a:	bf00      	nop
 8004a8c:	e006      	b.n	8004a9c <HAL_UART_IRQHandler+0x5c8>
    return;
 8004a8e:	bf00      	nop
 8004a90:	e004      	b.n	8004a9c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004a92:	bf00      	nop
 8004a94:	e002      	b.n	8004a9c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004a96:	bf00      	nop
 8004a98:	e000      	b.n	8004a9c <HAL_UART_IRQHandler+0x5c8>
    return;
 8004a9a:	bf00      	nop
  }

}
 8004a9c:	37e8      	adds	r7, #232	; 0xe8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop

08004aa4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4ba6      	ldr	r3, [pc, #664]	; (8004dbc <UART_SetConfig+0x2c4>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	6979      	ldr	r1, [r7, #20]
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a94      	ldr	r2, [pc, #592]	; (8004dc0 <UART_SetConfig+0x2c8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d120      	bne.n	8004bb6 <UART_SetConfig+0xbe>
 8004b74:	4b93      	ldr	r3, [pc, #588]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d816      	bhi.n	8004bb0 <UART_SetConfig+0xb8>
 8004b82:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <UART_SetConfig+0x90>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004b99 	.word	0x08004b99
 8004b8c:	08004ba5 	.word	0x08004ba5
 8004b90:	08004b9f 	.word	0x08004b9f
 8004b94:	08004bab 	.word	0x08004bab
 8004b98:	2301      	movs	r3, #1
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e150      	b.n	8004e40 <UART_SetConfig+0x348>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e14d      	b.n	8004e40 <UART_SetConfig+0x348>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e14a      	b.n	8004e40 <UART_SetConfig+0x348>
 8004baa:	2308      	movs	r3, #8
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e147      	b.n	8004e40 <UART_SetConfig+0x348>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e144      	b.n	8004e40 <UART_SetConfig+0x348>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a83      	ldr	r2, [pc, #524]	; (8004dc8 <UART_SetConfig+0x2d0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d132      	bne.n	8004c26 <UART_SetConfig+0x12e>
 8004bc0:	4b80      	ldr	r3, [pc, #512]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b0c      	cmp	r3, #12
 8004bcc:	d828      	bhi.n	8004c20 <UART_SetConfig+0x128>
 8004bce:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <UART_SetConfig+0xdc>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004c09 	.word	0x08004c09
 8004bd8:	08004c21 	.word	0x08004c21
 8004bdc:	08004c21 	.word	0x08004c21
 8004be0:	08004c21 	.word	0x08004c21
 8004be4:	08004c15 	.word	0x08004c15
 8004be8:	08004c21 	.word	0x08004c21
 8004bec:	08004c21 	.word	0x08004c21
 8004bf0:	08004c21 	.word	0x08004c21
 8004bf4:	08004c0f 	.word	0x08004c0f
 8004bf8:	08004c21 	.word	0x08004c21
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c21 	.word	0x08004c21
 8004c04:	08004c1b 	.word	0x08004c1b
 8004c08:	2300      	movs	r3, #0
 8004c0a:	77fb      	strb	r3, [r7, #31]
 8004c0c:	e118      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	e115      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c14:	2304      	movs	r3, #4
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	e112      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	77fb      	strb	r3, [r7, #31]
 8004c1e:	e10f      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c20:	2310      	movs	r3, #16
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e10c      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a68      	ldr	r2, [pc, #416]	; (8004dcc <UART_SetConfig+0x2d4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d120      	bne.n	8004c72 <UART_SetConfig+0x17a>
 8004c30:	4b64      	ldr	r3, [pc, #400]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c3a:	2b30      	cmp	r3, #48	; 0x30
 8004c3c:	d013      	beq.n	8004c66 <UART_SetConfig+0x16e>
 8004c3e:	2b30      	cmp	r3, #48	; 0x30
 8004c40:	d814      	bhi.n	8004c6c <UART_SetConfig+0x174>
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d009      	beq.n	8004c5a <UART_SetConfig+0x162>
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d810      	bhi.n	8004c6c <UART_SetConfig+0x174>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <UART_SetConfig+0x15c>
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d006      	beq.n	8004c60 <UART_SetConfig+0x168>
 8004c52:	e00b      	b.n	8004c6c <UART_SetConfig+0x174>
 8004c54:	2300      	movs	r3, #0
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e0f2      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	77fb      	strb	r3, [r7, #31]
 8004c5e:	e0ef      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c60:	2304      	movs	r3, #4
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e0ec      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c66:	2308      	movs	r3, #8
 8004c68:	77fb      	strb	r3, [r7, #31]
 8004c6a:	e0e9      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e0e6      	b.n	8004e40 <UART_SetConfig+0x348>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a56      	ldr	r2, [pc, #344]	; (8004dd0 <UART_SetConfig+0x2d8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d120      	bne.n	8004cbe <UART_SetConfig+0x1c6>
 8004c7c:	4b51      	ldr	r3, [pc, #324]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c86:	2bc0      	cmp	r3, #192	; 0xc0
 8004c88:	d013      	beq.n	8004cb2 <UART_SetConfig+0x1ba>
 8004c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c8c:	d814      	bhi.n	8004cb8 <UART_SetConfig+0x1c0>
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d009      	beq.n	8004ca6 <UART_SetConfig+0x1ae>
 8004c92:	2b80      	cmp	r3, #128	; 0x80
 8004c94:	d810      	bhi.n	8004cb8 <UART_SetConfig+0x1c0>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <UART_SetConfig+0x1a8>
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	d006      	beq.n	8004cac <UART_SetConfig+0x1b4>
 8004c9e:	e00b      	b.n	8004cb8 <UART_SetConfig+0x1c0>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e0cc      	b.n	8004e40 <UART_SetConfig+0x348>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e0c9      	b.n	8004e40 <UART_SetConfig+0x348>
 8004cac:	2304      	movs	r3, #4
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e0c6      	b.n	8004e40 <UART_SetConfig+0x348>
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e0c3      	b.n	8004e40 <UART_SetConfig+0x348>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e0c0      	b.n	8004e40 <UART_SetConfig+0x348>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a44      	ldr	r2, [pc, #272]	; (8004dd4 <UART_SetConfig+0x2dc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d125      	bne.n	8004d14 <UART_SetConfig+0x21c>
 8004cc8:	4b3e      	ldr	r3, [pc, #248]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd6:	d017      	beq.n	8004d08 <UART_SetConfig+0x210>
 8004cd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cdc:	d817      	bhi.n	8004d0e <UART_SetConfig+0x216>
 8004cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce2:	d00b      	beq.n	8004cfc <UART_SetConfig+0x204>
 8004ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce8:	d811      	bhi.n	8004d0e <UART_SetConfig+0x216>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <UART_SetConfig+0x1fe>
 8004cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf2:	d006      	beq.n	8004d02 <UART_SetConfig+0x20a>
 8004cf4:	e00b      	b.n	8004d0e <UART_SetConfig+0x216>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e0a1      	b.n	8004e40 <UART_SetConfig+0x348>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e09e      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d02:	2304      	movs	r3, #4
 8004d04:	77fb      	strb	r3, [r7, #31]
 8004d06:	e09b      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d08:	2308      	movs	r3, #8
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e098      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d0e:	2310      	movs	r3, #16
 8004d10:	77fb      	strb	r3, [r7, #31]
 8004d12:	e095      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a2f      	ldr	r2, [pc, #188]	; (8004dd8 <UART_SetConfig+0x2e0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d125      	bne.n	8004d6a <UART_SetConfig+0x272>
 8004d1e:	4b29      	ldr	r3, [pc, #164]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d2c:	d017      	beq.n	8004d5e <UART_SetConfig+0x266>
 8004d2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d32:	d817      	bhi.n	8004d64 <UART_SetConfig+0x26c>
 8004d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d38:	d00b      	beq.n	8004d52 <UART_SetConfig+0x25a>
 8004d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3e:	d811      	bhi.n	8004d64 <UART_SetConfig+0x26c>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <UART_SetConfig+0x254>
 8004d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d48:	d006      	beq.n	8004d58 <UART_SetConfig+0x260>
 8004d4a:	e00b      	b.n	8004d64 <UART_SetConfig+0x26c>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e076      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d52:	2302      	movs	r3, #2
 8004d54:	77fb      	strb	r3, [r7, #31]
 8004d56:	e073      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e070      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d5e:	2308      	movs	r3, #8
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e06d      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d64:	2310      	movs	r3, #16
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e06a      	b.n	8004e40 <UART_SetConfig+0x348>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1b      	ldr	r2, [pc, #108]	; (8004ddc <UART_SetConfig+0x2e4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d138      	bne.n	8004de6 <UART_SetConfig+0x2ee>
 8004d74:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <UART_SetConfig+0x2cc>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d82:	d017      	beq.n	8004db4 <UART_SetConfig+0x2bc>
 8004d84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d88:	d82a      	bhi.n	8004de0 <UART_SetConfig+0x2e8>
 8004d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8e:	d00b      	beq.n	8004da8 <UART_SetConfig+0x2b0>
 8004d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d94:	d824      	bhi.n	8004de0 <UART_SetConfig+0x2e8>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <UART_SetConfig+0x2aa>
 8004d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9e:	d006      	beq.n	8004dae <UART_SetConfig+0x2b6>
 8004da0:	e01e      	b.n	8004de0 <UART_SetConfig+0x2e8>
 8004da2:	2300      	movs	r3, #0
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e04b      	b.n	8004e40 <UART_SetConfig+0x348>
 8004da8:	2302      	movs	r3, #2
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e048      	b.n	8004e40 <UART_SetConfig+0x348>
 8004dae:	2304      	movs	r3, #4
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e045      	b.n	8004e40 <UART_SetConfig+0x348>
 8004db4:	2308      	movs	r3, #8
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e042      	b.n	8004e40 <UART_SetConfig+0x348>
 8004dba:	bf00      	nop
 8004dbc:	efff69f3 	.word	0xefff69f3
 8004dc0:	40011000 	.word	0x40011000
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40004400 	.word	0x40004400
 8004dcc:	40004800 	.word	0x40004800
 8004dd0:	40004c00 	.word	0x40004c00
 8004dd4:	40005000 	.word	0x40005000
 8004dd8:	40011400 	.word	0x40011400
 8004ddc:	40007800 	.word	0x40007800
 8004de0:	2310      	movs	r3, #16
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e02c      	b.n	8004e40 <UART_SetConfig+0x348>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a72      	ldr	r2, [pc, #456]	; (8004fb4 <UART_SetConfig+0x4bc>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d125      	bne.n	8004e3c <UART_SetConfig+0x344>
 8004df0:	4b71      	ldr	r3, [pc, #452]	; (8004fb8 <UART_SetConfig+0x4c0>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004dfa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004dfe:	d017      	beq.n	8004e30 <UART_SetConfig+0x338>
 8004e00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e04:	d817      	bhi.n	8004e36 <UART_SetConfig+0x33e>
 8004e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0a:	d00b      	beq.n	8004e24 <UART_SetConfig+0x32c>
 8004e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e10:	d811      	bhi.n	8004e36 <UART_SetConfig+0x33e>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <UART_SetConfig+0x326>
 8004e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e1a:	d006      	beq.n	8004e2a <UART_SetConfig+0x332>
 8004e1c:	e00b      	b.n	8004e36 <UART_SetConfig+0x33e>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	77fb      	strb	r3, [r7, #31]
 8004e22:	e00d      	b.n	8004e40 <UART_SetConfig+0x348>
 8004e24:	2302      	movs	r3, #2
 8004e26:	77fb      	strb	r3, [r7, #31]
 8004e28:	e00a      	b.n	8004e40 <UART_SetConfig+0x348>
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	77fb      	strb	r3, [r7, #31]
 8004e2e:	e007      	b.n	8004e40 <UART_SetConfig+0x348>
 8004e30:	2308      	movs	r3, #8
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e004      	b.n	8004e40 <UART_SetConfig+0x348>
 8004e36:	2310      	movs	r3, #16
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e001      	b.n	8004e40 <UART_SetConfig+0x348>
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e48:	d15b      	bne.n	8004f02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e4a:	7ffb      	ldrb	r3, [r7, #31]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d828      	bhi.n	8004ea2 <UART_SetConfig+0x3aa>
 8004e50:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <UART_SetConfig+0x360>)
 8004e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004e7d 	.word	0x08004e7d
 8004e5c:	08004e85 	.word	0x08004e85
 8004e60:	08004e8d 	.word	0x08004e8d
 8004e64:	08004ea3 	.word	0x08004ea3
 8004e68:	08004e93 	.word	0x08004e93
 8004e6c:	08004ea3 	.word	0x08004ea3
 8004e70:	08004ea3 	.word	0x08004ea3
 8004e74:	08004ea3 	.word	0x08004ea3
 8004e78:	08004e9b 	.word	0x08004e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e7c:	f7fe fdc4 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8004e80:	61b8      	str	r0, [r7, #24]
        break;
 8004e82:	e013      	b.n	8004eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e84:	f7fe fdd4 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8004e88:	61b8      	str	r0, [r7, #24]
        break;
 8004e8a:	e00f      	b.n	8004eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e8c:	4b4b      	ldr	r3, [pc, #300]	; (8004fbc <UART_SetConfig+0x4c4>)
 8004e8e:	61bb      	str	r3, [r7, #24]
        break;
 8004e90:	e00c      	b.n	8004eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e92:	f7fe fce7 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8004e96:	61b8      	str	r0, [r7, #24]
        break;
 8004e98:	e008      	b.n	8004eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ea0:	e004      	b.n	8004eac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	77bb      	strb	r3, [r7, #30]
        break;
 8004eaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d074      	beq.n	8004f9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	005a      	lsls	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	441a      	add	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b0f      	cmp	r3, #15
 8004ecc:	d916      	bls.n	8004efc <UART_SetConfig+0x404>
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed4:	d212      	bcs.n	8004efc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f023 030f 	bic.w	r3, r3, #15
 8004ede:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	89fb      	ldrh	r3, [r7, #14]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	89fa      	ldrh	r2, [r7, #14]
 8004ef8:	60da      	str	r2, [r3, #12]
 8004efa:	e04f      	b.n	8004f9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	77bb      	strb	r3, [r7, #30]
 8004f00:	e04c      	b.n	8004f9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f02:	7ffb      	ldrb	r3, [r7, #31]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d828      	bhi.n	8004f5a <UART_SetConfig+0x462>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <UART_SetConfig+0x418>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f35 	.word	0x08004f35
 8004f14:	08004f3d 	.word	0x08004f3d
 8004f18:	08004f45 	.word	0x08004f45
 8004f1c:	08004f5b 	.word	0x08004f5b
 8004f20:	08004f4b 	.word	0x08004f4b
 8004f24:	08004f5b 	.word	0x08004f5b
 8004f28:	08004f5b 	.word	0x08004f5b
 8004f2c:	08004f5b 	.word	0x08004f5b
 8004f30:	08004f53 	.word	0x08004f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f34:	f7fe fd68 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8004f38:	61b8      	str	r0, [r7, #24]
        break;
 8004f3a:	e013      	b.n	8004f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f3c:	f7fe fd78 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8004f40:	61b8      	str	r0, [r7, #24]
        break;
 8004f42:	e00f      	b.n	8004f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f44:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <UART_SetConfig+0x4c4>)
 8004f46:	61bb      	str	r3, [r7, #24]
        break;
 8004f48:	e00c      	b.n	8004f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4a:	f7fe fc8b 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8004f4e:	61b8      	str	r0, [r7, #24]
        break;
 8004f50:	e008      	b.n	8004f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f56:	61bb      	str	r3, [r7, #24]
        break;
 8004f58:	e004      	b.n	8004f64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	77bb      	strb	r3, [r7, #30]
        break;
 8004f62:	bf00      	nop
    }

    if (pclk != 0U)
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d018      	beq.n	8004f9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	085a      	lsrs	r2, r3, #1
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	441a      	add	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b0f      	cmp	r3, #15
 8004f82:	d909      	bls.n	8004f98 <UART_SetConfig+0x4a0>
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f8a:	d205      	bcs.n	8004f98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	e001      	b.n	8004f9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004fa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40007c00 	.word	0x40007c00
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	00f42400 	.word	0x00f42400

08004fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01a      	beq.n	80050d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050be:	d10a      	bne.n	80050d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	605a      	str	r2, [r3, #4]
  }
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af02      	add	r7, sp, #8
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005114:	f7fc fe96 	bl	8001e44 <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d10e      	bne.n	8005146 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f831 	bl	800519e <UART_WaitOnFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e027      	b.n	8005196 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b04      	cmp	r3, #4
 8005152:	d10e      	bne.n	8005172 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005154:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f81b 	bl	800519e <UART_WaitOnFlagUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e011      	b.n	8005196 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b09c      	sub	sp, #112	; 0x70
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	603b      	str	r3, [r7, #0]
 80051aa:	4613      	mov	r3, r2
 80051ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ae:	e0a7      	b.n	8005300 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b6:	f000 80a3 	beq.w	8005300 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ba:	f7fc fe43 	bl	8001e44 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d302      	bcc.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80051ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d13f      	bne.n	8005250 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051e4:	667b      	str	r3, [r7, #100]	; 0x64
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e6      	bne.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3308      	adds	r3, #8
 8005208:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	663b      	str	r3, [r7, #96]	; 0x60
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3308      	adds	r3, #8
 8005220:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005222:	64ba      	str	r2, [r7, #72]	; 0x48
 8005224:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e5      	bne.n	8005202 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2220      	movs	r2, #32
 800523a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e068      	b.n	8005322 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b00      	cmp	r3, #0
 800525c:	d050      	beq.n	8005300 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800526c:	d148      	bne.n	8005300 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005276:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800528c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005296:	637b      	str	r3, [r7, #52]	; 0x34
 8005298:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800529c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e6      	bne.n	8005278 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3308      	adds	r3, #8
 80052c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052ca:	623a      	str	r2, [r7, #32]
 80052cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	69f9      	ldr	r1, [r7, #28]
 80052d0:	6a3a      	ldr	r2, [r7, #32]
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e5      	bne.n	80052aa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e010      	b.n	8005322 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69da      	ldr	r2, [r3, #28]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4013      	ands	r3, r2
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	429a      	cmp	r2, r3
 800530e:	bf0c      	ite	eq
 8005310:	2301      	moveq	r3, #1
 8005312:	2300      	movne	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	461a      	mov	r2, r3
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	429a      	cmp	r2, r3
 800531c:	f43f af48 	beq.w	80051b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3770      	adds	r7, #112	; 0x70
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800532c:	b480      	push	{r7}
 800532e:	b097      	sub	sp, #92	; 0x5c
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	4613      	mov	r3, r2
 8005338:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	88fa      	ldrh	r2, [r7, #6]
 8005344:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	88fa      	ldrh	r2, [r7, #6]
 800534c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535e:	d10e      	bne.n	800537e <UART_Start_Receive_IT+0x52>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d105      	bne.n	8005374 <UART_Start_Receive_IT+0x48>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800536e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005372:	e02d      	b.n	80053d0 <UART_Start_Receive_IT+0xa4>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	22ff      	movs	r2, #255	; 0xff
 8005378:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800537c:	e028      	b.n	80053d0 <UART_Start_Receive_IT+0xa4>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10d      	bne.n	80053a2 <UART_Start_Receive_IT+0x76>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <UART_Start_Receive_IT+0x6c>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	22ff      	movs	r2, #255	; 0xff
 8005392:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005396:	e01b      	b.n	80053d0 <UART_Start_Receive_IT+0xa4>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	227f      	movs	r2, #127	; 0x7f
 800539c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053a0:	e016      	b.n	80053d0 <UART_Start_Receive_IT+0xa4>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053aa:	d10d      	bne.n	80053c8 <UART_Start_Receive_IT+0x9c>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d104      	bne.n	80053be <UART_Start_Receive_IT+0x92>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	227f      	movs	r2, #127	; 0x7f
 80053b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053bc:	e008      	b.n	80053d0 <UART_Start_Receive_IT+0xa4>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	223f      	movs	r2, #63	; 0x3f
 80053c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053c6:	e003      	b.n	80053d0 <UART_Start_Receive_IT+0xa4>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2222      	movs	r2, #34	; 0x22
 80053dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3308      	adds	r3, #8
 80053e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	657b      	str	r3, [r7, #84]	; 0x54
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3308      	adds	r3, #8
 80053fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005400:	64ba      	str	r2, [r7, #72]	; 0x48
 8005402:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800540e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e5      	bne.n	80053e0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541c:	d107      	bne.n	800542e <UART_Start_Receive_IT+0x102>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d103      	bne.n	800542e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4a21      	ldr	r2, [pc, #132]	; (80054b0 <UART_Start_Receive_IT+0x184>)
 800542a:	669a      	str	r2, [r3, #104]	; 0x68
 800542c:	e002      	b.n	8005434 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4a20      	ldr	r2, [pc, #128]	; (80054b4 <UART_Start_Receive_IT+0x188>)
 8005432:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d019      	beq.n	8005470 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545a:	637b      	str	r3, [r7, #52]	; 0x34
 800545c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e6      	bne.n	800543c <UART_Start_Receive_IT+0x110>
 800546e:	e018      	b.n	80054a2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	613b      	str	r3, [r7, #16]
   return(result);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f043 0320 	orr.w	r3, r3, #32
 8005484:	653b      	str	r3, [r7, #80]	; 0x50
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548e:	623b      	str	r3, [r7, #32]
 8005490:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	69f9      	ldr	r1, [r7, #28]
 8005494:	6a3a      	ldr	r2, [r7, #32]
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	61bb      	str	r3, [r7, #24]
   return(result);
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e6      	bne.n	8005470 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	375c      	adds	r7, #92	; 0x5c
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	08005767 	.word	0x08005767
 80054b4:	08005601 	.word	0x08005601

080054b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b095      	sub	sp, #84	; 0x54
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054de:	643b      	str	r3, [r7, #64]	; 0x40
 80054e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054e6:	e841 2300 	strex	r3, r2, [r1]
 80054ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e6      	bne.n	80054c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3308      	adds	r3, #8
 80054f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	61fb      	str	r3, [r7, #28]
   return(result);
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	64bb      	str	r3, [r7, #72]	; 0x48
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3308      	adds	r3, #8
 8005510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e5      	bne.n	80054f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800552a:	2b01      	cmp	r3, #1
 800552c:	d118      	bne.n	8005560 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	60bb      	str	r3, [r7, #8]
   return(result);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f023 0310 	bic.w	r3, r3, #16
 8005542:	647b      	str	r3, [r7, #68]	; 0x44
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	6979      	ldr	r1, [r7, #20]
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	613b      	str	r3, [r7, #16]
   return(result);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e6      	bne.n	800552e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005574:	bf00      	nop
 8005576:	3754      	adds	r7, #84	; 0x54
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f7ff fa8a 	bl	8004ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055a4:	bf00      	nop
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	6979      	ldr	r1, [r7, #20]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	613b      	str	r3, [r7, #16]
   return(result);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e6      	bne.n	80055b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff fa56 	bl	8004aa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055f8:	bf00      	nop
 80055fa:	3720      	adds	r7, #32
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b096      	sub	sp, #88	; 0x58
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800560e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005618:	2b22      	cmp	r3, #34	; 0x22
 800561a:	f040 8098 	bne.w	800574e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005628:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800562c:	b2d9      	uxtb	r1, r3
 800562e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005632:	b2da      	uxtb	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005638:	400a      	ands	r2, r1
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d17b      	bne.n	800575e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005676:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800567a:	653b      	str	r3, [r7, #80]	; 0x50
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005684:	647b      	str	r3, [r7, #68]	; 0x44
 8005686:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800568a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e6      	bne.n	8005666 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3308      	adds	r3, #8
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	623b      	str	r3, [r7, #32]
   return(result);
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	f023 0301 	bic.w	r3, r3, #1
 80056ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3308      	adds	r3, #8
 80056b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056b8:	633a      	str	r2, [r7, #48]	; 0x30
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e5      	bne.n	8005698 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d12e      	bne.n	8005746 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0310 	bic.w	r3, r3, #16
 8005702:	64bb      	str	r3, [r7, #72]	; 0x48
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	69b9      	ldr	r1, [r7, #24]
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	617b      	str	r3, [r7, #20]
   return(result);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e6      	bne.n	80056ee <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b10      	cmp	r3, #16
 800572c:	d103      	bne.n	8005736 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2210      	movs	r2, #16
 8005734:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff f9c4 	bl	8004acc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005744:	e00b      	b.n	800575e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fc f968 	bl	8001a1c <HAL_UART_RxCpltCallback>
}
 800574c:	e007      	b.n	800575e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699a      	ldr	r2, [r3, #24]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0208 	orr.w	r2, r2, #8
 800575c:	619a      	str	r2, [r3, #24]
}
 800575e:	bf00      	nop
 8005760:	3758      	adds	r7, #88	; 0x58
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b096      	sub	sp, #88	; 0x58
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005774:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800577e:	2b22      	cmp	r3, #34	; 0x22
 8005780:	f040 8098 	bne.w	80058b4 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005792:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005794:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005798:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800579c:	4013      	ands	r3, r2
 800579e:	b29a      	uxth	r2, r3
 80057a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a8:	1c9a      	adds	r2, r3, #2
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d17b      	bne.n	80058c4 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ea:	643b      	str	r3, [r7, #64]	; 0x40
 80057ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e6      	bne.n	80057cc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3308      	adds	r3, #8
 8005804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	61fb      	str	r3, [r7, #28]
   return(result);
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f023 0301 	bic.w	r3, r3, #1
 8005814:	64bb      	str	r3, [r7, #72]	; 0x48
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3308      	adds	r3, #8
 800581c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800581e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e5      	bne.n	80057fe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800584a:	2b01      	cmp	r3, #1
 800584c:	d12e      	bne.n	80058ac <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	60bb      	str	r3, [r7, #8]
   return(result);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f023 0310 	bic.w	r3, r3, #16
 8005868:	647b      	str	r3, [r7, #68]	; 0x44
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005872:	61bb      	str	r3, [r7, #24]
 8005874:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	6979      	ldr	r1, [r7, #20]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	613b      	str	r3, [r7, #16]
   return(result);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e6      	bne.n	8005854 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b10      	cmp	r3, #16
 8005892:	d103      	bne.n	800589c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2210      	movs	r2, #16
 800589a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff f911 	bl	8004acc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058aa:	e00b      	b.n	80058c4 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7fc f8b5 	bl	8001a1c <HAL_UART_RxCpltCallback>
}
 80058b2:	e007      	b.n	80058c4 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0208 	orr.w	r2, r2, #8
 80058c2:	619a      	str	r2, [r3, #24]
}
 80058c4:	bf00      	nop
 80058c6:	3758      	adds	r7, #88	; 0x58
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <__libc_init_array>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	4d0d      	ldr	r5, [pc, #52]	; (8005904 <__libc_init_array+0x38>)
 80058d0:	4c0d      	ldr	r4, [pc, #52]	; (8005908 <__libc_init_array+0x3c>)
 80058d2:	1b64      	subs	r4, r4, r5
 80058d4:	10a4      	asrs	r4, r4, #2
 80058d6:	2600      	movs	r6, #0
 80058d8:	42a6      	cmp	r6, r4
 80058da:	d109      	bne.n	80058f0 <__libc_init_array+0x24>
 80058dc:	4d0b      	ldr	r5, [pc, #44]	; (800590c <__libc_init_array+0x40>)
 80058de:	4c0c      	ldr	r4, [pc, #48]	; (8005910 <__libc_init_array+0x44>)
 80058e0:	f000 f87c 	bl	80059dc <_init>
 80058e4:	1b64      	subs	r4, r4, r5
 80058e6:	10a4      	asrs	r4, r4, #2
 80058e8:	2600      	movs	r6, #0
 80058ea:	42a6      	cmp	r6, r4
 80058ec:	d105      	bne.n	80058fa <__libc_init_array+0x2e>
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
 80058f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f4:	4798      	blx	r3
 80058f6:	3601      	adds	r6, #1
 80058f8:	e7ee      	b.n	80058d8 <__libc_init_array+0xc>
 80058fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fe:	4798      	blx	r3
 8005900:	3601      	adds	r6, #1
 8005902:	e7f2      	b.n	80058ea <__libc_init_array+0x1e>
 8005904:	08005e08 	.word	0x08005e08
 8005908:	08005e08 	.word	0x08005e08
 800590c:	08005e08 	.word	0x08005e08
 8005910:	08005e0c 	.word	0x08005e0c

08005914 <__itoa>:
 8005914:	1e93      	subs	r3, r2, #2
 8005916:	2b22      	cmp	r3, #34	; 0x22
 8005918:	b510      	push	{r4, lr}
 800591a:	460c      	mov	r4, r1
 800591c:	d904      	bls.n	8005928 <__itoa+0x14>
 800591e:	2300      	movs	r3, #0
 8005920:	700b      	strb	r3, [r1, #0]
 8005922:	461c      	mov	r4, r3
 8005924:	4620      	mov	r0, r4
 8005926:	bd10      	pop	{r4, pc}
 8005928:	2a0a      	cmp	r2, #10
 800592a:	d109      	bne.n	8005940 <__itoa+0x2c>
 800592c:	2800      	cmp	r0, #0
 800592e:	da07      	bge.n	8005940 <__itoa+0x2c>
 8005930:	232d      	movs	r3, #45	; 0x2d
 8005932:	700b      	strb	r3, [r1, #0]
 8005934:	4240      	negs	r0, r0
 8005936:	2101      	movs	r1, #1
 8005938:	4421      	add	r1, r4
 800593a:	f000 f80d 	bl	8005958 <__utoa>
 800593e:	e7f1      	b.n	8005924 <__itoa+0x10>
 8005940:	2100      	movs	r1, #0
 8005942:	e7f9      	b.n	8005938 <__itoa+0x24>

08005944 <itoa>:
 8005944:	f7ff bfe6 	b.w	8005914 <__itoa>

08005948 <memset>:
 8005948:	4402      	add	r2, r0
 800594a:	4603      	mov	r3, r0
 800594c:	4293      	cmp	r3, r2
 800594e:	d100      	bne.n	8005952 <memset+0xa>
 8005950:	4770      	bx	lr
 8005952:	f803 1b01 	strb.w	r1, [r3], #1
 8005956:	e7f9      	b.n	800594c <memset+0x4>

08005958 <__utoa>:
 8005958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595a:	4c1f      	ldr	r4, [pc, #124]	; (80059d8 <__utoa+0x80>)
 800595c:	b08b      	sub	sp, #44	; 0x2c
 800595e:	4605      	mov	r5, r0
 8005960:	460b      	mov	r3, r1
 8005962:	466e      	mov	r6, sp
 8005964:	f104 0c20 	add.w	ip, r4, #32
 8005968:	6820      	ldr	r0, [r4, #0]
 800596a:	6861      	ldr	r1, [r4, #4]
 800596c:	4637      	mov	r7, r6
 800596e:	c703      	stmia	r7!, {r0, r1}
 8005970:	3408      	adds	r4, #8
 8005972:	4564      	cmp	r4, ip
 8005974:	463e      	mov	r6, r7
 8005976:	d1f7      	bne.n	8005968 <__utoa+0x10>
 8005978:	7921      	ldrb	r1, [r4, #4]
 800597a:	7139      	strb	r1, [r7, #4]
 800597c:	1e91      	subs	r1, r2, #2
 800597e:	6820      	ldr	r0, [r4, #0]
 8005980:	6038      	str	r0, [r7, #0]
 8005982:	2922      	cmp	r1, #34	; 0x22
 8005984:	f04f 0100 	mov.w	r1, #0
 8005988:	d904      	bls.n	8005994 <__utoa+0x3c>
 800598a:	7019      	strb	r1, [r3, #0]
 800598c:	460b      	mov	r3, r1
 800598e:	4618      	mov	r0, r3
 8005990:	b00b      	add	sp, #44	; 0x2c
 8005992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005994:	1e58      	subs	r0, r3, #1
 8005996:	4684      	mov	ip, r0
 8005998:	fbb5 f7f2 	udiv	r7, r5, r2
 800599c:	fb02 5617 	mls	r6, r2, r7, r5
 80059a0:	3628      	adds	r6, #40	; 0x28
 80059a2:	446e      	add	r6, sp
 80059a4:	460c      	mov	r4, r1
 80059a6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80059aa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80059ae:	462e      	mov	r6, r5
 80059b0:	42b2      	cmp	r2, r6
 80059b2:	f101 0101 	add.w	r1, r1, #1
 80059b6:	463d      	mov	r5, r7
 80059b8:	d9ee      	bls.n	8005998 <__utoa+0x40>
 80059ba:	2200      	movs	r2, #0
 80059bc:	545a      	strb	r2, [r3, r1]
 80059be:	1919      	adds	r1, r3, r4
 80059c0:	1aa5      	subs	r5, r4, r2
 80059c2:	42aa      	cmp	r2, r5
 80059c4:	dae3      	bge.n	800598e <__utoa+0x36>
 80059c6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80059ca:	780e      	ldrb	r6, [r1, #0]
 80059cc:	7006      	strb	r6, [r0, #0]
 80059ce:	3201      	adds	r2, #1
 80059d0:	f801 5901 	strb.w	r5, [r1], #-1
 80059d4:	e7f4      	b.n	80059c0 <__utoa+0x68>
 80059d6:	bf00      	nop
 80059d8:	08005dd8 	.word	0x08005dd8

080059dc <_init>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr

080059e8 <_fini>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	bf00      	nop
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr
